{"version":3,"sources":["components/ActivityTypeButtonSet.js","components/ExerciseTypeButtonSet.js","helpers/trainingPlan.js","components/CompletedActivitiesList.js","components/PlannedActivitiesList.js","components/PlannedExercisesList.js","components/PlannedActivityForm.js","components/PlannedExerciseForm.js","actions/actionTypes.js","api/PlannedActivitiesApi.js","api/PlannedActivityApi.js","api/PlannedExerciseApi.js","api/PlannedExercisesApi.js","actions/plannedExerciseActions.js","actions/plannedActivityActions.js","api/ActivityTypesApi.js","actions/activityTypeActions.js","actions/exerciseTypeActions.js","actions/exerciseCategoryActions.js","components/CalendarDayModal.js","api/TrainingPlanTemplatesApi.js","actions/trainingPlanTemplateActions.js","components/TrainingPlanTemplatesContainer.js","api/CompletedActivitiesApi.js","actions/completedActivityActions.js","components/Calendar.js","api/UserApi.js","actions/userActions.js","components/App.js","index.js","reducers/plannedActivitiesReducer.js","reducers/plannedExercisesReducer.js","reducers/completedActivitiesReducer.js","reducers/activityTypesReducer.js","reducers/exerciseTypesReducer.js","reducers/exerciseCategoriesReducer.js","reducers/trainingPlanTemplatesReducer.js","reducers/userReducer.js"],"names":["ActivityTypeButtonSet","renderActivityTypeButton","activityType","buttonClass","category_key","formInitData","activity_type","recurrence","planned_date","dateFns","format","_this","props","calendarDay","repeatOption","distance_uom_preference","user","react_default","a","createElement","key","className","onClick","onAdd","activityTypes","this","activityTypeButtons","map","Fragment","length","Component","connect","state","ExerciseTypeButtonSet","renderExerciseTypeButton","exerciseType","id","exercise_name","measured_by","default_reps","default_seconds","_this2","exerciseTypeButtons","exerciseTypes","filterPlannedActivities","plannedActivities","day","jsonDate","filter","plannedActivity","filterPlannedExercises","plannedExercises","plannedExerciseCategory","filterCompletedActivities","completedActivities","completedActivity","activity_date","CompletedActivitiesList","renderCompletedActivitySummary","cardClass","cardHeaderClass","activityUrl","href","name","is_race","distance_formatted","moving_time","average_pace_formatted","average_cadence","median_cadence","average_heartrate","total_elevation_gain_formatted","average_climbing_gradient_formatted","description","strava_url","completedActivitySummaries","PlannedActivitiesList","renderPlannedActivityRow","badgeClass","planned_distance","role","onEdit","Dropdown","as","Toggle","cole","bsPrefix","Menu","alignRight","Item","onRemove","plannedActivityRows","PlannedExercisesList","renderPlannedExerciseRow","plannedExercise","category_name","planned_sets","planned_reps","planned_seconds","substring","plannedExerciseCategories","plannedExerciseRows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","exercises","err","return","PlannedActivityForm","initData","initialize","_this$props","handleSubmit","handleBackClick","onSubmit","htmlFor","Field","component","type","placeholder","reduxForm","form","PlannedExerciseForm","renderCategorySelectOption","categoryOption","categorySelectOptions","isNewExerciseType","categoryOptions","renderField","label","measuredByValue","_ref","input","_ref$meta","meta","touched","error","warning","Object","assign","validate","values","errors","Number","selector","formValueSelector","LOAD_PLANNED_ACTIVITIES_SUCCESS","DELETE_PLANNED_ACTIVITY_SUCCESS","UPDATE_PLANNED_ACTIVITY_SUCCESS","ADD_PLANNED_ACTIVITY_SUCCESS","LOAD_PLANNED_EXERCISES_SUCCESS","DELETE_PLANNED_EXERCISE_SUCCESS","UPDATE_PLANNED_EXERCISE_SUCCESS","ADD_PLANNED_EXERCISE_SUCCESS","LOAD_COMPLETED_ACTIVITIES_SUCCESS","LOAD_ACTIVITY_TYPES_SUCCESS","LOAD_EXERCISE_TYPES_SUCCESS","LOAD_EXERCISE_CATEGORIES_SUCCESS","LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS","COPY_TRAINING_PLAN_TEMPLATE_SUCCESS","LOAD_USER_INFO_SUCCESS","PlannedActivitiesApi","classCallCheck","getPlannedActivities","startDate","endDate","options","method","headers","Authorization","authHeader","endpoint","endpointOrigin","dateFormat","fetch","then","response","ok","json","catch","postPlannedActivities","requestBody","Content-Type","body","mode","accessToken","ls","get","window","location","origin","PlannedActivityApi","patchPlannedActivity","deletePlannedActivity","scope","Error","statusText","PlannedExerciseApi","patchPlannedExercise","deletePlannedExercise","PlannedExercisesApi","postPlannedExercises","loadPlannedExercisesSuccess","responseData","types","planned_exercises","addPlannedExercise","dispatch","addPlannedExerciseSuccess","addedId","updatePlannedExercise","result","updatePlannedExerciseSuccess","updatedId","deletePlannedExerciseSuccess","deletedId","loadPlannedActivities","loadPlannedActivitiesSuccess","planned_activities","addPlannedActivity","addPlannedActivitySuccess","updatePlannedActivity","updatePlannedActivitySuccess","deletePlannedActivitySuccess","ActivityTypesApi","getActivityTypes","loadActivityTypes","loadActivityTypesSuccess","exercise_types","loadExerciseTypesSuccess","exerciseCategories","exercise_categories","loadExerciseCategoriesSuccess","activity_types","CalendarDayModal","possibleConstructorReturn","getPrototypeOf","call","togglePlannedActivityForm","setState","showCalendarDayMain","showPlannedActivityForm","showPlannedExerciseForm","togglePlannedExerciseForm","handleAddPlannedActivity","plannedActivityFormInitData","handleEditPlannedActivity","handleSavePlannedActivity","JSON","stringify","plannedActivityActions","refresh","handleRemovePlannedActivity","plannedActivityId","handleAddPlannedExercise","existingPlannedExerciseId","categories","category","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","exercise","exercise_type_id","plannedExerciseActions","plannedExerciseFormInitData","handleEditPlannedExercise","handleSavePlannedExercise","exercise_category_id","activityTypeActions","handleRemovePlannedExercise","plannedExerciseId","isFutureDate","startOfDay","Date","close","components_CompletedActivitiesList","components_PlannedActivitiesList","components_PlannedExercisesList","components_ActivityTypeButtonSet","components_ExerciseTypeButtonSet","components_PlannedActivityForm","components_PlannedExerciseForm","bindActionCreators","TrainingPlanTemplatesApi","getTrainingPlanTemplates","loadTrainingPlanTemplates","loadTrainingPlanTemplatesSuccess","trainingPlanTemplates","training_plan_templates","copyTrainingPlanTemplate","templateId","template_id","copyTrainingPlanTemplateSuccess","message","TrainingPlanTemplatesContainer","handleAddToTrainingPlan","trainingPlanTemplateActions","renderTemplateDetails","template","link_url","target","rel","link_text","templateDetailsList","CompletedActivitiesApi","getCompletedActivities","console","log","loadCompletedActivities","loadCompletedActivitiesSuccess","completed_activities","Calendar","refreshPlannedActivities","currentMonth","startOfWeek","startOfMonth","weekStartsOn","endOfWeek","endOfMonth","refreshCompletedActivities","completedActivityActions","refreshAllActivities","renderHeader","prevMonth","nextMonth","renderDayNames","days","i","addDays","renderPlannedActivityBadge","renderPlannedExerciseCategoryBadge","renderCompletedActivityBadge","renderCells","_this$state","selectedDate","today","monthStart","monthEnd","rows","formattedDate","_loop","cloneDay","plannedActivityBadges","plannedExerciseCategoryBadges","completedActivityBadges","concat","isSameMonth","isSameDay","isBefore","onDateClick","parse","showCalendarDayModal","selectedDatePlannedActivities","document","classList","toggle","handleCloseCalendarDayModal","newMonth","addMonths","subMonths","src_components_CalendarDayModal","components_TrainingPlanTemplatesContainer","UserApi","getUserInfo","loadUserInfo","loadUserInfoSuccess","userInfo","user_info","App","userActions","components_Calendar","rootReducer","combineReducers","formReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","components_App","getElementById"],"mappings":"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","file":"static/js/main.a7e88ee6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nclass ActivityTypeButtonSet extends Component {\r\n\r\n    renderActivityTypeButton = (activityType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + activityType.category_key;\r\n        const formInitData = {\r\n            activity_type: activityType.activity_type,\r\n            category_key: activityType.category_key,\r\n            recurrence: \"once\",\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <button key={activityType.activity_type} className={buttonClass} onClick={() => this.props.onAdd(formInitData)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {activityType.activity_type}\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let activityTypes = this.props.activityTypes;\r\n        let activityTypeButtons = activityTypes.map(this.renderActivityTypeButton);\r\n        return(\r\n            <>\r\n            {activityTypes.length > 0 &&\r\n            <h3>Add Activities</h3>}\r\n            {activityTypeButtons}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        activityTypes: state.activityTypes,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nActivityTypeButtonSet = connect(mapStateToProps)(ActivityTypeButtonSet);\r\n\r\nexport default ActivityTypeButtonSet;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ExerciseTypeButtonSet extends Component {\r\n\r\n    renderExerciseTypeButton = (exerciseType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + (exerciseType.category_key ? exerciseType.category_key : \"uncategorised\");\r\n\r\n        return (\r\n            <button key={exerciseType.id} className={buttonClass} onClick={() => this.props.onAdd(exerciseType.id)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {exerciseType.exercise_name}\r\n                <br />\r\n                <small>\r\n                    [{exerciseType.measured_by === \"reps\" && (exerciseType.default_reps + \" reps\")}{exerciseType.measured_by === \"seconds\" && (exerciseType.default_seconds + \" seconds\")}]\r\n                </small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let exerciseTypes = this.props.exerciseTypes;\r\n        let exerciseTypeButtons = exerciseTypes.map(this.renderExerciseTypeButton);\r\n        return(\r\n            <>\r\n            <h3>Add Exercises</h3>\r\n            <button key=\"new\" className=\"btn btn-sm ml-1 mr-1 btn-secondary new-exercise-type\" onClick={() => this.props.onAdd(null)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> New Exercise Type\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n            {exerciseTypeButtons}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        exerciseTypes: state.exerciseTypes\r\n    };\r\n}\r\n\r\nExerciseTypeButtonSet = connect(mapStateToProps)(ExerciseTypeButtonSet);\r\n\r\nexport default ExerciseTypeButtonSet;","import dateFns from \"date-fns\";\r\n\r\nexport function filterPlannedActivities(plannedActivities, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.planned_date === jsonDate);\r\n    return plannedActivitiesFiltered;\r\n}\r\n\r\nexport function filterPlannedActivitiesById(plannedActivities, id) {\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.id === id);\r\n    return plannedActivitiesFiltered[0];\r\n}\r\n\r\nexport function filterPlannedExercises(plannedExercises, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedExercisesFiltered = plannedExercises.filter(plannedExerciseCategory => plannedExerciseCategory.planned_date === jsonDate);\r\n    return plannedExercisesFiltered;\r\n}\r\n\r\nexport function filterCompletedActivities(completedActivities, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const completedActivitiesFiltered = completedActivities.filter(completedActivity => completedActivity.activity_date === jsonDate);\r\n    return completedActivitiesFiltered;\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { filterCompletedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass CompletedActivitiesList extends Component {\r\n\r\n    renderCompletedActivitySummary = (completedActivity) => {\r\n        const cardClass = \"card \" + completedActivity.category_key + \"_border_only mt-2\";\r\n        const cardHeaderClass = \"card-header \" + completedActivity.category_key;\r\n        const activityUrl = \"/activity_analysis/\" + completedActivity.id;\r\n\r\n        return (\r\n            <div className=\"activity-summary\" key={completedActivity.id}>\r\n                <div className={cardClass}>\r\n                    <div className={cardHeaderClass}>\r\n                        <h6 className=\"m-0 p-0\">\r\n                            <a href={activityUrl}>\r\n                                {completedActivity.name}\r\n                                {completedActivity.is_race && <i className=\"fa fa-flag-checkered\"></i>}\r\n                            </a>\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>When:</small></td>\r\n                                            <td>{completedActivity.activity_date}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Distance:</small></td>\r\n                                            <td>{completedActivity.distance_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Moving Time:</small></td>\r\n                                            <td>{completedActivity.moving_time}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Pace:</small></td>\r\n                                            <td>{completedActivity.average_pace_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Cadence:</small></td>\r\n                                            <td>{completedActivity.average_cadence}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Median Cadence:</small></td>\r\n                                            <td>{completedActivity.median_cadence}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Heart Rate:</small></td>\r\n                                            <td>{completedActivity.average_heartrate}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Elevation Gain:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.total_elevation_gain_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Climbing Gradient:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.average_climbing_gradient_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-3\">\r\n                            <div className=\"col-12\">\r\n                                {completedActivity.description &&\r\n                                <p><small>Description:</small> {completedActivity.description}</p>}\r\n                                <p className=\"mb-1\">\r\n                                    <a href={activityUrl}>Analyse Activity</a> |&nbsp;\r\n                                    <a href={completedActivity.strava_url}>View on Strava</a>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const completedActivities = filterCompletedActivities(this.props.completedActivities, this.props.calendarDay);\r\n        let completedActivitySummaries = completedActivities.map(this.renderCompletedActivitySummary);\r\n\r\n        return (\r\n                <div>\r\n                    {completedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Completed Activities</h3>\r\n                        {completedActivitySummaries}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        completedActivities: state.completedActivities\r\n    };\r\n}\r\n\r\nCompletedActivitiesList = connect(mapStateToProps)(CompletedActivitiesList)\r\n\r\nexport default CompletedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass PlannedActivitiesList extends Component {\r\n\r\n    renderPlannedActivityRow = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n        const formInitData = {\r\n            id: plannedActivity.id,\r\n            activity_type: plannedActivity.activity_type,\r\n            category_key: plannedActivity.category_key,\r\n            description: plannedActivity.description,\r\n            planned_distance: plannedActivity.planned_distance,\r\n            recurrence: plannedActivity.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <tr key={plannedActivity.id}>\r\n                <td className=\"name-badge\"><h5><span className={badgeClass}>{plannedActivity.activity_type}</span></h5></td>\r\n                <td>{plannedActivity.planned_distance ? plannedActivity.planned_distance + \" \" + this.props.user.distance_uom_preference : \"\"}</td>\r\n                <td>{plannedActivity.description}</td>\r\n                <td>\r\n                    {plannedActivity.recurrence === \"once\" && \"Once only\"}\r\n                    {plannedActivity.recurrence === \"weekly\" && <>Repeats every {dateFns.format(this.props.calendarDay, \"dddd\")}</>}\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedActivity.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedActivity.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this day</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const plannedActivities = filterPlannedActivities(this.props.plannedActivities, this.props.calendarDay);\r\n        let plannedActivityRows = plannedActivities.map(this.renderPlannedActivityRow);\r\n\r\n        return (\r\n                <div>\r\n                    {plannedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Activities</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedActivityRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedActivities: state.plannedActivities,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nPlannedActivitiesList = connect(mapStateToProps)(PlannedActivitiesList)\r\n\r\nexport default PlannedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedExercises } from \"../helpers/trainingPlan\";\r\n// import * as plannedExerciseActions from \"../actions/plannedActivityActions\";\r\n\r\nclass PlannedExercisesList extends Component {\r\n\r\n    renderPlannedExerciseRow = (plannedExercise) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExercise.category_key;\r\n        const formInitData = {\r\n            id: plannedExercise.id,\r\n            exercise_name: plannedExercise.exercise_name,\r\n            category_name: plannedExercise.category_name,\r\n            category_key: plannedExercise.category_key,\r\n            planned_sets: plannedExercise.planned_sets,\r\n            measured_by: plannedExercise.measured_by,\r\n            planned_reps: plannedExercise.planned_reps,\r\n            planned_seconds: plannedExercise.planned_seconds,\r\n            recurrence: plannedExercise.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\")\r\n        }\r\n\r\n        return (\r\n            <tr key={plannedExercise.id}>\r\n                <td className=\"name-badge\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name}\r\n                    </span></h5>\r\n                </div>\r\n                <div className=\"d-inline d-sm-none\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name.length <= 20 ? plannedExercise.exercise_name : plannedExercise.exercise_name.substring(0,17) + \"...\" }\r\n                    </span></h5>\r\n                </div>\r\n                </td>\r\n                <td>{plannedExercise.planned_sets ? plannedExercise.planned_sets + \" sets\" : \"\"}</td>\r\n                {plannedExercise.measured_by === \"reps\" && (\r\n                    <td>{plannedExercise.planned_reps ? plannedExercise.planned_reps + \" reps\" : \"\"}</td>\r\n                )}\r\n                {plannedExercise.measured_by === \"seconds\" && (\r\n                    <td>{plannedExercise.planned_seconds ? plannedExercise.planned_seconds + \" secs\" : \"\"}</td>\r\n                )}\r\n                <td>\r\n                    <div className=\"d-none d-sm-inline\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once only\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && <>Repeats every {dateFns.format(this.props.calendarDay, \"dddd\")}</>}\r\n                    </div>\r\n                    <div className=\"d-inline d-sm-none\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && <>{dateFns.format(this.props.calendarDay, \"ddd\")}</>}\r\n                    </div>\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedExercise.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedExercise.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this day</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n   \r\n    render() {\r\n        const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, this.props.calendarDay);\r\n        let plannedExerciseRows = [];\r\n        for (let plannedExerciseCategory of plannedExerciseCategories) {\r\n            plannedExerciseRows.push(plannedExerciseCategory.exercises.map(this.renderPlannedExerciseRow));\r\n        }\r\n        return (\r\n                <div>\r\n                    {plannedExerciseCategories.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Exercises</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedExerciseRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises\r\n    };\r\n}\r\n\r\nPlannedExercisesList = connect(mapStateToProps)(PlannedExercisesList)\r\n\r\nexport default PlannedExercisesList;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nclass PlannedActivityForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\"><small>Activity Type:</small> <span className={badgeClass}>{initData.activity_type}</span></h4>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"once\">Once only</option>\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"description\">Description</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"description\" name=\"description\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"planned_distance\">Planned Distance ({initData.distance_uom_preference})</label>\r\n                    <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_distance\" name=\"planned_distance\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Activity</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nPlannedActivityForm = reduxForm({\r\n    form: \"plannedActivity\"\r\n})(PlannedActivityForm);\r\n\r\nexport default PlannedActivityForm;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field, formValueSelector } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass PlannedExerciseForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    renderCategorySelectOption = (categoryOption) => {\r\n        return (\r\n            <option key={categoryOption.id} value={categoryOption.id}>{categoryOption.category_name}</option>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n        let categorySelectOptions;\r\n\r\n        if (initData.isNewExerciseType) {\r\n            categorySelectOptions = initData.categoryOptions.map(this.renderCategorySelectOption);\r\n        }\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\">{initData.exercise_name} <span className={badgeClass}>{initData.category_name}</span></h4>\r\n                {initData.isNewExerciseType && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <Field component={renderField} type=\"text\" id=\"exercise_name\" name=\"exercise_name\" label=\"Exercise Name\" />\r\n                    </div>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"measured_by\">Measured By</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"measured_by\" name=\"measured_by\">\r\n                            <option value=\"reps\">Reps</option>\r\n                            <option value=\"seconds\">Time (seconds)</option>\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"reps\") || this.props.measuredByValue === \"reps\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_reps\">Reps (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_reps\" name=\"planned_reps\" />\r\n                    </div>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"seconds\") || this.props.measuredByValue === \"seconds\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_seconds\">Seconds (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_seconds\" name=\"planned_seconds\" />\r\n                    </div>\r\n                )}\r\n                <div className=\"form-group \">\r\n                    <Field component={renderField} type=\"number\" id=\"planned_sets\" name=\"planned_sets\" label=\"Planned Sets\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                        <option value=\"once\">Once only</option>\r\n                    </Field>\r\n                </div>\r\n                {initData.isNewExerciseType && initData.categoryOptions && initData.categoryOptions.length > 0 && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"exercise_category_id\">Category</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"exercise_category_id\" name=\"exercise_category_id\">\r\n                            {categorySelectOptions}\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Exercise</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nconst validate = (values) => {\r\n    let errors = {};\r\n    if (Number(values.planned_sets) <= 0) {\r\n        errors.planned_sets = \"Planned Sets must be at least 1.\"\r\n    } \r\n    return errors;\r\n}\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => {\r\n    return (\r\n        <div>\r\n            <label className=\"form-control-label\">{label}</label>\r\n            <div>\r\n            <input className=\"form-control\" {...input} type={type}/>\r\n            {touched && ((error && <div className=\"error mt-1\">{error}</div>) || (warning && <span>{warning}</span>))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nPlannedExerciseForm = reduxForm({\r\n    form: \"plannedExercise\",\r\n    validate\r\n})(PlannedExerciseForm);\r\n\r\n// we want access to other form values\r\nconst selector = formValueSelector(\"plannedExercise\");\r\nPlannedExerciseForm = connect(\r\n    (state) => {\r\n        const measuredByValue = selector(state, 'measured_by')\r\n        return { measuredByValue };\r\n    }\r\n)(PlannedExerciseForm)\r\n\r\nexport default PlannedExerciseForm;","export const LOAD_PLANNED_ACTIVITIES_SUCCESS = \"LOAD_PLANNED_ACTIVITIES_SUCCESS\";\r\nexport const DELETE_PLANNED_ACTIVITY_SUCCESS = \"DELETE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const UPDATE_PLANNED_ACTIVITY_SUCCESS = \"UPDATE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const ADD_PLANNED_ACTIVITY_SUCCESS = \"ADD_PLANNED_ACTIVITY_SUCCESS\";\r\n\r\nexport const LOAD_PLANNED_EXERCISES_SUCCESS = \"LOAD_PLANNED_EXERCISES_SUCCESS\";\r\nexport const DELETE_PLANNED_EXERCISE_SUCCESS = \"DELETE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const UPDATE_PLANNED_EXERCISE_SUCCESS = \"UPDATE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const ADD_PLANNED_EXERCISE_SUCCESS = \"ADD_PLANNED_EXERCISE_SUCCESS\";\r\n\r\nexport const LOAD_COMPLETED_ACTIVITIES_SUCCESS = \"LOAD_COMPLETED_ACTIVITIES_SUCCESS\";\r\n\r\nexport const LOAD_ACTIVITY_TYPES_SUCCESS = \"LOAD_ACTIVITY_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_TYPES_SUCCESS = \"LOAD_EXERCISE_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_CATEGORIES_SUCCESS = \"LOAD_EXERCISE_CATEGORIES_SUCCESS\";\r\n\r\nexport const LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS = \"LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS\";\r\nexport const COPY_TRAINING_PLAN_TEMPLATE_SUCCESS = \"COPY_TRAINING_PLAN_TEMPLATE_SUCCESS\";\r\n\r\nexport const LOAD_USER_INFO_SUCCESS = \"LOAD_USER_INFO_SUCCESS\"","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass PlannedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getPlannedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n    \r\n    postPlannedActivities = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivitiesApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedActivityApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedActivity = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedActivity = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id + \"?scope=\" + scope;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivityApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedExerciseApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedExercise = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedExercise = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id + \"?scope=\" + scope;\r\n        \r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExerciseApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedExercisesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    postPlannedExercises = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercises\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExercisesApi","import * as types from \"./actionTypes\";\r\nimport PlannedExerciseApi from \"../api/PlannedExerciseApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadPlannedExercisesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_EXERCISES_SUCCESS,\r\n        plannedExercises: responseData.planned_exercises\r\n    };\r\n}\r\n\r\nexport function addPlannedExercise(requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(addPlannedExerciseSuccess(responseData));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedExerciseSuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_EXERCISE_SUCCESS,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedExercise(id, requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedExerciseApi();\r\n        return api.patchPlannedExercise(id, requestBody).then(result => {\r\n            dispatch(updatePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedExerciseSuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_EXERCISE_SUCCESS,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedExercise(id, scope) {\r\n    return function(dispatch) {\r\n        const api = new PlannedExerciseApi();\r\n        return api.deletePlannedExercise(id, scope).then(result => {\r\n            dispatch(deletePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedExerciseSuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_EXERCISE_SUCCESS,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\nimport PlannedActivitiesApi from \"../api/PlannedActivitiesApi\";\r\nimport PlannedActivityApi from \"../api/PlannedActivityApi\";\r\nimport { loadPlannedExercisesSuccess } from \"./plannedExerciseActions\";\r\n\r\nexport function loadPlannedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivitiesApi();\r\n        return api.getPlannedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadPlannedActivitiesSuccess(responseData));\r\n                dispatch(loadPlannedExercisesSuccess(responseData))\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadPlannedActivitiesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_ACTIVITIES_SUCCESS,\r\n        plannedActivities: responseData.planned_activities\r\n    };\r\n}\r\n\r\nexport function addPlannedActivity(requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivitiesApi();\r\n        return api.postPlannedActivities(requestBody).then(responseData => {\r\n            dispatch(addPlannedActivitySuccess(responseData));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedActivitySuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_ACTIVITY_SUCCESS,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedActivity(id, requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivityApi();\r\n        return api.patchPlannedActivity(id, requestBody).then(result => {\r\n            dispatch(updatePlannedActivitySuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedActivitySuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_ACTIVITY_SUCCESS,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedActivity(id, scope) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivityApi();\r\n        return api.deletePlannedActivity(id, scope).then(result => {\r\n            dispatch(deletePlannedActivitySuccess(id, scope));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedActivitySuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_ACTIVITY_SUCCESS,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import ls from \"local-storage\";\r\n                \r\nclass ActivityTypesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getActivityTypes = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/activity_types\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default ActivityTypesApi;","import * as types from \"./actionTypes\";\r\nimport ActivityTypesApi from \"../api/ActivityTypesApi\";\r\nimport { loadExerciseTypesSuccess } from \"./exerciseTypeActions\"\r\nimport { loadExerciseCategoriesSuccess } from \"./exerciseCategoryActions\"\r\n\r\nexport function loadActivityTypes() {\r\n    return function(dispatch) {\r\n        const api = new ActivityTypesApi();\r\n        return api.getActivityTypes().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadActivityTypesSuccess(responseData));\r\n                dispatch(loadExerciseTypesSuccess(responseData));\r\n                dispatch(loadExerciseCategoriesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadActivityTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_ACTIVITY_TYPES_SUCCESS,\r\n        activityTypes: responseData.activity_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_TYPES_SUCCESS,\r\n        exerciseTypes: responseData.exercise_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseCategoriesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_CATEGORIES_SUCCESS,\r\n        exerciseCategories: responseData.exercise_categories\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport dateFns from \"date-fns\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport \"./CalendarDayModal.css\";\r\nimport ActivityTypeButtonSet from \"./ActivityTypeButtonSet\";\r\nimport ExerciseTypeButtonSet from \"./ExerciseTypeButtonSet\";\r\nimport CompletedActivitiesList from \"./CompletedActivitiesList\";\r\nimport PlannedActivitiesList from \"./PlannedActivitiesList\";\r\nimport PlannedExercisesList from \"./PlannedExercisesList\";\r\nimport PlannedActivityForm from \"./PlannedActivityForm\";\r\nimport PlannedExerciseForm from \"./PlannedExerciseForm\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as plannedExerciseActions from \"../actions/plannedExerciseActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass CalendarDayModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCalendarDayMain: true,\r\n            showPlannedActivityForm: false,\r\n            showPlannedExerciseForm: false,\r\n            isFutureDate: (props.calendarDay >= dateFns.startOfDay(new Date())),\r\n            plannedActivities: props.plannedActivities\r\n        }\r\n    }\r\n\r\n    togglePlannedActivityForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedActivityForm: !this.state.showPlannedActivityForm,\r\n            showPlannedExerciseForm: false\r\n        })\r\n    }\r\n\r\n    togglePlannedExerciseForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedExerciseForm: !this.state.showPlannedExerciseForm,\r\n            showPlannedActivityForm: false\r\n        })\r\n    }\r\n\r\n    // Planned Activity CRUD operations\r\n    handleAddPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleEditPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleSavePlannedActivity = (values) => {\r\n        const requestBody = JSON.stringify({ \r\n            activity_type: values.activity_type,\r\n            planned_date: values.planned_date,\r\n            recurrence: values.recurrence,\r\n            description: values.description,\r\n            planned_distance: values.planned_distance\r\n        })\r\n        if (values.id) {\r\n            this.props.plannedActivityActions.updatePlannedActivity(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            this.props.plannedActivityActions.addPlannedActivity(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        }\r\n        this.togglePlannedActivityForm();\r\n    }\r\n    \r\n    handleRemovePlannedActivity = (plannedActivityId, scope) => {\r\n        this.props.plannedActivityActions.deletePlannedActivity(plannedActivityId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    // CRUD operations for planned exercises\r\n    handleAddPlannedExercise = (id) => {\r\n        const calendarDay = dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\");\r\n        if (!id) {\r\n            const formInitData = {\r\n                isNewExerciseType: true,\r\n                measured_by: \"reps\",\r\n                planned_sets: 1,\r\n                recurrence: \"weekly\",\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n                repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\"),\r\n                categoryOptions: this.props.exerciseCategories\r\n            }\r\n            this.setState({\r\n                plannedExerciseFormInitData: formInitData\r\n            });\r\n            this.togglePlannedExerciseForm();\r\n        } else {\r\n            const categories = this.props.plannedExercises.filter(function(plannedExercise) {\r\n                return plannedExercise.planned_date === calendarDay;\r\n            });\r\n\r\n            let requestBody;\r\n            let existingPlannedExerciseId;\r\n            for (let category of categories) {\r\n                for (let exercise of category.exercises) {\r\n                    if (exercise.exercise_type_id === id) {\r\n                        existingPlannedExerciseId = exercise.id;\r\n                        requestBody = JSON.stringify({ \r\n                            recurrence: exercise.recurrence,\r\n                            planned_date: calendarDay,\r\n                            planned_sets: (exercise.planned_sets + 1),\r\n                            planned_reps: exercise.planned_reps,\r\n                            planned_seconds: exercise.planned_seconds\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (existingPlannedExerciseId) {\r\n                this.props.plannedExerciseActions.updatePlannedExercise(existingPlannedExerciseId, requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });\r\n            } else {\r\n                const exerciseType = this.props.exerciseTypes.filter(function(exerciseType) {\r\n                    return exerciseType.id === id;\r\n                })[0];\r\n                requestBody = JSON.stringify({\r\n                    exercise_type_id: id,\r\n                    recurrence: \"weekly\",\r\n                    planned_date: calendarDay,\r\n                    planned_reps: exerciseType.default_reps,\r\n                    planned_seconds: exerciseType.default_seconds\r\n                });\r\n                this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });                \r\n            }\r\n        }\r\n    }\r\n\r\n    handleEditPlannedExercise = (formInitData) => {\r\n        this.setState({\r\n            plannedExerciseFormInitData: formInitData\r\n        });\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleSavePlannedExercise = (values) => {\r\n        if (values.id) {\r\n            const requestBody = JSON.stringify({ \r\n                planned_date: values.planned_date,\r\n                recurrence: values.recurrence,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds\r\n            });\r\n            this.props.plannedExerciseActions.updatePlannedExercise(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            const requestBody = JSON.stringify({\r\n                exercise_name: values.exercise_name,\r\n                measured_by: values.measured_by,\r\n                exercise_category_id: values.exercise_category_id,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds,\r\n                recurrence: values.recurrence,\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\")\r\n            });\r\n            this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n                // we need to refresh buttons too\r\n                this.props.activityTypeActions.loadActivityTypes();\r\n            });\r\n        }\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleRemovePlannedExercise = (plannedExerciseId, scope) => {\r\n        this.props.plannedExerciseActions.deletePlannedExercise(plannedExerciseId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const dateFormatFull = \"dddd DD MMMM YYYY\";\r\n        const dateFormatAbbrev = \"ddd DD MMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"modal-back-drop\">\r\n                <div className=\"modal-wrapper\">\r\n                    <div className=\"calendar-modal-header\">\r\n                        <div className=\"d-none d-sm-inline\">\r\n                            <h4>{dateFns.format(this.props.calendarDay, dateFormatFull)}</h4>\r\n                        </div>\r\n                        <div className=\"d-inline d-sm-none\">\r\n                            <h4>{dateFns.format(this.props.calendarDay, dateFormatAbbrev)}</h4>\r\n                        </div>\r\n                        <span className=\"close-modal-btn\" onClick={this.props.close}><i className=\"fa fa-window-close\"></i></span>\r\n                    </div>\r\n                    <div className=\"calendar-modal-body\">\r\n                        <div>\r\n                            {this.state.showCalendarDayMain &&\r\n                            <>\r\n                                <CompletedActivitiesList calendarDay={this.props.calendarDay} />\r\n                                <PlannedActivitiesList calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedActivity} onRemove={this.handleRemovePlannedActivity} />\r\n                                <PlannedExercisesList calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedExercise} onRemove={this.handleRemovePlannedExercise} />\r\n                                {this.state.isFutureDate &&\r\n                                <>\r\n                                    <ActivityTypeButtonSet calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedActivity} />\r\n                                    <ExerciseTypeButtonSet calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedExercise} />\r\n                                </>}\r\n                            </>}\r\n                            {this.state.showPlannedActivityForm &&\r\n                            <PlannedActivityForm initData={this.state.plannedActivityFormInitData} onSubmit={this.handleSavePlannedActivity} handleBackClick={this.togglePlannedActivityForm} />}\r\n                            {this.state.showPlannedExerciseForm &&\r\n                            <PlannedExerciseForm initData={this.state.plannedExerciseFormInitData} onSubmit={this.handleSavePlannedExercise} handleBackClick={this.togglePlannedExerciseForm} />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises,\r\n        exerciseTypes: state.exerciseTypes,\r\n        exerciseCategories: state.exerciseCategories\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        plannedExerciseActions: bindActionCreators(plannedExerciseActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarDayModal);","class TrainingPlanTemplatesApi {\r\n    constructor() {\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getTrainingPlanTemplates = () => {\r\n        const options = {\r\n            method: \"GET\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/training_plan_templates\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrainingPlanTemplatesApi;","import * as types from \"./actionTypes\";\r\nimport TrainingPlanTemplatesApi from \"../api/TrainingPlanTemplatesApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadTrainingPlanTemplates() {\r\n    return function(dispatch) {\r\n        const api = new TrainingPlanTemplatesApi();\r\n        return api.getTrainingPlanTemplates().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadTrainingPlanTemplatesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadTrainingPlanTemplatesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS,\r\n        trainingPlanTemplates: responseData.training_plan_templates\r\n    };\r\n}\r\n\r\nexport function copyTrainingPlanTemplate(templateId) {\r\n    const requestBody = JSON.stringify({\r\n        template_id: templateId\r\n    });\r\n    return function(dispatch) {\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(copyTrainingPlanTemplateSuccess(responseData));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function copyTrainingPlanTemplateSuccess(responseData) {\r\n    return {\r\n        type: types.COPY_TRAINING_PLAN_TEMPLATE_SUCCESS,\r\n        message: responseData.message\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport * as trainingPlanTemplateActions from \"../actions/trainingPlanTemplateActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass TrainingPlanTemplatesContainer extends Component {  \r\n\r\n    componentDidMount() {\r\n        this.props.trainingPlanTemplateActions.loadTrainingPlanTemplates();\r\n    }\r\n\r\n    handleAddToTrainingPlan = (templateId) => {\r\n        this.props.trainingPlanTemplateActions.copyTrainingPlanTemplate(templateId).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n            this.props.activityTypeActions.loadActivityTypes();\r\n        });\r\n    }\r\n\r\n    renderTemplateDetails = (template) => {\r\n        return (\r\n            <div key={template.id}>\r\n                <hr />\r\n                <div className=\"alert alert-info\">\r\n                    <h6>{template.name} [<a href=\"#add\" onClick={() => this.handleAddToTrainingPlan(template.id)}>Add to Training Plan</a>]</h6>\r\n                    <p>{template.description} <a href={template.link_url} target=\"_blank\" rel=\"noopener noreferrer\">{template.link_text}</a></p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let templates = this.props.trainingPlanTemplates;\r\n        let templateDetailsList = templates.map(this.renderTemplateDetails);\r\n\r\n        return (\r\n            <div className=\"card mt-4\">\r\n                <div className=\"card-header\">\r\n                    <h4>Get started using a template</h4>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <p>If you're looking for somewhere to start with creating your personalised training plan,\r\n                        try one of these templates to populate some initial exercises, and then adapt as required.\r\n                        Let us know via <a href=\"mailto:feedback@trainingticks.com\">feedback@trainingticks.com</a> if there's\r\n                        a training plan you've come across that you'd like to be available as a template.</p>\r\n                    <p><i>Please note that Training Ticks has no association with any of the websites or authors referenced below.\r\n                    We are sharing them as useful resources that will hopefully help your training.</i></p>\r\n                    {templateDetailsList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        trainingPlanTemplates: state.trainingPlanTemplates\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        trainingPlanTemplateActions: bindActionCreators(trainingPlanTemplateActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nTrainingPlanTemplatesContainer = connect(mapStateToProps, mapDispatchToProps)(TrainingPlanTemplatesContainer);\r\n\r\nexport default TrainingPlanTemplatesContainer;","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass CompletedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getCompletedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/completed_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            console.log(error);\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default CompletedActivitiesApi;","import * as types from \"./actionTypes\";\r\nimport CompletedActivitiesApi from \"../api/CompletedActivitiesApi\";\r\n// TODO: import { loadCompletedExercisesSuccess } from \"./completedExerciseActions\";\r\n\r\nexport function loadCompletedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        const api = new CompletedActivitiesApi();\r\n        return api.getCompletedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadCompletedActivitiesSuccess(responseData));\r\n                // TODO: dispatch(loadCompletedExercisesSuccess(responseData))\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadCompletedActivitiesSuccess(responseData) {\r\n    console.log(responseData.completed_activities);\r\n    return {\r\n        type: types.LOAD_COMPLETED_ACTIVITIES_SUCCESS,\r\n        completedActivities: responseData.completed_activities\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport CalendarDayModal from \"./CalendarDayModal\";\r\nimport TrainingPlanTemplatesContainer from \"./TrainingPlanTemplatesContainer\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as completedActivityActions from \"../actions/completedActivityActions\";\r\nimport { filterPlannedActivities, filterPlannedExercises, filterCompletedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass Calendar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentMonth: new Date(),\r\n            today: new Date(),\r\n            selectedDate: new Date(),\r\n            showCalendarDayModal: false\r\n        };\r\n    }\r\n\r\n    refreshPlannedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.plannedActivityActions.loadPlannedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshCompletedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.completedActivityActions.loadCompletedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshAllActivities = (currentMonth) => {\r\n        this.refreshPlannedActivities(currentMonth);\r\n        this.refreshCompletedActivities(currentMonth);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshAllActivities(this.state.currentMonth);\r\n    }\r\n\r\n    renderHeader = () => {\r\n        const dateFormat = \"MMMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"header row flex-middle\">\r\n                <div className=\"col col-start\">\r\n                    <div className=\"icon\" onClick={this.prevMonth}>\r\n                        chevron_left\r\n                    </div>\r\n                </div>\r\n                <div className=\"col col-center\">\r\n                    <span>\r\n                        {dateFns.format(this.state.currentMonth, dateFormat)}\r\n                    </span>\r\n                </div>\r\n                <div className=\"col col-end\" onClick={this.nextMonth}>\r\n                    <div className=\"icon\">chevron_right</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDayNames = () => {\r\n        const dateFormatFull = \"dddd\";\r\n        const dateFormatAbbrev = \"ddd\";\r\n        const days = [];\r\n\r\n        let startDate = dateFns.startOfWeek(this.state.currentMonth, {weekStartsOn: 1});\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <div className=\"col col-center\" key={i}>\r\n                    <div className=\"d-none d-md-block\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatFull)}\r\n                    </div>\r\n                    <div className=\"d-block d-md-none\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatAbbrev)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"days row\">\r\n                {days}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedActivityBadge = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n\r\n        return (\r\n            <div key={plannedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedActivity.activity_type}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none \">\r\n                    <span className={badgeClass}>{plannedActivity.activity_type[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedExerciseCategoryBadge = (plannedExerciseCategory) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExerciseCategory.category_key;\r\n\r\n        return (\r\n            <div key={plannedExerciseCategory.category_key + plannedExerciseCategory.planned_date} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedActivityBadge = (completedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedActivity.category_key;\r\n\r\n        return (\r\n            <div key={completedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}><div className=\"d-none d-md-inline\"><i className=\"fa fa-check\"></i></div> {completedActivity.name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCells = () => {\r\n        const { currentMonth, selectedDate, today } = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart, {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(monthEnd, {weekStartsOn: 1});\r\n        const dateFormat = \"D\";\r\n        \r\n        let rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n\r\n        while (day <= endDate) {\r\n            for (let i = 0; i < 7; i++) {\r\n\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cloneDay = day;\r\n\r\n                const plannedActivities = filterPlannedActivities(this.props.plannedActivities, day);\r\n                const plannedActivityBadges = plannedActivities.map(this.renderPlannedActivityBadge);\r\n\r\n                const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, day);\r\n                const plannedExerciseCategoryBadges = plannedExerciseCategories.map(this.renderPlannedExerciseCategoryBadge);\r\n\r\n                const completedActivities = filterCompletedActivities(this.props.completedActivities, day);\r\n                const completedActivityBadges = completedActivities.map(this.renderCompletedActivityBadge);\r\n                \r\n                days.push(\r\n                    <div className={`col cell\r\n                            ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}\r\n                            ${dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"}\r\n                            ${dateFns.isBefore(day, today) ? \"past\" : \"\"}\r\n                        `} key={day} onClick={() => this.onDateClick(dateFns.parse(cloneDay), plannedActivities)}>\r\n                        <span className=\"number\">{formattedDate}</span>\r\n                        <span className=\"bg\">{formattedDate}</span>\r\n                        <div className=\"cell-content\">\r\n                            <div>{completedActivityBadges}</div>\r\n                            <div>{plannedActivityBadges}</div>\r\n                            <div>{plannedExerciseCategoryBadges}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n\r\n            rows.push(\r\n                <div className=\"row\" key={day}>\r\n                    {days}\r\n                </div>\r\n            );\r\n            days = [];\r\n        }\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onDateClick = (day, plannedActivities) => {\r\n        this.setState({\r\n            selectedDate: day,\r\n            showCalendarDayModal: true,\r\n            selectedDatePlannedActivities: plannedActivities\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n    };\r\n\r\n    handleCloseCalendarDayModal = () => {\r\n        this.setState({\r\n            showCalendarDayModal: false\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n        this.refreshPlannedActivities(this.state.currentMonth);\r\n    }\r\n\r\n    nextMonth = () => {\r\n        const newMonth = dateFns.addMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    prevMonth = () => {\r\n        const newMonth = dateFns.subMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"calendar\">\r\n                {this.renderHeader()}\r\n                {this.renderDayNames()}\r\n                {this.renderCells()}\r\n            </div>\r\n            {this.state.showCalendarDayModal && (\r\n            <CalendarDayModal className=\"modal\" calendarDay={this.state.selectedDate} refresh={this.refreshPlannedActivities} close={this.handleCloseCalendarDayModal} />)}\r\n            <TrainingPlanTemplatesContainer calendarDay={this.state.selectedDate} refresh={this.refreshPlannedActivities} />\r\n            </>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedActivities: state.plannedActivities,\r\n        plannedExercises: state.plannedExercises,\r\n        completedActivities: state.completedActivities\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        completedActivityActions: bindActionCreators(completedActivityActions, dispatch)\r\n    };\r\n}\r\n\r\nCalendar = connect(mapStateToProps, mapDispatchToProps)(Calendar)\r\n\r\nexport default Calendar;","import ls from \"local-storage\";\r\n                \r\nclass UserApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getUserInfo = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/user_info\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserApi;","import * as types from \"./actionTypes\";\r\nimport UserApi from \"../api/UserApi\";\r\n\r\nexport function loadUserInfo() {\r\n    return function(dispatch) {\r\n        const api = new UserApi();\r\n        return api.getUserInfo().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadUserInfoSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadUserInfoSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_USER_INFO_SUCCESS,\r\n        userInfo: responseData.user_info\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport Calendar from \"./Calendar\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\nimport * as userActions from \"../actions/userActions\";\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.userActions.loadUserInfo();\r\n        this.props.activityTypeActions.loadActivityTypes();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // This is where we can add routing in due course\r\n            <>\r\n            <h2>Training Plan</h2>\r\n            <div className=\"alert alert-info\">\r\n                Use our brand new training calendar to plan your activities and exercises.\r\n                    You can schedule activities to do just once or on a recurring weekly basis,\r\n                    and they'll show up on your home page when it's time to do them.\r\n            </div>\r\n            <Calendar />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch)\r\n    };\r\n}\r\n\r\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\nimport App from \"./components/App\";\r\nimport plannedActivitiesReducer from \"./reducers/plannedActivitiesReducer\";\r\nimport plannedExercisesReducer from \"./reducers/plannedExercisesReducer\";\r\nimport completedActivitiesReducer from \"./reducers/completedActivitiesReducer\";\r\nimport activityTypesReducer from \"./reducers/activityTypesReducer\";\r\nimport exerciseTypesReducer from \"./reducers/exerciseTypesReducer\";\r\nimport exerciseCategoriesReducer from \"./reducers/exerciseCategoriesReducer\";\r\nimport trainingPlanTemplatesReducer from \"./reducers/trainingPlanTemplatesReducer\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport \"./base.css\";\r\n\r\n// Might want to refactor this redux stuff into separate files for reducers and configuring store as per tutorial\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    plannedActivities: plannedActivitiesReducer,\r\n    plannedExercises: plannedExercisesReducer,\r\n    completedActivities: completedActivitiesReducer,\r\n    activityTypes: activityTypesReducer,\r\n    exerciseTypes: exerciseTypesReducer,\r\n    exerciseCategories: exerciseCategoriesReducer,\r\n    trainingPlanTemplates: trainingPlanTemplatesReducer,\r\n    user: userReducer\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\n// Use a Main class that we can flesh out to include routing as we start to do more of the site's functionality from React\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"container\")\r\n);","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_ACTIVITIES_SUCCESS:\r\n            return action.plannedActivities;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_ACTIVITY_SUCCESS:\r\n        //     const remainingActivities = state.filter(function(plannedActivity) {\r\n        //         return plannedActivity.id !== action.deletedId;\r\n        //     });\r\n        //     return remainingActivities;\r\n        // TODO: proper reducer for adds and updates so that we can avoid the refresh to update state.  Probably more easy to think about once our data model allows for one-offs?\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedExercisesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_EXERCISES_SUCCESS:\r\n            return action.plannedExercises;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_EXERCISE_SUCCESS:\r\n        //     let remainingPlannedExerciseCategories = []\r\n        //     let remainingExercises;\r\n        //     for (let plannedExerciseCategory of state) {\r\n        //         remainingExercises = plannedExerciseCategory.exercises.filter(function(plannedExercise) {\r\n        //             return plannedExercise.id !== action.deletedId;\r\n        //         });\r\n        //         if (remainingExercises.length > 0) {\r\n        //             plannedExerciseCategory.exercises = remainingExercises;\r\n        //             remainingPlannedExerciseCategories.push(plannedExerciseCategory);\r\n        //         }\r\n        //     }\r\n        //     return remainingPlannedExerciseCategories;\r\n        // todo: proper reducers for update and create that avoid the need to refresh\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function completedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_COMPLETED_ACTIVITIES_SUCCESS:\r\n            return action.completedActivities;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function activityTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_ACTIVITY_TYPES_SUCCESS:\r\n            return action.activityTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_TYPES_SUCCESS:\r\n            return action.exerciseTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseCategoriesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_CATEGORIES_SUCCESS:\r\n            return action.exerciseCategories;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function trainingPlanTemplatesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS:\r\n            return action.trainingPlanTemplates;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function userReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_USER_INFO_SUCCESS:\r\n            console.log(action);\r\n            return action.userInfo;\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}