{"version":3,"sources":["static/img/race-day-bg.png","components/ActivityTypeButtonSet.js","components/ExerciseTypeButtonSet.js","helpers/trainingPlan.js","components/CompletedActivitiesList.js","components/CompletedExercisesList.js","components/PlannedRacesList.js","components/PlannedActivitiesList.js","components/PlannedExercisesList.js","components/PlannedActivityForm.js","components/PlannedRaceForm.js","components/PlannedExerciseForm.js","actions/actionTypes.js","api/PlannedActivitiesApi.js","api/PlannedActivityApi.js","api/PlannedRacesApi.js","api/PlannedRaceApi.js","actions/plannedRaceActions.js","api/PlannedExerciseApi.js","api/PlannedExercisesApi.js","actions/plannedExerciseActions.js","actions/plannedActivityActions.js","api/ActivityTypesApi.js","actions/activityTypeActions.js","actions/exerciseTypeActions.js","actions/exerciseCategoryActions.js","components/CalendarDayModal.js","api/TrainingPlanTemplatesApi.js","actions/trainingPlanTemplateActions.js","components/TrainingPlanTemplatesContainer.js","api/CompletedActivitiesApi.js","actions/completedActivityActions.js","actions/completedExerciseActions.js","components/Calendar.js","api/UserApi.js","actions/userActions.js","components/App.js","index.js","reducers/plannedActivitiesReducer.js","reducers/plannedRacesReducer.js","reducers/plannedExercisesReducer.js","reducers/completedActivitiesReducer.js","reducers/completedExercisesReducer.js","reducers/activityTypesReducer.js","reducers/exerciseTypesReducer.js","reducers/exerciseCategoriesReducer.js","reducers/trainingPlanTemplatesReducer.js","reducers/userReducer.js"],"names":["module","exports","__webpack_require__","p","ActivityTypeButtonSet","renderActivityTypeButton","activityType","buttonClass","category_key","formInitData","activity_type","recurrence","planned_date","dateFns","format","_this","props","calendarDay","repeatOption","distance_uom_preference","user","react_default","a","createElement","key","className","onClick","onAdd","renderPlannedRaceButton","race_type","onAddRace","activityTypes","this","activityTypeButtons","map","plannedRaceButton","Fragment","length","Component","connect","state","ExerciseTypeButtonSet","renderExerciseTypeButton","exerciseType","id","exercise_name","measured_by","default_reps","default_seconds","_this2","exerciseTypeButtons","exerciseTypes","filterPlannedActivities","plannedActivities","day","jsonDate","filter","plannedActivity","filterPlannedRaces","plannedRaces","plannedRace","filterPlannedExercises","plannedExercises","plannedExerciseCategory","filterCompletedActivities","completedActivities","completedActivity","activity_date","filterCompletedExercises","completedExercises","completedExerciseCategory","exercise_date","CompletedActivitiesList","renderCompletedActivitySummary","cardClass","cardHeaderClass","activityUrl","href","name","is_race","distance_formatted","moving_time","average_pace_formatted","average_cadence","median_cadence","average_heartrate","total_elevation_gain_formatted","average_climbing_gradient_formatted","description","strava_url","completedActivitySummaries","CompletedExercisesList","renderCompletedExerciseRow","completedExercise","badgeClass","substring","exercise_time","reps","seconds","completedExerciseCategories","completedExerciseRows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","exercises","err","return","PlannedRacesList","renderPlannedRaceSummary","distance","entry_status","race_website_url","notes","role","onEdit","Dropdown","as","Toggle","cole","bsPrefix","Menu","Item","onRemove","plannedRaceSummaries","PlannedActivitiesList","renderPlannedActivityRow","planned_distance","alignRight","plannedActivityRows","PlannedExercisesList","renderPlannedExerciseRow","plannedExercise","category_name","planned_sets","planned_reps","planned_seconds","plannedExerciseCategories","plannedExerciseRows","PlannedActivityForm","initData","initialize","_this$props","handleSubmit","handleBackClick","onSubmit","htmlFor","Field","component","type","placeholder","reduxForm","form","PlannedRaceForm","required","PlannedExerciseForm","renderCategorySelectOption","categoryOption","categorySelectOptions","isNewExerciseType","categoryOptions","renderField","label","measuredByValue","_ref","input","_ref$meta","meta","touched","error","warning","Object","assign","validate","values","errors","Number","selector","formValueSelector","LOAD_PLANNED_ACTIVITIES_SUCCESS","DELETE_PLANNED_ACTIVITY_SUCCESS","UPDATE_PLANNED_ACTIVITY_SUCCESS","ADD_PLANNED_ACTIVITY_SUCCESS","LOAD_PLANNED_RACES_SUCCESS","DELETE_PLANNED_RACE_SUCCESS","UPDATE_PLANNED_RACE_SUCCESS","ADD_PLANNED_RACE_SUCCESS","LOAD_PLANNED_EXERCISES_SUCCESS","DELETE_PLANNED_EXERCISE_SUCCESS","UPDATE_PLANNED_EXERCISE_SUCCESS","ADD_PLANNED_EXERCISE_SUCCESS","LOAD_COMPLETED_ACTIVITIES_SUCCESS","LOAD_COMPLETED_EXERCISES_SUCCESS","LOAD_ACTIVITY_TYPES_SUCCESS","LOAD_EXERCISE_TYPES_SUCCESS","LOAD_EXERCISE_CATEGORIES_SUCCESS","LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS","COPY_TRAINING_PLAN_TEMPLATE_SUCCESS","LOAD_USER_INFO_SUCCESS","PlannedActivitiesApi","classCallCheck","getPlannedActivities","startDate","endDate","options","method","headers","Authorization","authHeader","endpoint","endpointOrigin","dateFormat","fetch","then","response","ok","json","catch","postPlannedActivities","requestBody","Content-Type","body","mode","accessToken","ls","get","window","location","origin","PlannedActivityApi","patchPlannedActivity","deletePlannedActivity","scope","Error","statusText","PlannedRacesApi","postPlannedRaces","PlannedRaceApi","patchPlannedRace","deletePlannedRace","loadPlannedRacesSuccess","responseData","types","planned_races","addPlannedRace","dispatch","addPlannedRaceSuccess","addedId","updatePlannedRace","result","updatePlannedRaceSuccess","updatedId","deletePlannedRaceSuccess","deletedId","PlannedExerciseApi","patchPlannedExercise","deletePlannedExercise","PlannedExercisesApi","postPlannedExercises","loadPlannedExercisesSuccess","planned_exercises","addPlannedExercise","addPlannedExerciseSuccess","updatePlannedExercise","updatePlannedExerciseSuccess","deletePlannedExerciseSuccess","loadPlannedActivities","loadPlannedActivitiesSuccess","planned_activities","addPlannedActivity","addPlannedActivitySuccess","updatePlannedActivity","updatePlannedActivitySuccess","deletePlannedActivitySuccess","ActivityTypesApi","getActivityTypes","loadActivityTypes","loadActivityTypesSuccess","exercise_types","loadExerciseTypesSuccess","exerciseCategories","exercise_categories","loadExerciseCategoriesSuccess","activity_types","CalendarDayModal","possibleConstructorReturn","getPrototypeOf","call","togglePlannedActivityForm","setState","showCalendarDayMain","showPlannedActivityForm","showPlannedRaceForm","showPlannedExerciseForm","togglePlannedRaceForm","togglePlannedExerciseForm","handleAddPlannedActivity","plannedActivityFormInitData","handleEditPlannedActivity","handleSavePlannedActivity","JSON","stringify","plannedActivityActions","refresh","handleRemovePlannedActivity","plannedActivityId","handleAddPlannedRace","plannedRaceFormInitData","handleEditPlannedRace","handleSavePlannedRace","console","log","plannedRaceActions","handleRemovePlannedRace","plannedRaceId","handleAddPlannedExercise","existingPlannedExerciseId","categories","category","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","exercise","exercise_type_id","plannedExerciseActions","plannedExerciseFormInitData","handleEditPlannedExercise","handleSavePlannedExercise","exercise_category_id","activityTypeActions","handleRemovePlannedExercise","plannedExerciseId","isFutureDate","startOfDay","Date","close","components_CompletedActivitiesList","components_PlannedRacesList","components_CompletedExercisesList","components_PlannedActivitiesList","components_PlannedExercisesList","components_ActivityTypeButtonSet","components_ExerciseTypeButtonSet","components_PlannedActivityForm","components_PlannedRaceForm","components_PlannedExerciseForm","bindActionCreators","TrainingPlanTemplatesApi","getTrainingPlanTemplates","loadTrainingPlanTemplates","loadTrainingPlanTemplatesSuccess","trainingPlanTemplates","training_plan_templates","copyTrainingPlanTemplate","templateId","template_id","copyTrainingPlanTemplateSuccess","message","TrainingPlanTemplatesContainer","handleAddToTrainingPlan","trainingPlanTemplateActions","renderTemplateDetails","template","link_url","target","rel","link_text","templateDetailsList","CompletedActivitiesApi","getCompletedActivities","loadCompletedActivities","loadCompletedActivitiesSuccess","completed_exercises","loadCompletedExercisesSuccess","completed_activities","Calendar","refreshPlannedActivities","currentMonth","startOfWeek","startOfMonth","weekStartsOn","endOfWeek","endOfMonth","refreshCompletedActivities","completedActivityActions","refreshAllActivities","renderHeader","prevMonth","nextMonth","renderDayNames","days","i","addDays","renderPlannedActivityBadge","renderPlannedRaceBadge","renderPlannedExerciseCategoryBadge","renderCompletedActivityBadge","renderCompletedExerciseCategoryBadge","renderCells","_this$state","selectedDate","today","monthStart","monthEnd","rows","formattedDate","_loop","cloneDay","plannedActivityBadges","plannedRaceBadges","plannedExerciseCategoryBadges","completedActivityBadges","backgroundStyle","isRaceDay","backgroundImage","concat","RaceDayBackground","backgroundSize","completedExerciseCategoryBadges","isSameMonth","isSameDay","isBefore","style","onDateClick","parse","showCalendarDayModal","selectedDatePlannedActivities","document","classList","toggle","handleCloseCalendarDayModal","newMonth","addMonths","subMonths","src_components_CalendarDayModal","components_TrainingPlanTemplatesContainer","UserApi","getUserInfo","loadUserInfo","loadUserInfoSuccess","userInfo","user_info","App","userActions","components_Calendar","rootReducer","combineReducers","formReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","components_App","getElementById"],"mappings":"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","file":"static/js/main.20517ebc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/race-day-bg.6a192603.png\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nclass ActivityTypeButtonSet extends Component {\r\n\r\n    renderActivityTypeButton = (activityType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + activityType.category_key;\r\n        const formInitData = {\r\n            activity_type: activityType.activity_type,\r\n            category_key: activityType.category_key,\r\n            recurrence: \"once\",\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <button key={activityType.activity_type} className={buttonClass} onClick={() => this.props.onAdd(formInitData)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {activityType.activity_type}\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    renderPlannedRaceButton = () => {\r\n        const formInitData = {\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            race_type: \"Run\",\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <button key=\"race\" className=\"btn btn-sm ml-1 mr-1 btn-secondary new-exercise-type\" onClick={() => this.props.onAddRace(formInitData)}>\r\n            <i className=\"fa fa-flag-checkered\"></i> Planned Race\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let activityTypes = this.props.activityTypes;\r\n        let activityTypeButtons = activityTypes.map(this.renderActivityTypeButton);\r\n        let plannedRaceButton = this.renderPlannedRaceButton();\r\n        return(\r\n            <>\r\n            {activityTypes.length > 0 &&\r\n            <h3>Add Activities</h3>}\r\n            {activityTypeButtons}\r\n            {plannedRaceButton}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        activityTypes: state.activityTypes,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nActivityTypeButtonSet = connect(mapStateToProps)(ActivityTypeButtonSet);\r\n\r\nexport default ActivityTypeButtonSet;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ExerciseTypeButtonSet extends Component {\r\n\r\n    renderExerciseTypeButton = (exerciseType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + (exerciseType.category_key ? exerciseType.category_key : \"uncategorised\");\r\n\r\n        return (\r\n            <button key={exerciseType.id} className={buttonClass} onClick={() => this.props.onAdd(exerciseType.id)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {exerciseType.exercise_name}\r\n                <br />\r\n                <small>\r\n                    [{exerciseType.measured_by === \"reps\" && (exerciseType.default_reps + \" reps\")}{exerciseType.measured_by === \"seconds\" && (exerciseType.default_seconds + \" seconds\")}]\r\n                </small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let exerciseTypes = this.props.exerciseTypes;\r\n        let exerciseTypeButtons = exerciseTypes.map(this.renderExerciseTypeButton);\r\n        return(\r\n            <>\r\n            <h3>Add Exercises</h3>\r\n            <button key=\"new\" className=\"btn btn-sm ml-1 mr-1 btn-secondary new-exercise-type\" onClick={() => this.props.onAdd(null)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> New Exercise Type\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n            {exerciseTypeButtons}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        exerciseTypes: state.exerciseTypes\r\n    };\r\n}\r\n\r\nExerciseTypeButtonSet = connect(mapStateToProps)(ExerciseTypeButtonSet);\r\n\r\nexport default ExerciseTypeButtonSet;","import dateFns from \"date-fns\";\r\n\r\nexport function filterPlannedActivities(plannedActivities, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.planned_date === jsonDate);\r\n    return plannedActivitiesFiltered;\r\n}\r\n\r\nexport function filterPlannedActivitiesById(plannedActivities, id) {\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.id === id);\r\n    return plannedActivitiesFiltered[0];\r\n}\r\n\r\nexport function filterPlannedRaces(plannedRaces, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedRacesFiltered = plannedRaces.filter(plannedRace => plannedRace.planned_date === jsonDate);\r\n    return plannedRacesFiltered;\r\n}\r\n\r\nexport function filterPlannedExercises(plannedExercises, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedExercisesFiltered = plannedExercises.filter(plannedExerciseCategory => plannedExerciseCategory.planned_date === jsonDate);\r\n    return plannedExercisesFiltered;\r\n}\r\n\r\nexport function filterCompletedActivities(completedActivities, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const completedActivitiesFiltered = completedActivities.filter(completedActivity => completedActivity.activity_date === jsonDate);\r\n    return completedActivitiesFiltered;\r\n}\r\n\r\nexport function filterCompletedExercises(completedExercises, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const completedExercisesFiltered = completedExercises.filter(completedExerciseCategory => completedExerciseCategory.exercise_date === jsonDate);\r\n    return completedExercisesFiltered;\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { filterCompletedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass CompletedActivitiesList extends Component {\r\n\r\n    renderCompletedActivitySummary = (completedActivity) => {\r\n        const cardClass = \"card \" + completedActivity.category_key + \"_border_only mt-2\";\r\n        const cardHeaderClass = \"card-header \" + completedActivity.category_key;\r\n        const activityUrl = \"/activity_analysis/\" + completedActivity.id;\r\n\r\n        return (\r\n            <div className=\"activity-summary\" key={completedActivity.id}>\r\n                <div className={cardClass}>\r\n                    <div className={cardHeaderClass}>\r\n                        <h6 className=\"m-0 p-0\">\r\n                            <a href={activityUrl}>\r\n                                {completedActivity.name}&nbsp;\r\n                                {completedActivity.is_race && <i className=\"fa fa-flag-checkered\"></i>}\r\n                            </a>\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>When:</small></td>\r\n                                            <td>{completedActivity.activity_date}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Distance:</small></td>\r\n                                            <td>{completedActivity.distance_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Moving Time:</small></td>\r\n                                            <td>{completedActivity.moving_time}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Pace:</small></td>\r\n                                            <td>{completedActivity.average_pace_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Cadence:</small></td>\r\n                                            <td>{completedActivity.average_cadence}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Median Cadence:</small></td>\r\n                                            <td>{completedActivity.median_cadence}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Heart Rate:</small></td>\r\n                                            <td>{completedActivity.average_heartrate}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Elevation Gain:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.total_elevation_gain_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Climbing Gradient:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.average_climbing_gradient_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-3\">\r\n                            <div className=\"col-12\">\r\n                                {completedActivity.description &&\r\n                                <p><small>Description:</small> {completedActivity.description}</p>}\r\n                                <p className=\"mb-1\">\r\n                                    <a href={activityUrl}>Analyse Activity</a> |&nbsp;\r\n                                    <a href={completedActivity.strava_url}>View on Strava</a>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const completedActivities = filterCompletedActivities(this.props.completedActivities, this.props.calendarDay);\r\n        let completedActivitySummaries = completedActivities.map(this.renderCompletedActivitySummary);\r\n\r\n        return (\r\n                <div>\r\n                    {completedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Completed Activities</h3>\r\n                        {completedActivitySummaries}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        completedActivities: state.completedActivities\r\n    };\r\n}\r\n\r\nCompletedActivitiesList = connect(mapStateToProps)(CompletedActivitiesList)\r\n\r\nexport default CompletedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { filterCompletedExercises } from \"../helpers/trainingPlan\";\r\n\r\nclass CompletedExercisesList extends Component {\r\n\r\n    renderCompletedExerciseRow = (completedExercise) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedExercise.category_key;\r\n\r\n        return (\r\n            <tr key={completedExercise.id}>\r\n                <td className=\"name-badge\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <h5><span className={badgeClass}>\r\n                        {completedExercise.exercise_name}\r\n                    </span></h5>\r\n                </div>\r\n                <div className=\"d-inline d-sm-none\">\r\n                    <h5><span className={badgeClass}>\r\n                        {completedExercise.exercise_name.length <= 30 ? completedExercise.exercise_name : completedExercise.exercise_name.substring(0,27) + \"...\" }\r\n                    </span></h5>\r\n                </div>\r\n                </td>\r\n                <td>{completedExercise.exercise_time}</td>\r\n                {completedExercise.measured_by === \"reps\" && (\r\n                    <td>{completedExercise.reps ? completedExercise.reps + \" reps\" : \"\"}</td>\r\n                )}\r\n                {completedExercise.measured_by === \"seconds\" && (\r\n                    <td>{completedExercise.seconds ? completedExercise.seconds + \" secs\" : \"\"}</td>\r\n                )}\r\n            </tr>\r\n        );\r\n    }\r\n   \r\n    render() {\r\n        const completedExerciseCategories = filterCompletedExercises(this.props.completedExercises, this.props.calendarDay);\r\n        let completedExerciseRows = [];\r\n        for (let completedExerciseCategory of completedExerciseCategories) {\r\n            completedExerciseRows.push(completedExerciseCategory.exercises.map(this.renderCompletedExerciseRow));\r\n        }\r\n        return (\r\n                <div>\r\n                    {completedExerciseCategories.length > 0 && (\r\n                        <>\r\n                        <h3>Completed Exercises</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {completedExerciseRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        completedExercises: state.completedExercises\r\n    };\r\n}\r\n\r\nCompletedExercisesList = connect(mapStateToProps)(CompletedExercisesList)\r\n\r\nexport default CompletedExercisesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedRaces } from \"../helpers/trainingPlan\";\r\n\r\nclass PlannedRacesList extends Component {\r\n\r\n    renderPlannedRaceSummary = (plannedRace) => {\r\n        const cardClass = \"card \" + plannedRace.category_key + \"_border_only mt-2\";\r\n        const cardHeaderClass = \"card-header \" + plannedRace.category_key;\r\n\r\n        const formInitData = {\r\n            id: plannedRace.id,\r\n            name: plannedRace.name,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            race_type: plannedRace.race_type,\r\n            distance: plannedRace.distance,\r\n            entry_status: plannedRace.entry_status,\r\n            race_website_url: plannedRace.race_website_url,\r\n            notes: plannedRace.notes,\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <div className=\"activity-summary\" key={plannedRace.id}>\r\n                <div className={cardClass}>\r\n                    <div className={cardHeaderClass}>\r\n                        <h6 className=\"m-0 p-0\">\r\n                            {plannedRace.name}&nbsp;<i className=\"fa fa-flag-checkered\"></i>\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                                <p>Race Type: {plannedRace.race_type}</p>\r\n                                {plannedRace.distance &&\r\n                                <p>Distance: {plannedRace.distance} {this.props.user.distance_uom_preference}</p>}\r\n                                {plannedRace.entry_status &&\r\n                                <p>Entry Status: {plannedRace.entry_status}</p>}\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                {plannedRace.notes &&\r\n                                <p>Notes:<br />{plannedRace.notes}</p>}                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {plannedRace.race_website_url &&\r\n                                <p>Race Website: {plannedRace.race_website_url}</p>}\r\n                                <ul className=\"nav\">\r\n                                    <li className=\"nav-item mr-3\">\r\n                                        <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i> Edit</a>\r\n                                    </li>\r\n                                    <Dropdown as=\"li\" className=\"nav-item\">\r\n                                        <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i> Remove</Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedRace.id, \"all\")}>Confirm Remove</Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const plannedRaces = filterPlannedRaces(this.props.plannedRaces, this.props.calendarDay);\r\n        let plannedRaceSummaries = plannedRaces.map(this.renderPlannedRaceSummary);\r\n\r\n        return (\r\n                <div>\r\n                    {plannedRaces.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Races</h3>\r\n                        {plannedRaceSummaries}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedRaces: state.plannedRaces,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nPlannedRacesList = connect(mapStateToProps)(PlannedRacesList)\r\n\r\nexport default PlannedRacesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass PlannedActivitiesList extends Component {\r\n\r\n    renderPlannedActivityRow = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n        const formInitData = {\r\n            id: plannedActivity.id,\r\n            activity_type: plannedActivity.activity_type,\r\n            category_key: plannedActivity.category_key,\r\n            description: plannedActivity.description,\r\n            planned_distance: plannedActivity.planned_distance,\r\n            recurrence: plannedActivity.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        };\r\n\r\n        return (\r\n            <tr key={plannedActivity.id}>\r\n                <td className=\"name-badge\"><h5><span className={badgeClass}>{plannedActivity.activity_type}</span></h5></td>\r\n                <td>{plannedActivity.planned_distance ? plannedActivity.planned_distance + \" \" + this.props.user.distance_uom_preference : \"\"}</td>\r\n                <td>{plannedActivity.description}</td>\r\n                <td>\r\n                    {plannedActivity.recurrence === \"once\" && \"Once only\"}\r\n                    {plannedActivity.recurrence === \"weekly\" && <>Repeats every {dateFns.format(this.props.calendarDay, \"dddd\")}</>}\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedActivity.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedActivity.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this day</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const plannedActivities = filterPlannedActivities(this.props.plannedActivities, this.props.calendarDay);\r\n        let plannedActivityRows = plannedActivities.map(this.renderPlannedActivityRow);\r\n\r\n        return (\r\n                <div>\r\n                    {plannedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Activities</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedActivityRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedActivities: state.plannedActivities,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nPlannedActivitiesList = connect(mapStateToProps)(PlannedActivitiesList)\r\n\r\nexport default PlannedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedExercises } from \"../helpers/trainingPlan\";\r\n// import * as plannedExerciseActions from \"../actions/plannedActivityActions\";\r\n\r\nclass PlannedExercisesList extends Component {\r\n\r\n    renderPlannedExerciseRow = (plannedExercise) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExercise.category_key;\r\n        const formInitData = {\r\n            id: plannedExercise.id,\r\n            exercise_name: plannedExercise.exercise_name,\r\n            category_name: plannedExercise.category_name,\r\n            category_key: plannedExercise.category_key,\r\n            planned_sets: plannedExercise.planned_sets,\r\n            measured_by: plannedExercise.measured_by,\r\n            planned_reps: plannedExercise.planned_reps,\r\n            planned_seconds: plannedExercise.planned_seconds,\r\n            recurrence: plannedExercise.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\")\r\n        }\r\n\r\n        return (\r\n            <tr key={plannedExercise.id}>\r\n                <td className=\"name-badge\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name}\r\n                    </span></h5>\r\n                </div>\r\n                <div className=\"d-inline d-sm-none\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name.length <= 20 ? plannedExercise.exercise_name : plannedExercise.exercise_name.substring(0,17) + \"...\" }\r\n                    </span></h5>\r\n                </div>\r\n                </td>\r\n                <td>{plannedExercise.planned_sets ? plannedExercise.planned_sets + \" sets\" : \"\"}</td>\r\n                {plannedExercise.measured_by === \"reps\" && (\r\n                    <td>{plannedExercise.planned_reps ? plannedExercise.planned_reps + \" reps\" : \"\"}</td>\r\n                )}\r\n                {plannedExercise.measured_by === \"seconds\" && (\r\n                    <td>{plannedExercise.planned_seconds ? plannedExercise.planned_seconds + \" secs\" : \"\"}</td>\r\n                )}\r\n                <td>\r\n                    <div className=\"d-none d-sm-inline\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once only\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && <>Repeats every {dateFns.format(this.props.calendarDay, \"dddd\")}</>}\r\n                    </div>\r\n                    <div className=\"d-inline d-sm-none\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && <>{dateFns.format(this.props.calendarDay, \"ddd\")}</>}\r\n                    </div>\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedExercise.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedExercise.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this day</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n   \r\n    render() {\r\n        const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, this.props.calendarDay);\r\n        let plannedExerciseRows = [];\r\n        for (let plannedExerciseCategory of plannedExerciseCategories) {\r\n            plannedExerciseRows.push(plannedExerciseCategory.exercises.map(this.renderPlannedExerciseRow));\r\n        }\r\n        return (\r\n                <div>\r\n                    {plannedExerciseCategories.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Exercises</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedExerciseRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises\r\n    };\r\n}\r\n\r\nPlannedExercisesList = connect(mapStateToProps)(PlannedExercisesList)\r\n\r\nexport default PlannedExercisesList;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nclass PlannedActivityForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\"><small>Activity Type:</small> <span className={badgeClass}>{initData.activity_type}</span></h4>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"once\">Once only</option>\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"description\">Description</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"description\" name=\"description\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"planned_distance\">Planned Distance ({initData.distance_uom_preference})</label>\r\n                    <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_distance\" name=\"planned_distance\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Activity</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nPlannedActivityForm = reduxForm({\r\n    form: \"plannedActivity\"\r\n})(PlannedActivityForm);\r\n\r\nexport default PlannedActivityForm;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nclass PlannedRaceForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\">New Planned Race</h4>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"name\">Name of Race</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"race_type\">Race Type</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"race_type\" name=\"race_type\">\r\n                        <option value=\"Run\">Run</option>\r\n                        <option value=\"Ride\">Ride</option>\r\n                        <option value=\"Swim\">Swim</option>\r\n                        <option value=\"Triathlon\">Triathlon</option>\r\n                        <option value=\"Duathlon\">Duathlon</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"distance\">Distance ({initData.distance_uom_preference})</label>\r\n                    <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"distance\" name=\"distance\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"entry_status\">Entry Status</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"entry_status\" name=\"entry_status\">\r\n                        <option value=\"\">(optional)</option>\r\n                        <option value=\"Entered\">Entered</option>\r\n                        <option value=\"Probable\">Probable</option>\r\n                        <option value=\"Possible\">Possible</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"race_website_url\">Race Website URL</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"race_website_url\" name=\"race_website_url\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"notes\">Notes</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"notes\" name=\"notes\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Race</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nPlannedRaceForm = reduxForm({\r\n    form: \"plannedRace\"\r\n})(PlannedRaceForm);\r\n\r\nexport default PlannedRaceForm;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field, formValueSelector } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass PlannedExerciseForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    renderCategorySelectOption = (categoryOption) => {\r\n        return (\r\n            <option key={categoryOption.id} value={categoryOption.id}>{categoryOption.category_name}</option>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n        let categorySelectOptions;\r\n\r\n        if (initData.isNewExerciseType) {\r\n            categorySelectOptions = initData.categoryOptions.map(this.renderCategorySelectOption);\r\n        }\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\">{initData.exercise_name} <span className={badgeClass}>{initData.category_name}</span></h4>\r\n                {initData.isNewExerciseType && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <Field component={renderField} type=\"text\" id=\"exercise_name\" name=\"exercise_name\" label=\"Exercise Name\" />\r\n                    </div>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"measured_by\">Measured By</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"measured_by\" name=\"measured_by\">\r\n                            <option value=\"reps\">Reps</option>\r\n                            <option value=\"seconds\">Time (seconds)</option>\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"reps\") || this.props.measuredByValue === \"reps\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_reps\">Reps (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_reps\" name=\"planned_reps\" />\r\n                    </div>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"seconds\") || this.props.measuredByValue === \"seconds\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_seconds\">Seconds (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_seconds\" name=\"planned_seconds\" />\r\n                    </div>\r\n                )}\r\n                <div className=\"form-group \">\r\n                    <Field component={renderField} type=\"number\" id=\"planned_sets\" name=\"planned_sets\" label=\"Planned Sets\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                        <option value=\"once\">Once only</option>\r\n                    </Field>\r\n                </div>\r\n                {initData.isNewExerciseType && initData.categoryOptions && initData.categoryOptions.length > 0 && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"exercise_category_id\">Category</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"exercise_category_id\" name=\"exercise_category_id\">\r\n                            {categorySelectOptions}\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Exercise</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nconst validate = (values) => {\r\n    let errors = {};\r\n    if (Number(values.planned_sets) <= 0) {\r\n        errors.planned_sets = \"Planned Sets must be at least 1.\"\r\n    } \r\n    return errors;\r\n}\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => {\r\n    return (\r\n        <div>\r\n            <label className=\"form-control-label\">{label}</label>\r\n            <div>\r\n            <input className=\"form-control\" {...input} type={type}/>\r\n            {touched && ((error && <div className=\"error mt-1\">{error}</div>) || (warning && <span>{warning}</span>))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nPlannedExerciseForm = reduxForm({\r\n    form: \"plannedExercise\",\r\n    validate\r\n})(PlannedExerciseForm);\r\n\r\n// we want access to other form values\r\nconst selector = formValueSelector(\"plannedExercise\");\r\nPlannedExerciseForm = connect(\r\n    (state) => {\r\n        const measuredByValue = selector(state, 'measured_by')\r\n        return { measuredByValue };\r\n    }\r\n)(PlannedExerciseForm)\r\n\r\nexport default PlannedExerciseForm;","export const LOAD_PLANNED_ACTIVITIES_SUCCESS = \"LOAD_PLANNED_ACTIVITIES_SUCCESS\";\r\nexport const DELETE_PLANNED_ACTIVITY_SUCCESS = \"DELETE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const UPDATE_PLANNED_ACTIVITY_SUCCESS = \"UPDATE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const ADD_PLANNED_ACTIVITY_SUCCESS = \"ADD_PLANNED_ACTIVITY_SUCCESS\";\r\n\r\nexport const LOAD_PLANNED_RACES_SUCCESS = \"LOAD_PLANNED_RACES_SUCCESS\";\r\nexport const DELETE_PLANNED_RACE_SUCCESS = \"DELETE_PLANNED_RACE_SUCCESS\";\r\nexport const UPDATE_PLANNED_RACE_SUCCESS = \"UPDATE_PLANNED_RACE_SUCCESS\";\r\nexport const ADD_PLANNED_RACE_SUCCESS = \"ADD_PLANNED_RACE_SUCCESS\";\r\n\r\nexport const LOAD_PLANNED_EXERCISES_SUCCESS = \"LOAD_PLANNED_EXERCISES_SUCCESS\";\r\nexport const DELETE_PLANNED_EXERCISE_SUCCESS = \"DELETE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const UPDATE_PLANNED_EXERCISE_SUCCESS = \"UPDATE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const ADD_PLANNED_EXERCISE_SUCCESS = \"ADD_PLANNED_EXERCISE_SUCCESS\";\r\n\r\nexport const LOAD_COMPLETED_ACTIVITIES_SUCCESS = \"LOAD_COMPLETED_ACTIVITIES_SUCCESS\";\r\n\r\nexport const LOAD_COMPLETED_EXERCISES_SUCCESS = \"LOAD_COMPLETED_EXERCISES_SUCCESS\";\r\n\r\nexport const LOAD_ACTIVITY_TYPES_SUCCESS = \"LOAD_ACTIVITY_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_TYPES_SUCCESS = \"LOAD_EXERCISE_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_CATEGORIES_SUCCESS = \"LOAD_EXERCISE_CATEGORIES_SUCCESS\";\r\n\r\nexport const LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS = \"LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS\";\r\nexport const COPY_TRAINING_PLAN_TEMPLATE_SUCCESS = \"COPY_TRAINING_PLAN_TEMPLATE_SUCCESS\";\r\n\r\nexport const LOAD_USER_INFO_SUCCESS = \"LOAD_USER_INFO_SUCCESS\"","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass PlannedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getPlannedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n    \r\n    postPlannedActivities = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivitiesApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedActivityApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedActivity = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedActivity = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id + \"?scope=\" + scope;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivityApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedRacesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    postPlannedRaces = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_races\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedRacesApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedRaceApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedRace = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_race/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedRace = (id) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_race/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedRaceApi;","import * as types from \"./actionTypes\";\r\nimport PlannedRacesApi from \"../api/PlannedRacesApi\";\r\nimport PlannedRaceApi from \"../api/PlannedRaceApi\";\r\n\r\nexport function loadPlannedRacesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_RACES_SUCCESS,\r\n        plannedRaces: responseData.planned_races\r\n    };\r\n}\r\n\r\nexport function addPlannedRace(requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedRacesApi();\r\n        return api.postPlannedRaces(requestBody).then(responseData => {\r\n            dispatch(addPlannedRaceSuccess(responseData));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedRaceSuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_RACE_SUCCESS,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedRace(id, requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedRaceApi();\r\n        return api.patchPlannedRace(id, requestBody).then(result => {\r\n            dispatch(updatePlannedRaceSuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedRaceSuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_RACE_SUCCESS,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedRace(id) {\r\n    return function(dispatch) {\r\n        const api = new PlannedRaceApi();\r\n        return api.deletePlannedRace(id).then(result => {\r\n            dispatch(deletePlannedRaceSuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedRaceSuccess(id) {\r\n    return {\r\n        type: types.DELETE_PLANNED_RACE_SUCCESS,\r\n        deletedId: id\r\n    };\r\n}","import ls from \"local-storage\";\r\n                \r\nclass PlannedExerciseApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedExercise = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedExercise = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id + \"?scope=\" + scope;\r\n        \r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExerciseApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedExercisesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    postPlannedExercises = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercises\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExercisesApi","import * as types from \"./actionTypes\";\r\nimport PlannedExerciseApi from \"../api/PlannedExerciseApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadPlannedExercisesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_EXERCISES_SUCCESS,\r\n        plannedExercises: responseData.planned_exercises\r\n    };\r\n}\r\n\r\nexport function addPlannedExercise(requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(addPlannedExerciseSuccess(responseData));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedExerciseSuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_EXERCISE_SUCCESS,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedExercise(id, requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedExerciseApi();\r\n        return api.patchPlannedExercise(id, requestBody).then(result => {\r\n            dispatch(updatePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedExerciseSuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_EXERCISE_SUCCESS,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedExercise(id, scope) {\r\n    return function(dispatch) {\r\n        const api = new PlannedExerciseApi();\r\n        return api.deletePlannedExercise(id, scope).then(result => {\r\n            dispatch(deletePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedExerciseSuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_EXERCISE_SUCCESS,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\nimport PlannedActivitiesApi from \"../api/PlannedActivitiesApi\";\r\nimport PlannedActivityApi from \"../api/PlannedActivityApi\";\r\nimport { loadPlannedRacesSuccess } from \"./plannedRaceActions\";\r\nimport { loadPlannedExercisesSuccess } from \"./plannedExerciseActions\";\r\n\r\nexport function loadPlannedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivitiesApi();\r\n        return api.getPlannedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadPlannedActivitiesSuccess(responseData));\r\n                dispatch(loadPlannedRacesSuccess(responseData));\r\n                dispatch(loadPlannedExercisesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadPlannedActivitiesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_ACTIVITIES_SUCCESS,\r\n        plannedActivities: responseData.planned_activities\r\n    };\r\n}\r\n\r\nexport function addPlannedActivity(requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivitiesApi();\r\n        return api.postPlannedActivities(requestBody).then(responseData => {\r\n            dispatch(addPlannedActivitySuccess(responseData));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedActivitySuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_ACTIVITY_SUCCESS,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedActivity(id, requestBody) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivityApi();\r\n        return api.patchPlannedActivity(id, requestBody).then(result => {\r\n            dispatch(updatePlannedActivitySuccess(id));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedActivitySuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_ACTIVITY_SUCCESS,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedActivity(id, scope) {\r\n    return function(dispatch) {\r\n        const api = new PlannedActivityApi();\r\n        return api.deletePlannedActivity(id, scope).then(result => {\r\n            dispatch(deletePlannedActivitySuccess(id, scope));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedActivitySuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_ACTIVITY_SUCCESS,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import ls from \"local-storage\";\r\n                \r\nclass ActivityTypesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getActivityTypes = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/activity_types\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default ActivityTypesApi;","import * as types from \"./actionTypes\";\r\nimport ActivityTypesApi from \"../api/ActivityTypesApi\";\r\nimport { loadExerciseTypesSuccess } from \"./exerciseTypeActions\"\r\nimport { loadExerciseCategoriesSuccess } from \"./exerciseCategoryActions\"\r\n\r\nexport function loadActivityTypes() {\r\n    return function(dispatch) {\r\n        const api = new ActivityTypesApi();\r\n        return api.getActivityTypes().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadActivityTypesSuccess(responseData));\r\n                dispatch(loadExerciseTypesSuccess(responseData));\r\n                dispatch(loadExerciseCategoriesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadActivityTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_ACTIVITY_TYPES_SUCCESS,\r\n        activityTypes: responseData.activity_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_TYPES_SUCCESS,\r\n        exerciseTypes: responseData.exercise_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseCategoriesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_CATEGORIES_SUCCESS,\r\n        exerciseCategories: responseData.exercise_categories\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport dateFns from \"date-fns\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport \"./CalendarDayModal.css\";\r\nimport ActivityTypeButtonSet from \"./ActivityTypeButtonSet\";\r\nimport ExerciseTypeButtonSet from \"./ExerciseTypeButtonSet\";\r\nimport CompletedActivitiesList from \"./CompletedActivitiesList\";\r\nimport CompletedExercisesList from \"./CompletedExercisesList\";\r\nimport PlannedRacesList from \"./PlannedRacesList\";\r\nimport PlannedActivitiesList from \"./PlannedActivitiesList\";\r\nimport PlannedExercisesList from \"./PlannedExercisesList\";\r\nimport PlannedActivityForm from \"./PlannedActivityForm\";\r\nimport PlannedRaceForm from \"./PlannedRaceForm\";\r\nimport PlannedExerciseForm from \"./PlannedExerciseForm\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as plannedRaceActions from \"../actions/plannedRaceActions\";\r\nimport * as plannedExerciseActions from \"../actions/plannedExerciseActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass CalendarDayModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCalendarDayMain: true,\r\n            showPlannedActivityForm: false,\r\n            showPlannedRaceForm: false,\r\n            showPlannedExerciseForm: false,\r\n            isFutureDate: (props.calendarDay >= dateFns.startOfDay(new Date())),\r\n            plannedActivities: props.plannedActivities\r\n        }\r\n    }\r\n\r\n    togglePlannedActivityForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedActivityForm: !this.state.showPlannedActivityForm,\r\n            showPlannedRaceForm: false,\r\n            showPlannedExerciseForm: false\r\n        })\r\n    }\r\n\r\n    togglePlannedRaceForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedRaceForm: !this.state.showPlannedRaceForm,\r\n            showPlannedActivityForm: false,\r\n            showPlannedExerciseForm: false\r\n        })\r\n    }\r\n\r\n    togglePlannedExerciseForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedExerciseForm: !this.state.showPlannedExerciseForm,\r\n            showPlannedActivityForm: false,\r\n            showPlannedRaceForm: false\r\n        })\r\n    }\r\n\r\n    // Planned Activity CRUD operations\r\n    handleAddPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleEditPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleSavePlannedActivity = (values) => {\r\n        const requestBody = JSON.stringify({ \r\n            activity_type: values.activity_type,\r\n            planned_date: values.planned_date,\r\n            recurrence: values.recurrence,\r\n            description: values.description,\r\n            planned_distance: values.planned_distance\r\n        })\r\n        if (values.id) {\r\n            this.props.plannedActivityActions.updatePlannedActivity(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            this.props.plannedActivityActions.addPlannedActivity(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        }\r\n        this.togglePlannedActivityForm();\r\n    }\r\n    \r\n    handleRemovePlannedActivity = (plannedActivityId, scope) => {\r\n        this.props.plannedActivityActions.deletePlannedActivity(plannedActivityId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    // Planned Race CRUD operations\r\n    handleAddPlannedRace = (formInitData) => {\r\n        this.setState({\r\n            plannedRaceFormInitData: formInitData\r\n        });\r\n        this.togglePlannedRaceForm();\r\n    }\r\n\r\n    handleEditPlannedRace = (formInitData) => {\r\n        this.setState({\r\n            plannedRaceFormInitData: formInitData\r\n        });\r\n        this.togglePlannedRaceForm();\r\n    }\r\n\r\n    handleSavePlannedRace = (values) => {\r\n        const requestBody = JSON.stringify({ \r\n            name: values.name,\r\n            planned_date: values.planned_date,\r\n            race_type: values.race_type,\r\n            distance: values.distance,\r\n            entry_status: values.entry_status,\r\n            race_website_url: values.race_website_url,\r\n            notes: values.notes\r\n        });\r\n        console.log(requestBody);\r\n        if (values.id) {\r\n            this.props.plannedRaceActions.updatePlannedRace(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            this.props.plannedRaceActions.addPlannedRace(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        }\r\n        this.togglePlannedRaceForm();\r\n    }\r\n    \r\n    handleRemovePlannedRace = (plannedRaceId) => {\r\n        this.props.plannedRaceActions.deletePlannedRace(plannedRaceId).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    // CRUD operations for planned exercises\r\n    handleAddPlannedExercise = (id) => {\r\n        const calendarDay = dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\");\r\n        if (!id) {\r\n            const formInitData = {\r\n                isNewExerciseType: true,\r\n                measured_by: \"reps\",\r\n                planned_sets: 1,\r\n                recurrence: \"weekly\",\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n                repeatOption: \"Repeat every \" + dateFns.format(this.props.calendarDay, \"dddd\"),\r\n                categoryOptions: this.props.exerciseCategories\r\n            }\r\n            this.setState({\r\n                plannedExerciseFormInitData: formInitData\r\n            });\r\n            this.togglePlannedExerciseForm();\r\n        } else {\r\n            const categories = this.props.plannedExercises.filter(function(plannedExercise) {\r\n                return plannedExercise.planned_date === calendarDay;\r\n            });\r\n\r\n            let requestBody;\r\n            let existingPlannedExerciseId;\r\n            for (let category of categories) {\r\n                for (let exercise of category.exercises) {\r\n                    if (exercise.exercise_type_id === id) {\r\n                        existingPlannedExerciseId = exercise.id;\r\n                        requestBody = JSON.stringify({ \r\n                            recurrence: exercise.recurrence,\r\n                            planned_date: calendarDay,\r\n                            planned_sets: (exercise.planned_sets + 1),\r\n                            planned_reps: exercise.planned_reps,\r\n                            planned_seconds: exercise.planned_seconds\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (existingPlannedExerciseId) {\r\n                this.props.plannedExerciseActions.updatePlannedExercise(existingPlannedExerciseId, requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });\r\n            } else {\r\n                const exerciseType = this.props.exerciseTypes.filter(function(exerciseType) {\r\n                    return exerciseType.id === id;\r\n                })[0];\r\n                requestBody = JSON.stringify({\r\n                    exercise_type_id: id,\r\n                    recurrence: \"weekly\",\r\n                    planned_date: calendarDay,\r\n                    planned_reps: exerciseType.default_reps,\r\n                    planned_seconds: exerciseType.default_seconds\r\n                });\r\n                this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });                \r\n            }\r\n        }\r\n    }\r\n\r\n    handleEditPlannedExercise = (formInitData) => {\r\n        this.setState({\r\n            plannedExerciseFormInitData: formInitData\r\n        });\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleSavePlannedExercise = (values) => {\r\n        if (values.id) {\r\n            const requestBody = JSON.stringify({ \r\n                planned_date: values.planned_date,\r\n                recurrence: values.recurrence,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds\r\n            });\r\n            this.props.plannedExerciseActions.updatePlannedExercise(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            const requestBody = JSON.stringify({\r\n                exercise_name: values.exercise_name,\r\n                measured_by: values.measured_by,\r\n                exercise_category_id: values.exercise_category_id,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds,\r\n                recurrence: values.recurrence,\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\")\r\n            });\r\n            this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n                // we need to refresh buttons too\r\n                this.props.activityTypeActions.loadActivityTypes();\r\n            });\r\n        }\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleRemovePlannedExercise = (plannedExerciseId, scope) => {\r\n        this.props.plannedExerciseActions.deletePlannedExercise(plannedExerciseId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const dateFormatFull = \"dddd DD MMMM YYYY\";\r\n        const dateFormatAbbrev = \"ddd DD MMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"modal-back-drop\">\r\n                <div className=\"modal-wrapper\">\r\n                    <div className=\"calendar-modal-header\">\r\n                        <div className=\"d-none d-sm-inline\">\r\n                            <h4>{dateFns.format(this.props.calendarDay, dateFormatFull)}</h4>\r\n                        </div>\r\n                        <div className=\"d-inline d-sm-none\">\r\n                            <h4>{dateFns.format(this.props.calendarDay, dateFormatAbbrev)}</h4>\r\n                        </div>\r\n                        <span className=\"close-modal-btn\" onClick={this.props.close}><i className=\"fa fa-window-close\"></i></span>\r\n                    </div>\r\n                    <div className=\"calendar-modal-body\">\r\n                        <div>\r\n                            {this.state.showCalendarDayMain &&\r\n                            <>\r\n                                <CompletedActivitiesList calendarDay={this.props.calendarDay} />\r\n                                <PlannedRacesList calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedRace} onRemove={this.handleRemovePlannedRace} />\r\n                                <CompletedExercisesList calendarDay={this.props.calendarDay} />\r\n                                <PlannedActivitiesList calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedActivity} onRemove={this.handleRemovePlannedActivity} />\r\n                                <PlannedExercisesList calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedExercise} onRemove={this.handleRemovePlannedExercise} />\r\n                                {this.state.isFutureDate &&\r\n                                <>\r\n                                    <ActivityTypeButtonSet calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedActivity} onAddRace={this.handleAddPlannedRace} />\r\n                                    <ExerciseTypeButtonSet calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedExercise} />\r\n                                </>}\r\n                            </>}\r\n                            {this.state.showPlannedActivityForm &&\r\n                            <PlannedActivityForm initData={this.state.plannedActivityFormInitData} onSubmit={this.handleSavePlannedActivity} handleBackClick={this.togglePlannedActivityForm} />}\r\n                            {this.state.showPlannedRaceForm &&\r\n                            <PlannedRaceForm initData={this.state.plannedRaceFormInitData} onSubmit={this.handleSavePlannedRace} handleBackClick={this.togglePlannedRaceForm} />}\r\n                            {this.state.showPlannedExerciseForm &&\r\n                            <PlannedExerciseForm initData={this.state.plannedExerciseFormInitData} onSubmit={this.handleSavePlannedExercise} handleBackClick={this.togglePlannedExerciseForm} />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises,\r\n        exerciseTypes: state.exerciseTypes,\r\n        exerciseCategories: state.exerciseCategories\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        plannedRaceActions: bindActionCreators(plannedRaceActions, dispatch),\r\n        plannedExerciseActions: bindActionCreators(plannedExerciseActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarDayModal);","class TrainingPlanTemplatesApi {\r\n    constructor() {\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getTrainingPlanTemplates = () => {\r\n        const options = {\r\n            method: \"GET\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/training_plan_templates\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrainingPlanTemplatesApi;","import * as types from \"./actionTypes\";\r\nimport TrainingPlanTemplatesApi from \"../api/TrainingPlanTemplatesApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadTrainingPlanTemplates() {\r\n    return function(dispatch) {\r\n        const api = new TrainingPlanTemplatesApi();\r\n        return api.getTrainingPlanTemplates().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadTrainingPlanTemplatesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadTrainingPlanTemplatesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS,\r\n        trainingPlanTemplates: responseData.training_plan_templates\r\n    };\r\n}\r\n\r\nexport function copyTrainingPlanTemplate(templateId) {\r\n    const requestBody = JSON.stringify({\r\n        template_id: templateId\r\n    });\r\n    return function(dispatch) {\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(copyTrainingPlanTemplateSuccess(responseData));\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function copyTrainingPlanTemplateSuccess(responseData) {\r\n    return {\r\n        type: types.COPY_TRAINING_PLAN_TEMPLATE_SUCCESS,\r\n        message: responseData.message\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport * as trainingPlanTemplateActions from \"../actions/trainingPlanTemplateActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass TrainingPlanTemplatesContainer extends Component {  \r\n\r\n    componentDidMount() {\r\n        this.props.trainingPlanTemplateActions.loadTrainingPlanTemplates();\r\n    }\r\n\r\n    handleAddToTrainingPlan = (templateId) => {\r\n        this.props.trainingPlanTemplateActions.copyTrainingPlanTemplate(templateId).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n            this.props.activityTypeActions.loadActivityTypes();\r\n        });\r\n    }\r\n\r\n    renderTemplateDetails = (template) => {\r\n        return (\r\n            <div key={template.id}>\r\n                <hr />\r\n                <div className=\"alert alert-info\">\r\n                    <h6>{template.name} [<a href=\"#add\" onClick={() => this.handleAddToTrainingPlan(template.id)}>Add to Training Plan</a>]</h6>\r\n                    <p>{template.description} <a href={template.link_url} target=\"_blank\" rel=\"noopener noreferrer\">{template.link_text}</a></p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let templates = this.props.trainingPlanTemplates;\r\n        let templateDetailsList = templates.map(this.renderTemplateDetails);\r\n\r\n        return (\r\n            <div className=\"card mt-4\">\r\n                <div className=\"card-header\">\r\n                    <h4>Get started using a template</h4>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <p>If you're looking for somewhere to start with creating your personalised training plan,\r\n                        try one of these templates to populate some initial exercises, and then adapt as required.\r\n                        Let us know via <a href=\"mailto:feedback@trainingticks.com\">feedback@trainingticks.com</a> if there's\r\n                        a training plan you've come across that you'd like to be available as a template.</p>\r\n                    <p><i>Please note that Training Ticks has no association with any of the websites or authors referenced below.\r\n                    We are sharing them as useful resources that will hopefully help your training.</i></p>\r\n                    {templateDetailsList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        trainingPlanTemplates: state.trainingPlanTemplates\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        trainingPlanTemplateActions: bindActionCreators(trainingPlanTemplateActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nTrainingPlanTemplatesContainer = connect(mapStateToProps, mapDispatchToProps)(TrainingPlanTemplatesContainer);\r\n\r\nexport default TrainingPlanTemplatesContainer;","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass CompletedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getCompletedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/completed_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default CompletedActivitiesApi;","import * as types from \"./actionTypes\";\r\nimport CompletedActivitiesApi from \"../api/CompletedActivitiesApi\";\r\nimport { loadCompletedExercisesSuccess } from \"./completedExerciseActions\";\r\n\r\nexport function loadCompletedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        const api = new CompletedActivitiesApi();\r\n        return api.getCompletedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadCompletedActivitiesSuccess(responseData));\r\n                dispatch(loadCompletedExercisesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadCompletedActivitiesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_COMPLETED_ACTIVITIES_SUCCESS,\r\n        completedActivities: responseData.completed_activities\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadCompletedExercisesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_COMPLETED_EXERCISES_SUCCESS,\r\n        completedExercises: responseData.completed_exercises\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport CalendarDayModal from \"./CalendarDayModal\";\r\nimport TrainingPlanTemplatesContainer from \"./TrainingPlanTemplatesContainer\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as completedActivityActions from \"../actions/completedActivityActions\";\r\nimport { filterPlannedActivities, filterPlannedRaces, filterPlannedExercises, filterCompletedActivities, filterCompletedExercises } from \"../helpers/trainingPlan\";\r\nimport RaceDayBackground from '../static/img/race-day-bg.png';\r\n\r\nclass Calendar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentMonth: new Date(),\r\n            today: new Date(),\r\n            selectedDate: new Date(),\r\n            showCalendarDayModal: false\r\n        };\r\n    }\r\n\r\n    refreshPlannedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.plannedActivityActions.loadPlannedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshCompletedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.completedActivityActions.loadCompletedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshAllActivities = (currentMonth) => {\r\n        this.refreshPlannedActivities(currentMonth);\r\n        this.refreshCompletedActivities(currentMonth);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshAllActivities(this.state.currentMonth);\r\n    }\r\n\r\n    renderHeader = () => {\r\n        const dateFormat = \"MMMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"header row flex-middle\">\r\n                <div className=\"col col-start\">\r\n                    <div className=\"icon\" onClick={this.prevMonth}>\r\n                        chevron_left\r\n                    </div>\r\n                </div>\r\n                <div className=\"col col-center\">\r\n                    <span>\r\n                        {dateFns.format(this.state.currentMonth, dateFormat)}\r\n                    </span>\r\n                </div>\r\n                <div className=\"col col-end\" onClick={this.nextMonth}>\r\n                    <div className=\"icon\">chevron_right</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDayNames = () => {\r\n        const dateFormatFull = \"dddd\";\r\n        const dateFormatAbbrev = \"ddd\";\r\n        const days = [];\r\n\r\n        let startDate = dateFns.startOfWeek(this.state.currentMonth, {weekStartsOn: 1});\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <div className=\"col col-center\" key={i}>\r\n                    <div className=\"d-none d-md-block\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatFull)}\r\n                    </div>\r\n                    <div className=\"d-block d-md-none\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatAbbrev)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"days row\">\r\n                {days}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedActivityBadge = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n\r\n        return (\r\n            <div key={plannedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedActivity.activity_type}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none \">\r\n                    <span className={badgeClass}>{plannedActivity.activity_type[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedRaceBadge = (plannedRace) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedRace.category_key;\r\n\r\n        return (\r\n            <div key={plannedRace.id} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}>{plannedRace.name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedExerciseCategoryBadge = (plannedExerciseCategory) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExerciseCategory.category_key;\r\n\r\n        return (\r\n            <div key={plannedExerciseCategory.category_key + plannedExerciseCategory.planned_date} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedActivityBadge = (completedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedActivity.category_key;\r\n\r\n        return (\r\n            <div key={completedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}><div className=\"d-none d-md-inline\"><i className=\"fa fa-check\"></i></div> {completedActivity.name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedExerciseCategoryBadge = (completedExerciseCategory) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedExerciseCategory.category_key;\r\n\r\n        return (\r\n            <div key={completedExerciseCategory.category_key + completedExerciseCategory.exercise_date} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}><div className=\"d-none d-md-inline\"><i className=\"fa fa-check\"></i></div> {completedExerciseCategory.category_name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCells = () => {\r\n        const { currentMonth, selectedDate, today } = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart, {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(monthEnd, {weekStartsOn: 1});\r\n        const dateFormat = \"D\";\r\n        \r\n        let rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n\r\n        while (day <= endDate) {\r\n            for (let i = 0; i < 7; i++) {\r\n\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cloneDay = day;\r\n\r\n                const plannedActivities = filterPlannedActivities(this.props.plannedActivities, day);\r\n                const plannedActivityBadges = plannedActivities.map(this.renderPlannedActivityBadge);\r\n\r\n                const plannedRaces = filterPlannedRaces(this.props.plannedRaces, day);\r\n                const plannedRaceBadges = plannedRaces.map(this.renderPlannedRaceBadge);\r\n\r\n                const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, day);\r\n                const plannedExerciseCategoryBadges = plannedExerciseCategories.map(this.renderPlannedExerciseCategoryBadge);\r\n\r\n                const completedActivities = filterCompletedActivities(this.props.completedActivities, day);\r\n                const completedActivityBadges = completedActivities.map(this.renderCompletedActivityBadge);\r\n\r\n                let backgroundStyle = {}\r\n                let isRaceDay = false;\r\n                if (plannedRaces.length > 0) {\r\n                    isRaceDay = true;\r\n                } else {\r\n                    for (let activity of completedActivities) {\r\n                        if (activity.is_race === true) {\r\n                            isRaceDay = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isRaceDay) {\r\n                    backgroundStyle = {\r\n                        backgroundImage: `url(${RaceDayBackground})`,\r\n                        backgroundSize: \"cover\"\r\n                    };\r\n                }\r\n\r\n                const completedExercises = filterCompletedExercises(this.props.completedExercises, day);\r\n                const completedExerciseCategoryBadges = completedExercises.map(this.renderCompletedExerciseCategoryBadge);\r\n                \r\n                days.push(\r\n                    <div className={`col cell\r\n                            ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}\r\n                            ${dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"}\r\n                            ${dateFns.isBefore(day, today) ? \"past\" : \"\"}\r\n                        `} style={backgroundStyle} key={day} onClick={() => this.onDateClick(dateFns.parse(cloneDay), plannedActivities)}>\r\n                        <span className=\"number\">{formattedDate}</span>\r\n                        <span className=\"bg\">{formattedDate}</span>\r\n                        <div className=\"cell-content\">\r\n                            <div>{completedActivityBadges}</div>\r\n                            <div>{completedExerciseCategoryBadges}</div>\r\n                            <div>{plannedActivityBadges}</div>\r\n                            <div>{plannedRaceBadges}</div>\r\n                            <div>{plannedExerciseCategoryBadges}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n\r\n            rows.push(\r\n                <div className=\"row\" key={day}>\r\n                    {days}\r\n                </div>\r\n            );\r\n            days = [];\r\n        }\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onDateClick = (day, plannedActivities) => {\r\n        this.setState({\r\n            selectedDate: day,\r\n            showCalendarDayModal: true,\r\n            selectedDatePlannedActivities: plannedActivities\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n    };\r\n\r\n    handleCloseCalendarDayModal = () => {\r\n        this.setState({\r\n            showCalendarDayModal: false\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n        this.refreshPlannedActivities(this.state.currentMonth);\r\n    }\r\n\r\n    nextMonth = () => {\r\n        const newMonth = dateFns.addMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    prevMonth = () => {\r\n        const newMonth = dateFns.subMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"calendar\">\r\n                {this.renderHeader()}\r\n                {this.renderDayNames()}\r\n                {this.renderCells()}\r\n            </div>\r\n            {this.state.showCalendarDayModal && (\r\n            <CalendarDayModal className=\"modal\" calendarDay={this.state.selectedDate} refresh={this.refreshPlannedActivities} close={this.handleCloseCalendarDayModal} />)}\r\n            <TrainingPlanTemplatesContainer calendarDay={this.state.selectedDate} refresh={this.refreshPlannedActivities} />\r\n            </>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedActivities: state.plannedActivities,\r\n        plannedRaces: state.plannedRaces,\r\n        plannedExercises: state.plannedExercises,\r\n        completedActivities: state.completedActivities,\r\n        completedExercises: state.completedExercises\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        completedActivityActions: bindActionCreators(completedActivityActions, dispatch)\r\n    };\r\n}\r\n\r\nCalendar = connect(mapStateToProps, mapDispatchToProps)(Calendar)\r\n\r\nexport default Calendar;","import ls from \"local-storage\";\r\n                \r\nclass UserApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getUserInfo = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/user_info\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserApi;","import * as types from \"./actionTypes\";\r\nimport UserApi from \"../api/UserApi\";\r\n\r\nexport function loadUserInfo() {\r\n    return function(dispatch) {\r\n        const api = new UserApi();\r\n        return api.getUserInfo().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadUserInfoSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadUserInfoSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_USER_INFO_SUCCESS,\r\n        userInfo: responseData.user_info\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport Calendar from \"./Calendar\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\nimport * as userActions from \"../actions/userActions\";\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.userActions.loadUserInfo();\r\n        this.props.activityTypeActions.loadActivityTypes();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // This is where we can add routing in due course\r\n            <>\r\n            <h2>Training Plan</h2>\r\n            <div className=\"alert alert-info\">\r\n                Use our brand new training calendar to plan your activities and exercises.\r\n                    You can schedule activities to do just once or on a recurring weekly basis,\r\n                    and they'll show up on your home page when it's time to do them.\r\n            </div>\r\n            <Calendar />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch)\r\n    };\r\n}\r\n\r\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\nimport App from \"./components/App\";\r\nimport plannedActivitiesReducer from \"./reducers/plannedActivitiesReducer\";\r\nimport plannedRacesReducer from \"./reducers/plannedRacesReducer\";\r\nimport plannedExercisesReducer from \"./reducers/plannedExercisesReducer\";\r\nimport completedActivitiesReducer from \"./reducers/completedActivitiesReducer\";\r\nimport completedExercisesReducer from \"./reducers/completedExercisesReducer\";\r\nimport activityTypesReducer from \"./reducers/activityTypesReducer\";\r\nimport exerciseTypesReducer from \"./reducers/exerciseTypesReducer\";\r\nimport exerciseCategoriesReducer from \"./reducers/exerciseCategoriesReducer\";\r\nimport trainingPlanTemplatesReducer from \"./reducers/trainingPlanTemplatesReducer\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport \"./base.css\";\r\n\r\n// Might want to refactor this redux stuff into separate files for reducers and configuring store as per tutorial\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    plannedActivities: plannedActivitiesReducer,\r\n    plannedRaces: plannedRacesReducer,\r\n    plannedExercises: plannedExercisesReducer,\r\n    completedActivities: completedActivitiesReducer,\r\n    completedExercises: completedExercisesReducer,\r\n    activityTypes: activityTypesReducer,\r\n    exerciseTypes: exerciseTypesReducer,\r\n    exerciseCategories: exerciseCategoriesReducer,\r\n    trainingPlanTemplates: trainingPlanTemplatesReducer,\r\n    user: userReducer\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\n// Use a Main class that we can flesh out to include routing as we start to do more of the site's functionality from React\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"container\")\r\n);","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_ACTIVITIES_SUCCESS:\r\n            return action.plannedActivities;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_ACTIVITY_SUCCESS:\r\n        //     const remainingActivities = state.filter(function(plannedActivity) {\r\n        //         return plannedActivity.id !== action.deletedId;\r\n        //     });\r\n        //     return remainingActivities;\r\n        // TODO: proper reducer for adds and updates so that we can avoid the refresh to update state.  Probably more easy to think about once our data model allows for one-offs?\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedRacesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_RACES_SUCCESS:\r\n            return action.plannedRaces;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_ACTIVITY_SUCCESS:\r\n        //     const remainingActivities = state.filter(function(plannedActivity) {\r\n        //         return plannedActivity.id !== action.deletedId;\r\n        //     });\r\n        //     return remainingActivities;\r\n        // TODO: proper reducer for adds and updates so that we can avoid the refresh to update state.  Probably more easy to think about once our data model allows for one-offs?\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedExercisesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_EXERCISES_SUCCESS:\r\n            return action.plannedExercises;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_EXERCISE_SUCCESS:\r\n        //     let remainingPlannedExerciseCategories = []\r\n        //     let remainingExercises;\r\n        //     for (let plannedExerciseCategory of state) {\r\n        //         remainingExercises = plannedExerciseCategory.exercises.filter(function(plannedExercise) {\r\n        //             return plannedExercise.id !== action.deletedId;\r\n        //         });\r\n        //         if (remainingExercises.length > 0) {\r\n        //             plannedExerciseCategory.exercises = remainingExercises;\r\n        //             remainingPlannedExerciseCategories.push(plannedExerciseCategory);\r\n        //         }\r\n        //     }\r\n        //     return remainingPlannedExerciseCategories;\r\n        // todo: proper reducers for update and create that avoid the need to refresh\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function completedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_COMPLETED_ACTIVITIES_SUCCESS:\r\n            return action.completedActivities;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function completedExercisesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_COMPLETED_EXERCISES_SUCCESS:\r\n            return action.completedExercises;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function activityTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_ACTIVITY_TYPES_SUCCESS:\r\n            return action.activityTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_TYPES_SUCCESS:\r\n            return action.exerciseTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseCategoriesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_CATEGORIES_SUCCESS:\r\n            return action.exerciseCategories;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function trainingPlanTemplatesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS:\r\n            return action.trainingPlanTemplates;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function userReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_USER_INFO_SUCCESS:\r\n            return action.userInfo;\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}