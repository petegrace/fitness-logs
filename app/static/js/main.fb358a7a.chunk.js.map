{"version":3,"sources":["static/img/race-day-bg.png","components/ActivityTypeButtonSet.js","components/ExerciseTypeButtonSet.js","helpers/trainingPlan.js","components/CompletedActivitiesList.js","components/CompletedExercisesList.js","components/PlannedRacesList.js","components/PlannedActivitiesList.js","components/PlannedExercisesList.js","components/PlannedActivityForm.js","components/PlannedRaceForm.js","components/PlannedExerciseForm.js","actions/actionTypes.js","api/PlannedActivitiesApi.js","api/PlannedActivityApi.js","api/PlannedRacesApi.js","api/PlannedRaceApi.js","actions/plannedRaceActions.js","api/PlannedExerciseApi.js","api/PlannedExercisesApi.js","actions/plannedExerciseActions.js","actions/plannedActivityActions.js","api/ActivityTypesApi.js","actions/activityTypeActions.js","actions/exerciseTypeActions.js","actions/exerciseCategoryActions.js","components/CalendarDayModal.js","api/TrainingPlanTemplatesApi.js","actions/trainingPlanTemplateActions.js","components/TrainingPlanTemplatesContainer.js","api/CompletedActivitiesApi.js","actions/completedActivityActions.js","actions/completedExerciseActions.js","components/Calendar.js","api/UserApi.js","actions/userActions.js","components/EnableFlexiblePlanningButton.js","components/TrainingPlanIntroContainer.js","components/App.js","index.js","reducers/plannedActivitiesReducer.js","reducers/plannedRacesReducer.js","reducers/plannedExercisesReducer.js","reducers/completedActivitiesReducer.js","reducers/completedExercisesReducer.js","reducers/activityTypesReducer.js","reducers/exerciseTypesReducer.js","reducers/exerciseCategoriesReducer.js","reducers/trainingPlanTemplatesReducer.js","reducers/userReducer.js"],"names":["module","exports","__webpack_require__","p","ActivityTypeButtonSet","renderActivityTypeButton","activityType","buttonClass","category_key","formInitData","activity_type","planning_period","_this","props","planningPeriod","recurrence","planned_date","dateFns","format","calendarDay","repeatOption","distance_uom_preference","user","react_default","a","createElement","key","className","onClick","onAdd","renderPlannedRaceButton","race_type","onAddRace","activityTypes","this","activityTypeButtons","map","plannedRaceButton","Fragment","length","Component","connect","state","ExerciseTypeButtonSet","renderExerciseTypeButton","exerciseType","id","exercise_name","measured_by","default_reps","default_seconds","_this2","exerciseTypeButtons","exerciseTypes","filterPlannedActivities","plannedActivities","day","jsonDate","filter","plannedActivity","filterPlannedRaces","plannedRaces","plannedRace","filterPlannedExercises","plannedExercises","plannedExerciseCategory","filterCompletedActivities","completedActivities","completedActivity","activity_date","filterCompletedExercises","completedExercises","completedExerciseCategory","exercise_date","CompletedActivitiesList","renderCompletedActivitySummary","cardClass","cardHeaderClass","activityUrl","href","name","is_race","distance_formatted","moving_time","average_pace_formatted","average_cadence","median_cadence","average_heartrate","total_elevation_gain_formatted","average_climbing_gradient_formatted","description","strava_url","completedActivitySummaries","CompletedExercisesList","renderCompletedExerciseRow","completedExercise","badgeClass","substring","exercise_time","reps","seconds","completedExerciseCategories","completedExerciseRows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","exercises","err","return","PlannedRacesList","renderPlannedRaceSummary","distance","entry_status","race_website_url","notes","role","onEdit","Dropdown","as","Toggle","cole","bsPrefix","Menu","Item","onRemove","plannedRaceSummaries","PlannedActivitiesList","renderPlannedActivityRow","planned_distance","alignRight","plannedActivityRows","PlannedExercisesList","renderPlannedExerciseRow","plannedExercise","category_name","planned_sets","planned_reps","planned_seconds","plannedExerciseCategories","plannedExerciseRows","PlannedActivityForm","initData","initialize","_this$props","handleSubmit","handleBackClick","onSubmit","htmlFor","Field","component","type","placeholder","reduxForm","form","PlannedRaceForm","required","PlannedExerciseForm","renderCategorySelectOption","categoryOption","categorySelectOptions","isNewExerciseType","categoryOptions","renderField","label","measuredByValue","_ref","input","_ref$meta","meta","touched","error","warning","Object","assign","validate","values","errors","Number","selector","formValueSelector","LOAD_PLANNED_ACTIVITIES","LOAD_PLANNED_ACTIVITIES_SUCCESS","DELETE_PLANNED_ACTIVITY","DELETE_PLANNED_ACTIVITY_SUCCESS","UPDATE_PLANNED_ACTIVITY","UPDATE_PLANNED_ACTIVITY_SUCCESS","ADD_PLANNED_ACTIVITY","ADD_PLANNED_ACTIVITY_SUCCESS","LOAD_PLANNED_RACES_SUCCESS","DELETE_PLANNED_RACE","DELETE_PLANNED_RACE_SUCCESS","UPDATE_PLANNED_RACE","UPDATE_PLANNED_RACE_SUCCESS","ADD_PLANNED_RACE","ADD_PLANNED_RACE_SUCCESS","LOAD_PLANNED_EXERCISES_SUCCESS","DELETE_PLANNED_EXERCISE","DELETE_PLANNED_EXERCISE_SUCCESS","UPDATE_PLANNED_EXERCISE","UPDATE_PLANNED_EXERCISE_SUCCESS","ADD_PLANNED_EXERCISE","ADD_PLANNED_EXERCISE_SUCCESS","LOAD_COMPLETED_ACTIVITIES","LOAD_COMPLETED_ACTIVITIES_SUCCESS","LOAD_COMPLETED_EXERCISES_SUCCESS","LOAD_ACTIVITY_TYPES_SUCCESS","LOAD_EXERCISE_TYPES_SUCCESS","LOAD_EXERCISE_CATEGORIES_SUCCESS","LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS","COPY_TRAINING_PLAN_TEMPLATE_SUCCESS","LOAD_USER_INFO","LOAD_USER_INFO_SUCCESS","UPDATE_USER_INFO","UPDATE_USER_INFO_SUCCESS","ERROR_ENCOUNTERED","PlannedActivitiesApi","classCallCheck","getPlannedActivities","startDate","endDate","options","method","headers","Authorization","authHeader","endpoint","endpointOrigin","dateFormat","fetch","then","response","ok","json","catch","postPlannedActivities","requestBody","Content-Type","body","mode","accessToken","ls","get","window","location","origin","PlannedActivityApi","patchPlannedActivity","deletePlannedActivity","scope","Error","statusText","PlannedRacesApi","postPlannedRaces","PlannedRaceApi","patchPlannedRace","deletePlannedRace","loadPlannedRacesSuccess","responseData","types","planned_races","addPlannedRace","dispatch","defineProperty","pendingTask","begin","addPlannedRaceSuccess","endAll","end","updatePlannedRace","result","updatePlannedRaceSuccess","_ref2","deletePlannedRaceSuccess","_ref3","PlannedExerciseApi","patchPlannedExercise","deletePlannedExercise","PlannedExercisesApi","postPlannedExercises","loadPlannedExercisesSuccess","planned_exercises","addPlannedExercise","addPlannedExerciseSuccess","updatePlannedExercise","updatePlannedExerciseSuccess","deletePlannedExerciseSuccess","loadPlannedActivities","loadPlannedActivitiesSuccess","planned_activities","addPlannedActivity","addPlannedActivitySuccess","updatePlannedActivity","updatePlannedActivitySuccess","deletePlannedActivitySuccess","_ref4","ActivityTypesApi","getActivityTypes","loadActivityTypes","loadActivityTypesSuccess","exercise_types","loadExerciseTypesSuccess","exerciseCategories","exercise_categories","loadExerciseCategoriesSuccess","activity_types","CalendarDayModal","possibleConstructorReturn","getPrototypeOf","call","togglePlannedActivityForm","setState","showCalendarDayMain","showPlannedActivityForm","showPlannedRaceForm","showPlannedExerciseForm","togglePlannedRaceForm","togglePlannedExerciseForm","handleAddPlannedActivity","plannedActivityFormInitData","handleEditPlannedActivity","handleSavePlannedActivity","JSON","stringify","plannedActivityActions","refresh","handleRemovePlannedActivity","plannedActivityId","handleAddPlannedRace","plannedRaceFormInitData","handleEditPlannedRace","handleSavePlannedRace","console","log","plannedRaceActions","handleRemovePlannedRace","plannedRaceId","handleAddPlannedExercise","selectionType","existingPlannedExerciseId","categories","category","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","exercise","exercise_type_id","plannedExerciseActions","plannedExerciseFormInitData","handleEditPlannedExercise","handleSavePlannedExercise","exercise_category_id","activityTypeActions","handleRemovePlannedExercise","plannedExerciseId","isFutureDate","startOfDay","Date","close","components_CompletedActivitiesList","components_PlannedRacesList","components_CompletedExercisesList","components_PlannedActivitiesList","components_PlannedExercisesList","components_ActivityTypeButtonSet","components_ExerciseTypeButtonSet","components_PlannedActivityForm","components_PlannedRaceForm","components_PlannedExerciseForm","bindActionCreators","TrainingPlanTemplatesApi","getTrainingPlanTemplates","loadTrainingPlanTemplates","loadTrainingPlanTemplatesSuccess","training_plan_templates","copyTrainingPlanTemplate","templateId","template_id","copyTrainingPlanTemplateSuccess","message","TrainingPlanTemplatesContainer","handleAddToTrainingPlan","trainingPlanTemplateActions","renderTemplateDetails","template","link_url","target","rel","link_text","templateDetailsList","trainingPlanTemplates","CompletedActivitiesApi","getCompletedActivities","loadCompletedActivities","loadCompletedActivitiesSuccess","completed_exercises","loadCompletedExercisesSuccess","completed_activities","Calendar","refreshPlannedActivities","currentMonth","startOfWeek","startOfMonth","weekStartsOn","endOfWeek","endOfMonth","refreshCompletedActivities","completedActivityActions","refreshAllActivities","renderHeader","prevMonth","nextMonth","renderDayNames","days","i","addDays","renderPlannedActivityBadge","renderPlannedRaceBadge","renderPlannedExerciseCategoryBadge","renderCompletedActivityBadge","renderCompletedExerciseCategoryBadge","renderCells","_this$state","selectedDate","selectedWeek","today","monthStart","monthEnd","rows","formattedDate","_loop","weekCommencingDay","_loop2","cloneDay","plannedActivityBadges","plannedRaceBadges","plannedExerciseCategoryBadges","completedActivityBadges","backgroundStyle","isRaceDay","backgroundImage","concat","RaceDayBackground","backgroundSize","completedExerciseCategoryBadges","isSameMonth","isSameDay","isBefore","style","onDateClick","parse","has_flexible_planning_enabled","isAfter","plannedWeekActivityBadges","plannedWeekExerciseCategoryBadges","onWeekClick","showCalendarDayModal","showCalendarWeekModal","selectedDatePlannedActivities","document","classList","toggle","weekStartDate","handleCloseCalendarDayModal","newMonth","addMonths","subMonths","src_components_CalendarDayModal","components_TrainingPlanTemplatesContainer","UserApi","getUserInfo","patchUserInfo","loadUserInfo","loadUserInfoSuccess","user_info","updateUserInfo","updateUserInfoSuccess","updated_user_info","EnableFlexiblePlanningButton","handleEnableFlexiblePlanning","userActions","TrainingPlanIntroContainer","components_EnableFlexiblePlanningButton","App","esm","components_TrainingPlanIntroContainer","components_Calendar","rootReducer","combineReducers","formReducer","action","userInfo","updatedUserInfo","pendingTasks","pendingTasksReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","components_App","getElementById"],"mappings":"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","file":"static/js/main.fb358a7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/race-day-bg.6a192603.png\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nclass ActivityTypeButtonSet extends Component {\r\n\r\n    renderActivityTypeButton = (activityType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + activityType.category_key;\r\n        const formInitData = {\r\n            activity_type: activityType.activity_type,\r\n            category_key: activityType.category_key,\r\n            planning_period: this.props.planningPeriod,\r\n            recurrence: \"once\",\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + (this.props.planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <button key={activityType.activity_type} className={buttonClass} onClick={() => this.props.onAdd(formInitData)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {activityType.activity_type}\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    renderPlannedRaceButton = () => {\r\n        const formInitData = {\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            race_type: \"Run\",\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <button key=\"race\" className=\"btn btn-sm ml-1 mr-1 btn-secondary new-exercise-type\" onClick={() => this.props.onAddRace(formInitData)}>\r\n            <i className=\"fa fa-flag-checkered\"></i> Planned Race\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let activityTypes = this.props.activityTypes;\r\n        let activityTypeButtons = activityTypes.map(this.renderActivityTypeButton);\r\n        let plannedRaceButton = this.renderPlannedRaceButton();\r\n        \r\n        return(\r\n            <>\r\n            {activityTypes.length > 0 &&\r\n            <h3>Add Activities</h3>}\r\n            {activityTypeButtons}\r\n            {this.props.planningPeriod === \"day\" && plannedRaceButton}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        activityTypes: state.activityTypes,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nActivityTypeButtonSet = connect(mapStateToProps)(ActivityTypeButtonSet);\r\n\r\nexport default ActivityTypeButtonSet;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ExerciseTypeButtonSet extends Component {\r\n\r\n    renderExerciseTypeButton = (exerciseType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + (exerciseType.category_key ? exerciseType.category_key : \"uncategorised\");\r\n\r\n        return (\r\n            <button key={exerciseType.id} className={buttonClass} onClick={() => this.props.onAdd(exerciseType.id)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {exerciseType.exercise_name}\r\n                <br />\r\n                <small>\r\n                    [{exerciseType.measured_by === \"reps\" && (exerciseType.default_reps + \" reps\")}{exerciseType.measured_by === \"seconds\" && (exerciseType.default_seconds + \" seconds\")}]\r\n                </small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let exerciseTypes = this.props.exerciseTypes;\r\n        let exerciseTypeButtons = exerciseTypes.map(this.renderExerciseTypeButton);\r\n        return(\r\n            <>\r\n            <h3>Add Exercises</h3>\r\n            <button key=\"new\" className=\"btn btn-sm ml-1 mr-1 btn-secondary new-exercise-type\" onClick={() => this.props.onAdd(null)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> New Exercise Type\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n            {exerciseTypeButtons}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        exerciseTypes: state.exerciseTypes\r\n    };\r\n}\r\n\r\nExerciseTypeButtonSet = connect(mapStateToProps)(ExerciseTypeButtonSet);\r\n\r\nexport default ExerciseTypeButtonSet;","import dateFns from \"date-fns\";\r\n\r\nexport function filterPlannedActivities(plannedActivities, day, planningPeriod) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.planned_date === jsonDate && plannedActivity.planning_period === planningPeriod);\r\n    return plannedActivitiesFiltered;\r\n}\r\n\r\nexport function filterPlannedActivitiesById(plannedActivities, id) {\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.id === id);\r\n    return plannedActivitiesFiltered[0];\r\n}\r\n\r\nexport function filterPlannedRaces(plannedRaces, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedRacesFiltered = plannedRaces.filter(plannedRace => plannedRace.planned_date === jsonDate);\r\n    return plannedRacesFiltered;\r\n}\r\n\r\nexport function filterPlannedExercises(plannedExercises, day, planningPeriod) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedExercisesFiltered = plannedExercises.filter(plannedExerciseCategory => plannedExerciseCategory.planned_date === jsonDate && plannedExerciseCategory.planning_period === planningPeriod);\r\n    return plannedExercisesFiltered;\r\n}\r\n\r\nexport function filterCompletedActivities(completedActivities, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const completedActivitiesFiltered = completedActivities.filter(completedActivity => completedActivity.activity_date === jsonDate);\r\n    return completedActivitiesFiltered;\r\n}\r\n\r\nexport function filterCompletedExercises(completedExercises, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const completedExercisesFiltered = completedExercises.filter(completedExerciseCategory => completedExerciseCategory.exercise_date === jsonDate);\r\n    return completedExercisesFiltered;\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { filterCompletedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass CompletedActivitiesList extends Component {\r\n\r\n    renderCompletedActivitySummary = (completedActivity) => {\r\n        const cardClass = \"card \" + completedActivity.category_key + \"_border_only mt-2\";\r\n        const cardHeaderClass = \"card-header \" + completedActivity.category_key;\r\n        const activityUrl = \"/activity_analysis/\" + completedActivity.id;\r\n\r\n        return (\r\n            <div className=\"activity-summary\" key={completedActivity.id}>\r\n                <div className={cardClass}>\r\n                    <div className={cardHeaderClass}>\r\n                        <h6 className=\"m-0 p-0\">\r\n                            <a href={activityUrl}>\r\n                                {completedActivity.name}&nbsp;\r\n                                {completedActivity.is_race && <i className=\"fa fa-flag-checkered\"></i>}\r\n                            </a>\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>When:</small></td>\r\n                                            <td>{completedActivity.activity_date}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Distance:</small></td>\r\n                                            <td>{completedActivity.distance_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Moving Time:</small></td>\r\n                                            <td>{completedActivity.moving_time}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Pace:</small></td>\r\n                                            <td>{completedActivity.average_pace_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Cadence:</small></td>\r\n                                            <td>{completedActivity.average_cadence}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Median Cadence:</small></td>\r\n                                            <td>{completedActivity.median_cadence}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Heart Rate:</small></td>\r\n                                            <td>{completedActivity.average_heartrate}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Elevation Gain:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.total_elevation_gain_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Climbing Gradient:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.average_climbing_gradient_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-3\">\r\n                            <div className=\"col-12\">\r\n                                {completedActivity.description &&\r\n                                <p><small>Description:</small> {completedActivity.description}</p>}\r\n                                <p className=\"mb-1\">\r\n                                    <a href={activityUrl}>Analyse Activity</a> |&nbsp;\r\n                                    <a href={completedActivity.strava_url}>View on Strava</a>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const completedActivities = filterCompletedActivities(this.props.completedActivities, this.props.calendarDay);\r\n        let completedActivitySummaries = completedActivities.map(this.renderCompletedActivitySummary);\r\n\r\n        return (\r\n                <div>\r\n                    {completedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Completed Activities</h3>\r\n                        {completedActivitySummaries}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        completedActivities: state.completedActivities\r\n    };\r\n}\r\n\r\nCompletedActivitiesList = connect(mapStateToProps)(CompletedActivitiesList)\r\n\r\nexport default CompletedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { filterCompletedExercises } from \"../helpers/trainingPlan\";\r\n\r\nclass CompletedExercisesList extends Component {\r\n\r\n    renderCompletedExerciseRow = (completedExercise) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedExercise.category_key;\r\n\r\n        return (\r\n            <tr key={completedExercise.id}>\r\n                <td className=\"name-badge\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <h5><span className={badgeClass}>\r\n                        {completedExercise.exercise_name}\r\n                    </span></h5>\r\n                </div>\r\n                <div className=\"d-inline d-sm-none\">\r\n                    <h5><span className={badgeClass}>\r\n                        {completedExercise.exercise_name.length <= 30 ? completedExercise.exercise_name : completedExercise.exercise_name.substring(0,27) + \"...\" }\r\n                    </span></h5>\r\n                </div>\r\n                </td>\r\n                <td>{completedExercise.exercise_time}</td>\r\n                {completedExercise.measured_by === \"reps\" && (\r\n                    <td>{completedExercise.reps ? completedExercise.reps + \" reps\" : \"\"}</td>\r\n                )}\r\n                {completedExercise.measured_by === \"seconds\" && (\r\n                    <td>{completedExercise.seconds ? completedExercise.seconds + \" secs\" : \"\"}</td>\r\n                )}\r\n            </tr>\r\n        );\r\n    }\r\n   \r\n    render() {\r\n        const completedExerciseCategories = filterCompletedExercises(this.props.completedExercises, this.props.calendarDay);\r\n        let completedExerciseRows = [];\r\n        for (let completedExerciseCategory of completedExerciseCategories) {\r\n            completedExerciseRows.push(completedExerciseCategory.exercises.map(this.renderCompletedExerciseRow));\r\n        }\r\n        return (\r\n                <div>\r\n                    {completedExerciseCategories.length > 0 && (\r\n                        <>\r\n                        <h3>Completed Exercises</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {completedExerciseRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        completedExercises: state.completedExercises\r\n    };\r\n}\r\n\r\nCompletedExercisesList = connect(mapStateToProps)(CompletedExercisesList)\r\n\r\nexport default CompletedExercisesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedRaces } from \"../helpers/trainingPlan\";\r\n\r\nclass PlannedRacesList extends Component {\r\n\r\n    renderPlannedRaceSummary = (plannedRace) => {\r\n        const cardClass = \"card \" + plannedRace.category_key + \"_border_only mt-2\";\r\n        const cardHeaderClass = \"card-header \" + plannedRace.category_key;\r\n\r\n        const formInitData = {\r\n            id: plannedRace.id,\r\n            name: plannedRace.name,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            race_type: plannedRace.race_type,\r\n            distance: plannedRace.distance,\r\n            entry_status: plannedRace.entry_status,\r\n            race_website_url: plannedRace.race_website_url,\r\n            notes: plannedRace.notes,\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <div className=\"activity-summary\" key={plannedRace.id}>\r\n                <div className={cardClass}>\r\n                    <div className={cardHeaderClass}>\r\n                        <h6 className=\"m-0 p-0\">\r\n                            {plannedRace.name}&nbsp;<i className=\"fa fa-flag-checkered\"></i>\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                                <p>Race Type: {plannedRace.race_type}</p>\r\n                                {plannedRace.distance &&\r\n                                <p>Distance: {plannedRace.distance} {this.props.user.distance_uom_preference}</p>}\r\n                                {plannedRace.entry_status &&\r\n                                <p>Entry Status: {plannedRace.entry_status}</p>}\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                {plannedRace.notes &&\r\n                                <p>Notes:<br />{plannedRace.notes}</p>}                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {plannedRace.race_website_url &&\r\n                                <p>Race Website: {plannedRace.race_website_url}</p>}\r\n                                <ul className=\"nav\">\r\n                                    <li className=\"nav-item mr-3\">\r\n                                        <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i> Edit</a>\r\n                                    </li>\r\n                                    <Dropdown as=\"li\" className=\"nav-item\">\r\n                                        <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i> Remove</Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedRace.id, \"all\")}>Confirm Remove</Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const plannedRaces = filterPlannedRaces(this.props.plannedRaces, this.props.calendarDay);\r\n        let plannedRaceSummaries = plannedRaces.map(this.renderPlannedRaceSummary);\r\n\r\n        return (\r\n                <div>\r\n                    {plannedRaces.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Races</h3>\r\n                        {plannedRaceSummaries}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedRaces: state.plannedRaces,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nPlannedRacesList = connect(mapStateToProps)(PlannedRacesList)\r\n\r\nexport default PlannedRacesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass PlannedActivitiesList extends Component {\r\n\r\n    renderPlannedActivityRow = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n        const formInitData = {\r\n            id: plannedActivity.id,\r\n            activity_type: plannedActivity.activity_type,\r\n            category_key: plannedActivity.category_key,\r\n            description: plannedActivity.description,\r\n            planned_distance: plannedActivity.planned_distance,\r\n            recurrence: plannedActivity.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + (plannedActivity.planning_period === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        };\r\n\r\n        return (\r\n            <tr key={plannedActivity.id}>\r\n                <td className=\"name-badge\"><h5><span className={badgeClass}>{plannedActivity.activity_type}</span></h5></td>\r\n                <td>{plannedActivity.planned_distance ? plannedActivity.planned_distance + \" \" + this.props.user.distance_uom_preference : \"\"}</td>\r\n                <td>{plannedActivity.description}</td>\r\n                <td>\r\n                    {plannedActivity.recurrence === \"once\" && \"Once only\"}\r\n                    {plannedActivity.recurrence === \"weekly\" && <>Repeats every {this.props.planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"}</>}\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedActivity.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedActivity.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this {this.props.planningPeriod}</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const plannedActivities = filterPlannedActivities(this.props.plannedActivities, this.props.calendarDay, this.props.planningPeriod);\r\n        let plannedActivityRows = plannedActivities.map(this.renderPlannedActivityRow);\r\n\r\n        return (\r\n                <div>\r\n                    {plannedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Activities</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedActivityRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedActivities: state.plannedActivities,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nPlannedActivitiesList = connect(mapStateToProps)(PlannedActivitiesList)\r\n\r\nexport default PlannedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedExercises } from \"../helpers/trainingPlan\";\r\n// import * as plannedExerciseActions from \"../actions/plannedActivityActions\";\r\n\r\nclass PlannedExercisesList extends Component {\r\n\r\n    renderPlannedExerciseRow = (plannedExercise) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExercise.category_key;\r\n        const formInitData = {\r\n            id: plannedExercise.id,\r\n            exercise_name: plannedExercise.exercise_name,\r\n            category_name: plannedExercise.category_name,\r\n            category_key: plannedExercise.category_key,\r\n            planned_sets: plannedExercise.planned_sets,\r\n            measured_by: plannedExercise.measured_by,\r\n            planned_reps: plannedExercise.planned_reps,\r\n            planned_seconds: plannedExercise.planned_seconds,\r\n            recurrence: plannedExercise.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + (plannedExercise.planning_period === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n        }\r\n\r\n        return (\r\n            <tr key={plannedExercise.id}>\r\n                <td className=\"name-badge\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name}\r\n                    </span></h5>\r\n                </div>\r\n                <div className=\"d-inline d-sm-none\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name.length <= 20 ? plannedExercise.exercise_name : plannedExercise.exercise_name.substring(0,17) + \"...\" }\r\n                    </span></h5>\r\n                </div>\r\n                </td>\r\n                <td>{plannedExercise.planned_sets ? plannedExercise.planned_sets + \" sets\" : \"\"}</td>\r\n                {plannedExercise.measured_by === \"reps\" && (\r\n                    <td>{plannedExercise.planned_reps ? plannedExercise.planned_reps + \" reps\" : \"\"}</td>\r\n                )}\r\n                {plannedExercise.measured_by === \"seconds\" && (\r\n                    <td>{plannedExercise.planned_seconds ? plannedExercise.planned_seconds + \" secs\" : \"\"}</td>\r\n                )}\r\n                <td>\r\n                    <div className=\"d-none d-sm-inline\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once only\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && <>Repeats every {this.props.planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"}</>}\r\n                    </div>\r\n                    <div className=\"d-inline d-sm-none\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && \"Weekly\"}\r\n                    </div>\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedExercise.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedExercise.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this {this.props.planningPeriod}</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n   \r\n    render() {\r\n        const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, this.props.calendarDay, this.props.planningPeriod);\r\n        let plannedExerciseRows = [];\r\n        for (let plannedExerciseCategory of plannedExerciseCategories) {\r\n            plannedExerciseRows.push(plannedExerciseCategory.exercises.map(this.renderPlannedExerciseRow));\r\n        }\r\n        return (\r\n                <div>\r\n                    {plannedExerciseCategories.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Exercises</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedExerciseRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises\r\n    };\r\n}\r\n\r\nPlannedExercisesList = connect(mapStateToProps)(PlannedExercisesList)\r\n\r\nexport default PlannedExercisesList;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nclass PlannedActivityForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\"><small>Activity Type:</small> <span className={badgeClass}>{initData.activity_type}</span></h4>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"once\">Once only</option>\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"description\">Description</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"description\" name=\"description\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"planned_distance\">Planned Distance ({initData.distance_uom_preference})</label>\r\n                    <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_distance\" name=\"planned_distance\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Activity</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nPlannedActivityForm = reduxForm({\r\n    form: \"plannedActivity\"\r\n})(PlannedActivityForm);\r\n\r\nexport default PlannedActivityForm;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nclass PlannedRaceForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\">New Planned Race</h4>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"name\">Name of Race</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"race_type\">Race Type</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"race_type\" name=\"race_type\">\r\n                        <option value=\"Run\">Run</option>\r\n                        <option value=\"Ride\">Ride</option>\r\n                        <option value=\"Swim\">Swim</option>\r\n                        <option value=\"Triathlon\">Triathlon</option>\r\n                        <option value=\"Duathlon\">Duathlon</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"distance\">Distance ({initData.distance_uom_preference})</label>\r\n                    <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"distance\" name=\"distance\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"entry_status\">Entry Status</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"entry_status\" name=\"entry_status\">\r\n                        <option value=\"\">(optional)</option>\r\n                        <option value=\"Entered\">Entered</option>\r\n                        <option value=\"Probable\">Probable</option>\r\n                        <option value=\"Possible\">Possible</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"race_website_url\">Race Website URL</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"race_website_url\" name=\"race_website_url\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"notes\">Notes</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"notes\" name=\"notes\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Race</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nPlannedRaceForm = reduxForm({\r\n    form: \"plannedRace\"\r\n})(PlannedRaceForm);\r\n\r\nexport default PlannedRaceForm;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field, formValueSelector } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass PlannedExerciseForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    renderCategorySelectOption = (categoryOption) => {\r\n        return (\r\n            <option key={categoryOption.id} value={categoryOption.id}>{categoryOption.category_name}</option>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n        let categorySelectOptions;\r\n\r\n        if (initData.isNewExerciseType) {\r\n            categorySelectOptions = initData.categoryOptions.map(this.renderCategorySelectOption);\r\n        }\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\">{initData.exercise_name} <span className={badgeClass}>{initData.category_name}</span></h4>\r\n                {initData.isNewExerciseType && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <Field component={renderField} type=\"text\" id=\"exercise_name\" name=\"exercise_name\" label=\"Exercise Name\" />\r\n                    </div>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"measured_by\">Measured By</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"measured_by\" name=\"measured_by\">\r\n                            <option value=\"reps\">Reps</option>\r\n                            <option value=\"seconds\">Time (seconds)</option>\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"reps\") || this.props.measuredByValue === \"reps\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_reps\">Reps (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_reps\" name=\"planned_reps\" />\r\n                    </div>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"seconds\") || this.props.measuredByValue === \"seconds\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_seconds\">Seconds (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_seconds\" name=\"planned_seconds\" />\r\n                    </div>\r\n                )}\r\n                <div className=\"form-group \">\r\n                    <Field component={renderField} type=\"number\" id=\"planned_sets\" name=\"planned_sets\" label=\"Planned Sets\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                        <option value=\"once\">Once only</option>\r\n                    </Field>\r\n                </div>\r\n                {initData.isNewExerciseType && initData.categoryOptions && initData.categoryOptions.length > 0 && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"exercise_category_id\">Category</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"exercise_category_id\" name=\"exercise_category_id\">\r\n                            {categorySelectOptions}\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Exercise</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nconst validate = (values) => {\r\n    let errors = {};\r\n    if (Number(values.planned_sets) <= 0) {\r\n        errors.planned_sets = \"Planned Sets must be at least 1.\"\r\n    } \r\n    return errors;\r\n}\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => {\r\n    return (\r\n        <div>\r\n            <label className=\"form-control-label\">{label}</label>\r\n            <div>\r\n            <input className=\"form-control\" {...input} type={type}/>\r\n            {touched && ((error && <div className=\"error mt-1\">{error}</div>) || (warning && <span>{warning}</span>))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nPlannedExerciseForm = reduxForm({\r\n    form: \"plannedExercise\",\r\n    validate\r\n})(PlannedExerciseForm);\r\n\r\n// we want access to other form values\r\nconst selector = formValueSelector(\"plannedExercise\");\r\nPlannedExerciseForm = connect(\r\n    (state) => {\r\n        const measuredByValue = selector(state, 'measured_by')\r\n        return { measuredByValue };\r\n    }\r\n)(PlannedExerciseForm)\r\n\r\nexport default PlannedExerciseForm;","export const LOAD_PLANNED_ACTIVITIES = \"LOAD_PLANNED_ACTIVITIES\";\r\nexport const LOAD_PLANNED_ACTIVITIES_SUCCESS = \"LOAD_PLANNED_ACTIVITIES_SUCCESS\";\r\nexport const DELETE_PLANNED_ACTIVITY = \"DELETE_PLANNED_ACTIVITY\";\r\nexport const DELETE_PLANNED_ACTIVITY_SUCCESS = \"DELETE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const UPDATE_PLANNED_ACTIVITY = \"UPDATE_PLANNED_ACTIVITY\";\r\nexport const UPDATE_PLANNED_ACTIVITY_SUCCESS = \"UPDATE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const ADD_PLANNED_ACTIVITY = \"ADD_PLANNED_ACTIVITY\";\r\nexport const ADD_PLANNED_ACTIVITY_SUCCESS = \"ADD_PLANNED_ACTIVITY_SUCCESS\";\r\n\r\nexport const LOAD_PLANNED_RACES = \"LOAD_PLANNED_RACES\";\r\nexport const LOAD_PLANNED_RACES_SUCCESS = \"LOAD_PLANNED_RACES_SUCCESS\";\r\nexport const DELETE_PLANNED_RACE = \"DELETE_PLANNED_RACE\";\r\nexport const DELETE_PLANNED_RACE_SUCCESS = \"DELETE_PLANNED_RACE_SUCCESS\";\r\nexport const UPDATE_PLANNED_RACE = \"UPDATE_PLANNED_RACE\";\r\nexport const UPDATE_PLANNED_RACE_SUCCESS = \"UPDATE_PLANNED_RACE_SUCCESS\";\r\nexport const ADD_PLANNED_RACE = \"ADD_PLANNED_RACE\";\r\nexport const ADD_PLANNED_RACE_SUCCESS = \"ADD_PLANNED_RACE_SUCCESS\";\r\n\r\nexport const LOAD_PLANNED_EXERCISES = \"LOAD_PLANNED_EXERCISES\";\r\nexport const LOAD_PLANNED_EXERCISES_SUCCESS = \"LOAD_PLANNED_EXERCISES_SUCCESS\";\r\nexport const DELETE_PLANNED_EXERCISE = \"DELETE_PLANNED_EXERCISE\";\r\nexport const DELETE_PLANNED_EXERCISE_SUCCESS = \"DELETE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const UPDATE_PLANNED_EXERCISE = \"UPDATE_PLANNED_EXERCISE\";\r\nexport const UPDATE_PLANNED_EXERCISE_SUCCESS = \"UPDATE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const ADD_PLANNED_EXERCISE = \"ADD_PLANNED_EXERCISE\";\r\nexport const ADD_PLANNED_EXERCISE_SUCCESS = \"ADD_PLANNED_EXERCISE_SUCCESS\";\r\n\r\nexport const LOAD_COMPLETED_ACTIVITIES = \"LOAD_COMPLETED_ACTIVITIES\";\r\nexport const LOAD_COMPLETED_ACTIVITIES_SUCCESS = \"LOAD_COMPLETED_ACTIVITIES_SUCCESS\";\r\n\r\nexport const LOAD_COMPLETED_EXERCISES = \"LOAD_COMPLETED_EXERCISES\";\r\nexport const LOAD_COMPLETED_EXERCISES_SUCCESS = \"LOAD_COMPLETED_EXERCISES_SUCCESS\";\r\n\r\nexport const LOAD_ACTIVITY_TYPES = \"LOAD_ACTIVITY_TYPES\";\r\nexport const LOAD_ACTIVITY_TYPES_SUCCESS = \"LOAD_ACTIVITY_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_TYPES = \"LOAD_EXERCISE_TYPES\";\r\nexport const LOAD_EXERCISE_TYPES_SUCCESS = \"LOAD_EXERCISE_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_CATEGORIES = \"LOAD_EXERCISE_CATEGORIES\";\r\nexport const LOAD_EXERCISE_CATEGORIES_SUCCESS = \"LOAD_EXERCISE_CATEGORIES_SUCCESS\";\r\n\r\nexport const LOAD_TRAINING_PLAN_TEMPLATES = \"LOAD_TRAINING_PLAN_TEMPLATES\";\r\nexport const LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS = \"LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS\";\r\nexport const COPY_TRAINING_PLAN_TEMPLATE = \"COPY_TRAINING_PLAN_TEMPLATE\";\r\nexport const COPY_TRAINING_PLAN_TEMPLATE_SUCCESS = \"COPY_TRAINING_PLAN_TEMPLATE_SUCCESS\";\r\n\r\nexport const LOAD_USER_INFO = \"LOAD_USER_INFO\";\r\nexport const LOAD_USER_INFO_SUCCESS = \"LOAD_USER_INFO_SUCCESS\";\r\nexport const UPDATE_USER_INFO = \"UPDATE_USER_INFO\";\r\nexport const UPDATE_USER_INFO_SUCCESS = \"UPDATE_USER_INFO_SUCCESS\";\r\n\r\nexport const ERROR_ENCOUNTERED = \"ERROR_ENCOUNTERED\";","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass PlannedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getPlannedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n    \r\n    postPlannedActivities = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivitiesApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedActivityApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedActivity = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedActivity = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id + \"?scope=\" + scope;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivityApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedRacesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    postPlannedRaces = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_races\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedRacesApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedRaceApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedRace = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_race/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedRace = (id) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_race/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedRaceApi;","import { pendingTask, begin, end, endAll } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport PlannedRacesApi from \"../api/PlannedRacesApi\";\r\nimport PlannedRaceApi from \"../api/PlannedRaceApi\";\r\n\r\nexport function loadPlannedRacesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_RACES_SUCCESS,\r\n        plannedRaces: responseData.planned_races\r\n    };\r\n}\r\n\r\nexport function addPlannedRace(requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedRacesApi();\r\n        return api.postPlannedRaces(requestBody).then(responseData => {\r\n            dispatch(addPlannedRaceSuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedRaceSuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_RACE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedRace(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedRaceApi();\r\n        return api.patchPlannedRace(id, requestBody).then(result => {\r\n            dispatch(updatePlannedRaceSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedRaceSuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_RACE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedRace(id) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.DELETE_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedRaceApi();\r\n        return api.deletePlannedRace(id).then(result => {\r\n            dispatch(deletePlannedRaceSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedRaceSuccess(id) {\r\n    return {\r\n        type: types.DELETE_PLANNED_RACE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        deletedId: id\r\n    };\r\n}","import ls from \"local-storage\";\r\n                \r\nclass PlannedExerciseApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedExercise = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedExercise = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id + \"?scope=\" + scope;\r\n        \r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExerciseApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedExercisesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    postPlannedExercises = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercises\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExercisesApi","import { pendingTask, begin, end, endAll } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport PlannedExerciseApi from \"../api/PlannedExerciseApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadPlannedExercisesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_EXERCISES_SUCCESS,\r\n        plannedExercises: responseData.planned_exercises\r\n    };\r\n}\r\n\r\nexport function addPlannedExercise(requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_EXERCISE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(addPlannedExerciseSuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedExerciseSuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_EXERCISE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedExercise(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_PLANNED_EXERCISE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExerciseApi();\r\n        return api.patchPlannedExercise(id, requestBody).then(result => {\r\n            dispatch(updatePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedExerciseSuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_EXERCISE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedExercise(id, scope) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.DELETE_PLANNED_EXERCISE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExerciseApi();\r\n        return api.deletePlannedExercise(id, scope).then(result => {\r\n            dispatch(deletePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedExerciseSuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_EXERCISE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import { pendingTask, begin, end, endAll } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport PlannedActivitiesApi from \"../api/PlannedActivitiesApi\";\r\nimport PlannedActivityApi from \"../api/PlannedActivityApi\";\r\nimport { loadPlannedRacesSuccess } from \"./plannedRaceActions\";\r\nimport { loadPlannedExercisesSuccess } from \"./plannedExerciseActions\";\r\n\r\nexport function loadPlannedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_PLANNED_ACTIVITIES,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivitiesApi();\r\n        return api.getPlannedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadPlannedActivitiesSuccess(responseData));\r\n                dispatch(loadPlannedRacesSuccess(responseData));\r\n                dispatch(loadPlannedExercisesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadPlannedActivitiesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_ACTIVITIES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        plannedActivities: responseData.planned_activities\r\n    };\r\n}\r\n\r\nexport function addPlannedActivity(requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_ACTIVITY,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivitiesApi();\r\n        return api.postPlannedActivities(requestBody).then(responseData => {\r\n            dispatch(addPlannedActivitySuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedActivitySuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_ACTIVITY_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedActivity(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_PLANNED_ACTIVITY,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivityApi();\r\n        return api.patchPlannedActivity(id, requestBody).then(result => {\r\n            dispatch(updatePlannedActivitySuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedActivitySuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_ACTIVITY_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedActivity(id, scope) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.DELETE_PLANNED_ACTIVITY,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivityApi();\r\n        return api.deletePlannedActivity(id, scope).then(result => {\r\n            dispatch(deletePlannedActivitySuccess(id, scope));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedActivitySuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_ACTIVITY_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import ls from \"local-storage\";\r\n                \r\nclass ActivityTypesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getActivityTypes = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/activity_types\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default ActivityTypesApi;","import * as types from \"./actionTypes\";\r\nimport ActivityTypesApi from \"../api/ActivityTypesApi\";\r\nimport { loadExerciseTypesSuccess } from \"./exerciseTypeActions\"\r\nimport { loadExerciseCategoriesSuccess } from \"./exerciseCategoryActions\"\r\n\r\nexport function loadActivityTypes() {\r\n    return function(dispatch) {\r\n        const api = new ActivityTypesApi();\r\n        return api.getActivityTypes().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadActivityTypesSuccess(responseData));\r\n                dispatch(loadExerciseTypesSuccess(responseData));\r\n                dispatch(loadExerciseCategoriesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadActivityTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_ACTIVITY_TYPES_SUCCESS,\r\n        activityTypes: responseData.activity_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_TYPES_SUCCESS,\r\n        exerciseTypes: responseData.exercise_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseCategoriesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_CATEGORIES_SUCCESS,\r\n        exerciseCategories: responseData.exercise_categories\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport dateFns from \"date-fns\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport \"./CalendarDayModal.css\";\r\nimport ActivityTypeButtonSet from \"./ActivityTypeButtonSet\";\r\nimport ExerciseTypeButtonSet from \"./ExerciseTypeButtonSet\";\r\nimport CompletedActivitiesList from \"./CompletedActivitiesList\";\r\nimport CompletedExercisesList from \"./CompletedExercisesList\";\r\nimport PlannedRacesList from \"./PlannedRacesList\";\r\nimport PlannedActivitiesList from \"./PlannedActivitiesList\";\r\nimport PlannedExercisesList from \"./PlannedExercisesList\";\r\nimport PlannedActivityForm from \"./PlannedActivityForm\";\r\nimport PlannedRaceForm from \"./PlannedRaceForm\";\r\nimport PlannedExerciseForm from \"./PlannedExerciseForm\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as plannedRaceActions from \"../actions/plannedRaceActions\";\r\nimport * as plannedExerciseActions from \"../actions/plannedExerciseActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass CalendarDayModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCalendarDayMain: true,\r\n            showPlannedActivityForm: false,\r\n            showPlannedRaceForm: false,\r\n            showPlannedExerciseForm: false,\r\n            isFutureDate: (props.calendarDay >= dateFns.startOfDay(new Date())),\r\n            plannedActivities: props.plannedActivities\r\n        }\r\n    }\r\n\r\n    togglePlannedActivityForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedActivityForm: !this.state.showPlannedActivityForm,\r\n            showPlannedRaceForm: false,\r\n            showPlannedExerciseForm: false\r\n        })\r\n    }\r\n\r\n    togglePlannedRaceForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedRaceForm: !this.state.showPlannedRaceForm,\r\n            showPlannedActivityForm: false,\r\n            showPlannedExerciseForm: false\r\n        })\r\n    }\r\n\r\n    togglePlannedExerciseForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedExerciseForm: !this.state.showPlannedExerciseForm,\r\n            showPlannedActivityForm: false,\r\n            showPlannedRaceForm: false\r\n        })\r\n    }\r\n\r\n    // Planned Activity CRUD operations\r\n    handleAddPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleEditPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleSavePlannedActivity = (values) => {\r\n        const requestBody = JSON.stringify({ \r\n            activity_type: values.activity_type,\r\n            planned_date: values.planned_date,\r\n            planning_period: values.planning_period,\r\n            recurrence: values.recurrence,\r\n            description: values.description,\r\n            planned_distance: values.planned_distance\r\n        })\r\n        if (values.id) {\r\n            this.props.plannedActivityActions.updatePlannedActivity(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            this.props.plannedActivityActions.addPlannedActivity(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        }\r\n        this.togglePlannedActivityForm();\r\n    }\r\n    \r\n    handleRemovePlannedActivity = (plannedActivityId, scope) => {\r\n        this.props.plannedActivityActions.deletePlannedActivity(plannedActivityId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    // Planned Race CRUD operations\r\n    handleAddPlannedRace = (formInitData) => {\r\n        this.setState({\r\n            plannedRaceFormInitData: formInitData\r\n        });\r\n        this.togglePlannedRaceForm();\r\n    }\r\n\r\n    handleEditPlannedRace = (formInitData) => {\r\n        this.setState({\r\n            plannedRaceFormInitData: formInitData\r\n        });\r\n        this.togglePlannedRaceForm();\r\n    }\r\n\r\n    handleSavePlannedRace = (values) => {\r\n        const requestBody = JSON.stringify({ \r\n            name: values.name,\r\n            planned_date: values.planned_date,\r\n            race_type: values.race_type,\r\n            distance: values.distance,\r\n            entry_status: values.entry_status,\r\n            race_website_url: values.race_website_url,\r\n            notes: values.notes\r\n        });\r\n        console.log(requestBody);\r\n        if (values.id) {\r\n            this.props.plannedRaceActions.updatePlannedRace(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            this.props.plannedRaceActions.addPlannedRace(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        }\r\n        this.togglePlannedRaceForm();\r\n    }\r\n    \r\n    handleRemovePlannedRace = (plannedRaceId) => {\r\n        this.props.plannedRaceActions.deletePlannedRace(plannedRaceId).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    // CRUD operations for planned exercises\r\n    handleAddPlannedExercise = (id) => {\r\n        const calendarDay = dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\");\r\n        const planningPeriod = this.props.selectionType;\r\n\r\n        if (!id) {\r\n            const formInitData = {\r\n                isNewExerciseType: true,\r\n                measured_by: \"reps\",\r\n                planned_sets: 1,\r\n                planning_period: planningPeriod,\r\n                recurrence: \"weekly\",\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n                repeatOption: \"Repeat every \" + (planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n                categoryOptions: this.props.exerciseCategories\r\n            }\r\n            this.setState({\r\n                plannedExerciseFormInitData: formInitData\r\n            });\r\n            this.togglePlannedExerciseForm();\r\n        } else {\r\n            const categories = this.props.plannedExercises.filter(function(plannedExercise) {\r\n                return plannedExercise.planned_date === calendarDay && plannedExercise.planning_period === planningPeriod;\r\n            });\r\n\r\n            let requestBody;\r\n            let existingPlannedExerciseId;\r\n            for (let category of categories) {\r\n                for (let exercise of category.exercises) {\r\n                    if (exercise.exercise_type_id === id) {\r\n                        existingPlannedExerciseId = exercise.id;\r\n                        requestBody = JSON.stringify({ \r\n                            planning_period: planningPeriod,\r\n                            recurrence: exercise.recurrence,\r\n                            planned_date: calendarDay,\r\n                            planned_sets: (exercise.planned_sets + 1),\r\n                            planned_reps: exercise.planned_reps,\r\n                            planned_seconds: exercise.planned_seconds\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (existingPlannedExerciseId) {\r\n                this.props.plannedExerciseActions.updatePlannedExercise(existingPlannedExerciseId, requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });\r\n            } else {\r\n                const exerciseType = this.props.exerciseTypes.filter(function(exerciseType) {\r\n                    return exerciseType.id === id;\r\n                })[0];\r\n                requestBody = JSON.stringify({\r\n                    exercise_type_id: id,\r\n                    planning_period: planningPeriod,\r\n                    recurrence: \"weekly\",\r\n                    planned_date: calendarDay,\r\n                    planned_reps: exerciseType.default_reps,\r\n                    planned_seconds: exerciseType.default_seconds\r\n                });\r\n                console.log(requestBody);\r\n                this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });                \r\n            }\r\n        }\r\n    }\r\n\r\n    handleEditPlannedExercise = (formInitData) => {\r\n        this.setState({\r\n            plannedExerciseFormInitData: formInitData\r\n        });\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleSavePlannedExercise = (values) => {\r\n        if (values.id) {\r\n            const requestBody = JSON.stringify({ \r\n                planned_date: values.planned_date,\r\n                planning_period: values.planning_period,\r\n                recurrence: values.recurrence,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds\r\n            });\r\n            this.props.plannedExerciseActions.updatePlannedExercise(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            const requestBody = JSON.stringify({\r\n                exercise_name: values.exercise_name,\r\n                measured_by: values.measured_by,\r\n                exercise_category_id: values.exercise_category_id,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds,\r\n                planning_period: values.planning_period,\r\n                recurrence: values.recurrence,\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\")\r\n            });\r\n            this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n                // we need to refresh buttons too\r\n                this.props.activityTypeActions.loadActivityTypes();\r\n            });\r\n        }\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleRemovePlannedExercise = (plannedExerciseId, scope) => {\r\n        this.props.plannedExerciseActions.deletePlannedExercise(plannedExerciseId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const dateFormatFull = \"dddd DD MMMM YYYY\";\r\n        const dateFormatAbbrev = \"ddd DD MMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"modal-back-drop\">\r\n                <div className=\"modal-wrapper\">\r\n                    <div className=\"calendar-modal-header\">\r\n                        <div className=\"d-none d-sm-inline\">\r\n                            <h4>\r\n                                {this.props.selectionType === \"week\" && \"Week of \"}\r\n                                {dateFns.format(this.props.calendarDay, dateFormatFull)}\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"d-inline d-sm-none\">\r\n                            <h4>\r\n                                {this.props.selectionType === \"week\" && \"w/c \"}\r\n                                {dateFns.format(this.props.calendarDay, dateFormatAbbrev)}\r\n                            </h4>\r\n                        </div>\r\n                        <span className=\"close-modal-btn\" onClick={this.props.close}><i className=\"fa fa-window-close\"></i></span>\r\n                    </div>\r\n                    <div className=\"calendar-modal-body\">\r\n                        <div>\r\n                            {this.props.selectionType === \"week\" &&\r\n                            <div className=\"alert alert-info text-left\">These are activities and exercises that you can do on any day during the week. To add for a specific day click on that day in the calendar instead.</div>}\r\n                            {this.state.showCalendarDayMain &&\r\n                            <>\r\n                                {this.props.selectionType === \"day\" &&\r\n                                <>\r\n                                <CompletedActivitiesList calendarDay={this.props.calendarDay} />\r\n                                <PlannedRacesList calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedRace} onRemove={this.handleRemovePlannedRace} />\r\n                                <CompletedExercisesList calendarDay={this.props.calendarDay} />\r\n                                </>}\r\n                                <PlannedActivitiesList planningPeriod={this.props.selectionType} calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedActivity} onRemove={this.handleRemovePlannedActivity} />\r\n                                <PlannedExercisesList planningPeriod={this.props.selectionType} calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedExercise} onRemove={this.handleRemovePlannedExercise} />\r\n                                {(this.state.isFutureDate || this.props.selectionType === \"week\") &&\r\n                                <>\r\n                                    <ActivityTypeButtonSet planningPeriod={this.props.selectionType} calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedActivity} onAddRace={this.handleAddPlannedRace} />\r\n                                    <ExerciseTypeButtonSet calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedExercise} />\r\n                                </>}\r\n                            </>}\r\n                            {this.state.showPlannedActivityForm &&\r\n                            <PlannedActivityForm initData={this.state.plannedActivityFormInitData} onSubmit={this.handleSavePlannedActivity} handleBackClick={this.togglePlannedActivityForm} />}\r\n                            {this.state.showPlannedRaceForm &&\r\n                            <PlannedRaceForm initData={this.state.plannedRaceFormInitData} onSubmit={this.handleSavePlannedRace} handleBackClick={this.togglePlannedRaceForm} />}\r\n                            {this.state.showPlannedExerciseForm &&\r\n                            <PlannedExerciseForm initData={this.state.plannedExerciseFormInitData} onSubmit={this.handleSavePlannedExercise} handleBackClick={this.togglePlannedExerciseForm} />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises,\r\n        exerciseTypes: state.exerciseTypes,\r\n        exerciseCategories: state.exerciseCategories\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        plannedRaceActions: bindActionCreators(plannedRaceActions, dispatch),\r\n        plannedExerciseActions: bindActionCreators(plannedExerciseActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarDayModal);","class TrainingPlanTemplatesApi {\r\n    constructor() {\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getTrainingPlanTemplates = () => {\r\n        const options = {\r\n            method: \"GET\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/training_plan_templates\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrainingPlanTemplatesApi;","import { pendingTask, begin, end, endAll } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport TrainingPlanTemplatesApi from \"../api/TrainingPlanTemplatesApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadTrainingPlanTemplates() {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new TrainingPlanTemplatesApi();\r\n        return api.getTrainingPlanTemplates().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadTrainingPlanTemplatesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadTrainingPlanTemplatesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        trainingPlanTemplates: responseData.training_plan_templates\r\n    };\r\n}\r\n\r\nexport function copyTrainingPlanTemplate(templateId) {\r\n    const requestBody = JSON.stringify({\r\n        template_id: templateId\r\n    });\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(copyTrainingPlanTemplateSuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function copyTrainingPlanTemplateSuccess(responseData) {\r\n    return {\r\n        type: types.COPY_TRAINING_PLAN_TEMPLATE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        message: responseData.message\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport * as trainingPlanTemplateActions from \"../actions/trainingPlanTemplateActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass TrainingPlanTemplatesContainer extends Component {  \r\n\r\n    componentDidMount() {\r\n        this.props.trainingPlanTemplateActions.loadTrainingPlanTemplates();\r\n    }\r\n\r\n    handleAddToTrainingPlan = (templateId) => {\r\n        this.props.trainingPlanTemplateActions.copyTrainingPlanTemplate(templateId).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n            this.props.activityTypeActions.loadActivityTypes();\r\n        });\r\n    }\r\n\r\n    renderTemplateDetails = (template) => {\r\n        return (\r\n            <div key={template.id}>\r\n                <hr />\r\n                <div className=\"alert alert-info\">\r\n                    <h6>{template.name} [<a href=\"#add\" onClick={() => this.handleAddToTrainingPlan(template.id)}>Add to Training Plan</a>]</h6>\r\n                    <p>{template.description} <a href={template.link_url} target=\"_blank\" rel=\"noopener noreferrer\">{template.link_text}</a></p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let templates = this.props.trainingPlanTemplates;\r\n        let templateDetailsList = templates.map(this.renderTemplateDetails);\r\n\r\n        return (\r\n            <div className=\"card mt-4\">\r\n                <div className=\"card-header\">\r\n                    <h4>Get started using a template</h4>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <p>If you're looking for somewhere to start with creating your personalised training plan,\r\n                        try one of these templates to populate some initial exercises, and then adapt as required.\r\n                        Let us know via <a href=\"mailto:feedback@trainingticks.com\">feedback@trainingticks.com</a> if there's\r\n                        a training plan you've come across that you'd like to be available as a template.</p>\r\n                    <p><i>Please note that Training Ticks has no association with any of the websites or authors referenced below.\r\n                    We are sharing them as useful resources that will hopefully help your training.</i></p>\r\n                    {templateDetailsList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        trainingPlanTemplates: state.trainingPlanTemplates\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        trainingPlanTemplateActions: bindActionCreators(trainingPlanTemplateActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nTrainingPlanTemplatesContainer = connect(mapStateToProps, mapDispatchToProps)(TrainingPlanTemplatesContainer);\r\n\r\nexport default TrainingPlanTemplatesContainer;","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass CompletedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getCompletedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/completed_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default CompletedActivitiesApi;","import { pendingTask, begin, end, endAll } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport CompletedActivitiesApi from \"../api/CompletedActivitiesApi\";\r\nimport { loadCompletedExercisesSuccess } from \"./completedExerciseActions\";\r\n\r\nexport function loadCompletedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_COMPLETED_ACTIVITIES,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new CompletedActivitiesApi();\r\n        return api.getCompletedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadCompletedActivitiesSuccess(responseData));\r\n                dispatch(loadCompletedExercisesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadCompletedActivitiesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_COMPLETED_ACTIVITIES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        completedActivities: responseData.completed_activities\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadCompletedExercisesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_COMPLETED_EXERCISES_SUCCESS,\r\n        completedExercises: responseData.completed_exercises\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport CalendarDayModal from \"./CalendarDayModal\";\r\nimport TrainingPlanTemplatesContainer from \"./TrainingPlanTemplatesContainer\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as completedActivityActions from \"../actions/completedActivityActions\";\r\nimport { filterPlannedActivities, filterPlannedRaces, filterPlannedExercises, filterCompletedActivities, filterCompletedExercises } from \"../helpers/trainingPlan\";\r\nimport RaceDayBackground from '../static/img/race-day-bg.png';\r\n\r\nclass Calendar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentMonth: new Date(),\r\n            today: new Date(),\r\n            selectedDate: new Date(),\r\n            selectedWeek: null,\r\n            showCalendarDayModal: false\r\n        };\r\n    }\r\n\r\n    refreshPlannedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.plannedActivityActions.loadPlannedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshCompletedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.completedActivityActions.loadCompletedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshAllActivities = (currentMonth) => {\r\n        this.refreshPlannedActivities(currentMonth);\r\n        this.refreshCompletedActivities(currentMonth);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshAllActivities(this.state.currentMonth);\r\n    }\r\n\r\n    renderHeader = () => {\r\n        const dateFormat = \"MMMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"header row flex-middle\">\r\n                <div className=\"col col-start\">\r\n                    <div className=\"icon\" onClick={this.prevMonth}>\r\n                        chevron_left\r\n                    </div>\r\n                </div>\r\n                <div className=\"col col-center\">\r\n                    <span>\r\n                        {dateFns.format(this.state.currentMonth, dateFormat)}\r\n                    </span>\r\n                </div>\r\n                <div className=\"col col-end\" onClick={this.nextMonth}>\r\n                    <div className=\"icon\">chevron_right</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDayNames = () => {\r\n        const dateFormatFull = \"dddd\";\r\n        const dateFormatAbbrev = \"ddd\";\r\n        const days = [];\r\n\r\n        let startDate = dateFns.startOfWeek(this.state.currentMonth, {weekStartsOn: 1});\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <div className=\"col col-center\" key={i}>\r\n                    <div className=\"d-none d-md-block\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatFull)}\r\n                    </div>\r\n                    <div className=\"d-block d-md-none\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatAbbrev)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"days row\">\r\n                {days}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedActivityBadge = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n\r\n        return (\r\n            <div key={plannedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedActivity.activity_type}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none \">\r\n                    <span className={badgeClass}>{plannedActivity.activity_type[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedRaceBadge = (plannedRace) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedRace.category_key;\r\n\r\n        return (\r\n            <div key={plannedRace.id} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}>{plannedRace.name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedExerciseCategoryBadge = (plannedExerciseCategory) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExerciseCategory.category_key;\r\n\r\n        return (\r\n            <div key={plannedExerciseCategory.category_key + plannedExerciseCategory.planned_date} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedActivityBadge = (completedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedActivity.category_key;\r\n\r\n        return (\r\n            <div key={completedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}><div className=\"d-none d-md-inline\"><i className=\"fa fa-check\"></i></div> {completedActivity.name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedExerciseCategoryBadge = (completedExerciseCategory) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedExerciseCategory.category_key;\r\n\r\n        return (\r\n            <div key={completedExerciseCategory.category_key + completedExerciseCategory.exercise_date} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}><div className=\"d-none d-md-inline\"><i className=\"fa fa-check\"></i></div> {completedExerciseCategory.category_name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCells = () => {\r\n        const { currentMonth, selectedDate, selectedWeek, today } = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart, {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(monthEnd, {weekStartsOn: 1});\r\n        const dateFormat = \"D\";\r\n        \r\n        let rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n\r\n        while (day <= endDate) {\r\n            const weekCommencingDay = day;\r\n\r\n            for (let i = 0; i < 7; i++) {\r\n\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cloneDay = day;\r\n\r\n                const plannedActivities = filterPlannedActivities(this.props.plannedActivities, day, \"day\");\r\n                const plannedActivityBadges = plannedActivities.map(this.renderPlannedActivityBadge);\r\n\r\n                const plannedRaces = filterPlannedRaces(this.props.plannedRaces, day);\r\n                const plannedRaceBadges = plannedRaces.map(this.renderPlannedRaceBadge);\r\n\r\n                const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, day, \"day\");\r\n                const plannedExerciseCategoryBadges = plannedExerciseCategories.map(this.renderPlannedExerciseCategoryBadge);\r\n\r\n                const completedActivities = filterCompletedActivities(this.props.completedActivities, day);\r\n                const completedActivityBadges = completedActivities.map(this.renderCompletedActivityBadge);\r\n\r\n                let backgroundStyle = {}\r\n                let isRaceDay = false;\r\n                if (plannedRaces.length > 0) {\r\n                    isRaceDay = true;\r\n                } else {\r\n                    for (let activity of completedActivities) {\r\n                        if (activity.is_race === true) {\r\n                            isRaceDay = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isRaceDay) {\r\n                    backgroundStyle = {\r\n                        backgroundImage: `url(${RaceDayBackground})`,\r\n                        backgroundSize: \"cover\"\r\n                    };\r\n                }\r\n\r\n                const completedExercises = filterCompletedExercises(this.props.completedExercises, day);\r\n                const completedExerciseCategoryBadges = completedExercises.map(this.renderCompletedExerciseCategoryBadge);\r\n                \r\n                days.push(\r\n                    <div className={`col cell\r\n                            ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}\r\n                            ${dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"}\r\n                            ${dateFns.isBefore(day, today) ? \"past\" : \"\"}\r\n                        `} style={backgroundStyle} key={day} onClick={() => this.onDateClick(dateFns.parse(cloneDay), plannedActivities)}>\r\n                        <span className=\"number\">{formattedDate}</span>\r\n                        <span className=\"bg\">{formattedDate}</span>\r\n                        <div className=\"cell-content\">\r\n                            <div>{completedActivityBadges}</div>\r\n                            <div>{completedExerciseCategoryBadges}</div>\r\n                            <div>{plannedActivityBadges}</div>\r\n                            <div>{plannedRaceBadges}</div>\r\n                            <div>{plannedExerciseCategoryBadges}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n\r\n            // Add rows for flexible planning of future weeks if the user has it enabled\r\n            if (this.props.user && this.props.user.has_flexible_planning_enabled && dateFns.isAfter(day, today)) {\r\n                const plannedWeekActivities = filterPlannedActivities(this.props.plannedActivities, weekCommencingDay, \"week\");\r\n                const plannedWeekActivityBadges = plannedWeekActivities.map(this.renderPlannedActivityBadge);\r\n\r\n                const plannedWeekExerciseCategories = filterPlannedExercises(this.props.plannedExercises, weekCommencingDay, \"week\");\r\n                const plannedWeekExerciseCategoryBadges = plannedWeekExerciseCategories.map(this.renderPlannedExerciseCategoryBadge);\r\n\r\n                rows.push(\r\n                    <div key={\"wc-\" + weekCommencingDay} className=\"row\">\r\n                        <div className=\"week-todos\">\r\n                            <div className={`col cell\r\n                            ${dateFns.isSameDay(weekCommencingDay, selectedWeek) ? \"selected\" : \"\"}`} onClick={() => this.onWeekClick(dateFns.parse(weekCommencingDay))}>\r\n                                <div className=\"cell-content\">\r\n                                    {\"Week of \" + dateFns.format(weekCommencingDay, \"D MMMM\")} (to do any day):&nbsp;\r\n                                    {plannedWeekActivityBadges}\r\n                                    {plannedWeekExerciseCategoryBadges}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            rows.push(\r\n                <div className=\"row\" key={day}>\r\n                    {days}\r\n                </div>\r\n            );\r\n            days = [];\r\n        }\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onDateClick = (day, plannedActivities) => {\r\n        this.setState({\r\n            selectedDate: day,\r\n            selectedWeek: null,\r\n            showCalendarDayModal: true,\r\n            showCalendarWeekModal: false,\r\n            selectedDatePlannedActivities: plannedActivities\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n    };\r\n\r\n    onWeekClick = (weekStartDate) => {\r\n        this.setState({\r\n            selectedDate: null,\r\n            selectedWeek: weekStartDate,\r\n            showCalendarDayModal: false,\r\n            showCalendarWeekModal: true\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n    };\r\n\r\n    handleCloseCalendarDayModal = () => {\r\n        this.setState({\r\n            showCalendarDayModal: false,\r\n            showCalendarWeekModal: false\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n        this.refreshPlannedActivities(this.state.currentMonth);\r\n    }\r\n\r\n    nextMonth = () => {\r\n        const newMonth = dateFns.addMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    prevMonth = () => {\r\n        const newMonth = dateFns.subMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"calendar\">\r\n                {this.renderHeader()}\r\n                {this.renderDayNames()}\r\n                {this.renderCells()}\r\n            </div>\r\n            {this.state.showCalendarDayModal && (\r\n            <CalendarDayModal className=\"modal\" selectionType=\"day\" calendarDay={this.state.selectedDate} refresh={this.refreshPlannedActivities} close={this.handleCloseCalendarDayModal} />)}\r\n            {this.state.showCalendarWeekModal && (\r\n            <CalendarDayModal className=\"modal\" selectionType=\"week\" calendarDay={this.state.selectedWeek} refresh={this.refreshPlannedActivities} close={this.handleCloseCalendarDayModal} />)}\r\n            <TrainingPlanTemplatesContainer calendarDay={this.state.selectedDate} refresh={this.refreshPlannedActivities} />\r\n            </>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.user,\r\n        plannedActivities: state.plannedActivities,\r\n        plannedRaces: state.plannedRaces,\r\n        plannedExercises: state.plannedExercises,\r\n        completedActivities: state.completedActivities,\r\n        completedExercises: state.completedExercises\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        completedActivityActions: bindActionCreators(completedActivityActions, dispatch)\r\n    };\r\n}\r\n\r\nCalendar = connect(mapStateToProps, mapDispatchToProps)(Calendar)\r\n\r\nexport default Calendar;","import ls from \"local-storage\";\r\n                \r\nclass UserApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getUserInfo = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/user_info\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    patchUserInfo = (requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/user_info\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserApi;","import { pendingTask, begin, end, endAll } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport UserApi from \"../api/UserApi\";\r\n\r\nexport function loadUserInfo() {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_USER_INFO,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new UserApi();\r\n        return api.getUserInfo().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadUserInfoSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadUserInfoSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_USER_INFO_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        userInfo: responseData.user_info\r\n    };\r\n}\r\n\r\nexport function updateUserInfo(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_USER_INFO,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new UserApi();\r\n        return api.patchUserInfo(id, requestBody).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(updateUserInfoSuccess(id, responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: endAll\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updateUserInfoSuccess(id, responseData) {\r\n    return {\r\n        type: types.UPDATE_USER_INFO_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id,\r\n        updatedUserInfo: responseData.updated_user_info\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport * as userActions from \"../actions/userActions\";\r\n\r\nclass EnableFlexiblePlanningButton extends Component {\r\n\r\n    handleEnableFlexiblePlanning = () => {\r\n        const requestBody = JSON.stringify({\r\n            distance_uom_preference: this.props.user.distance_uom_preference,\r\n            has_flexible_planning_enabled: true\r\n        });\r\n        this.props.userActions.updateUserInfo(requestBody);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <a href=\"#flex\" onClick={() => this.handleEnableFlexiblePlanning()}>Click to Enable Flexible Planning</a>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.user\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        userActions: bindActionCreators(userActions, dispatch)\r\n    };\r\n}\r\n\r\nEnableFlexiblePlanningButton = connect(mapStateToProps, mapDispatchToProps)(EnableFlexiblePlanningButton);\r\n\r\nexport default EnableFlexiblePlanningButton;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//import { bindActionCreators } from \"redux\";\r\n\r\nimport EnableFlexiblePlanningButton from \"./EnableFlexiblePlanningButton\";\r\n\r\nclass TrainingPlanIntroContainer extends Component { \r\n    render() {\r\n        return (\r\n            <>\r\n            {this.props.user && !this.props.user.has_flexible_planning_enabled &&\r\n            <div className=\"alert alert-info\">\r\n                You can now plan activities and exercises for a given week without having to commit to what day you'll do them on.&nbsp;\r\n                <EnableFlexiblePlanningButton />\r\n            </div>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.user\r\n    };\r\n}\r\n\r\nTrainingPlanIntroContainer = connect(mapStateToProps)(TrainingPlanIntroContainer);\r\n\r\nexport default TrainingPlanIntroContainer;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Spinner } from \"react-redux-spinner\";\r\n\r\nimport Calendar from \"./Calendar\";\r\nimport TrainingPlanIntroContainer from \"./TrainingPlanIntroContainer\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\nimport * as userActions from \"../actions/userActions\";\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.userActions.loadUserInfo();\r\n        this.props.activityTypeActions.loadActivityTypes();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // This is where we can add routing in due course\r\n            <>\r\n            <Spinner />\r\n            <h2>Training Plan</h2>\r\n            <TrainingPlanIntroContainer />\r\n            <Calendar />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch)\r\n    };\r\n}\r\n\r\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { pendingTasksReducer } from \"react-redux-spinner\";\r\n\r\nimport App from \"./components/App\";\r\nimport plannedActivitiesReducer from \"./reducers/plannedActivitiesReducer\";\r\nimport plannedRacesReducer from \"./reducers/plannedRacesReducer\";\r\nimport plannedExercisesReducer from \"./reducers/plannedExercisesReducer\";\r\nimport completedActivitiesReducer from \"./reducers/completedActivitiesReducer\";\r\nimport completedExercisesReducer from \"./reducers/completedExercisesReducer\";\r\nimport activityTypesReducer from \"./reducers/activityTypesReducer\";\r\nimport exerciseTypesReducer from \"./reducers/exerciseTypesReducer\";\r\nimport exerciseCategoriesReducer from \"./reducers/exerciseCategoriesReducer\";\r\nimport trainingPlanTemplatesReducer from \"./reducers/trainingPlanTemplatesReducer\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport \"./base.css\";\r\n\r\n// Might want to refactor this redux stuff into separate files for reducers and configuring store as per tutorial\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    plannedActivities: plannedActivitiesReducer,\r\n    plannedRaces: plannedRacesReducer,\r\n    plannedExercises: plannedExercisesReducer,\r\n    completedActivities: completedActivitiesReducer,\r\n    completedExercises: completedExercisesReducer,\r\n    activityTypes: activityTypesReducer,\r\n    exerciseTypes: exerciseTypesReducer,\r\n    exerciseCategories: exerciseCategoriesReducer,\r\n    trainingPlanTemplates: trainingPlanTemplatesReducer,\r\n    user: userReducer,\r\n    pendingTasks: pendingTasksReducer\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\n// Use a Main class that we can flesh out to include routing as we start to do more of the site's functionality from React\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"container\")\r\n);","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_ACTIVITIES_SUCCESS:\r\n            return action.plannedActivities;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_ACTIVITY_SUCCESS:\r\n        //     const remainingActivities = state.filter(function(plannedActivity) {\r\n        //         return plannedActivity.id !== action.deletedId;\r\n        //     });\r\n        //     return remainingActivities;\r\n        // TODO: proper reducer for adds and updates so that we can avoid the refresh to update state.  Probably more easy to think about once our data model allows for one-offs?\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedRacesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_RACES_SUCCESS:\r\n            return action.plannedRaces;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_ACTIVITY_SUCCESS:\r\n        //     const remainingActivities = state.filter(function(plannedActivity) {\r\n        //         return plannedActivity.id !== action.deletedId;\r\n        //     });\r\n        //     return remainingActivities;\r\n        // TODO: proper reducer for adds and updates so that we can avoid the refresh to update state.  Probably more easy to think about once our data model allows for one-offs?\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedExercisesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_EXERCISES_SUCCESS:\r\n            return action.plannedExercises;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_EXERCISE_SUCCESS:\r\n        //     let remainingPlannedExerciseCategories = []\r\n        //     let remainingExercises;\r\n        //     for (let plannedExerciseCategory of state) {\r\n        //         remainingExercises = plannedExerciseCategory.exercises.filter(function(plannedExercise) {\r\n        //             return plannedExercise.id !== action.deletedId;\r\n        //         });\r\n        //         if (remainingExercises.length > 0) {\r\n        //             plannedExerciseCategory.exercises = remainingExercises;\r\n        //             remainingPlannedExerciseCategories.push(plannedExerciseCategory);\r\n        //         }\r\n        //     }\r\n        //     return remainingPlannedExerciseCategories;\r\n        // todo: proper reducers for update and create that avoid the need to refresh\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function completedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_COMPLETED_ACTIVITIES_SUCCESS:\r\n            return action.completedActivities;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function completedExercisesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_COMPLETED_EXERCISES_SUCCESS:\r\n            return action.completedExercises;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function activityTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_ACTIVITY_TYPES_SUCCESS:\r\n            return action.activityTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_TYPES_SUCCESS:\r\n            return action.exerciseTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseCategoriesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_CATEGORIES_SUCCESS:\r\n            return action.exerciseCategories;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function trainingPlanTemplatesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS:\r\n            return action.trainingPlanTemplates;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function userReducer(state, action) {\r\n    if (state === undefined) {\r\n        return null;\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_USER_INFO_SUCCESS:\r\n            return action.userInfo;\r\n        case types.UPDATE_USER_INFO_SUCCESS:\r\n            return action.updatedUserInfo;\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}