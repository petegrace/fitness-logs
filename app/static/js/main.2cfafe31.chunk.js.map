{"version":3,"sources":["static/img/race-day-bg.png","components/ActivityTypeButtonSet.js","components/ExerciseTypeButtonSet.js","helpers/trainingPlan.js","components/CompletedActivitiesList.js","components/CompletedExercisesList.js","components/PlannedRacesList.js","components/PlannedActivitiesList.js","components/PlannedExercisesList.js","components/PlannedActivityForm.js","components/PlannedRaceForm.js","components/PlannedExerciseForm.js","actions/actionTypes.js","api/PlannedActivitiesApi.js","api/PlannedActivityApi.js","api/PlannedRacesApi.js","api/PlannedRaceApi.js","actions/plannedRaceActions.js","api/PlannedExerciseApi.js","api/PlannedExercisesApi.js","actions/plannedExerciseActions.js","actions/plannedActivityActions.js","api/ActivityTypesApi.js","actions/activityTypeActions.js","actions/exerciseTypeActions.js","actions/exerciseCategoryActions.js","components/CalendarDayModal.js","api/TrainingPlanGeneratorApi.js","actions/trainingPlanGeneratorActions.js","actions/alertActions.js","components/TrainingPlanGeneratorModal.js","api/TrainingPlanTemplatesApi.js","actions/trainingPlanTemplateActions.js","components/TrainingPlanToolsContainer.js","api/CompletedActivitiesApi.js","actions/completedActivityActions.js","actions/completedExerciseActions.js","components/Calendar.js","components/Alert.js","api/UserApi.js","actions/userActions.js","components/App.js","index.js","reducers/plannedActivitiesReducer.js","reducers/plannedRacesReducer.js","reducers/plannedExercisesReducer.js","reducers/completedActivitiesReducer.js","reducers/completedExercisesReducer.js","reducers/activityTypesReducer.js","reducers/exerciseTypesReducer.js","reducers/exerciseCategoriesReducer.js","reducers/trainingPlanGeneratorInputsReducer.js","reducers/trainingPlanTemplatesReducer.js","reducers/userReducer.js","reducers/alertReducer.js"],"names":["module","exports","__webpack_require__","p","ActivityTypeButtonSet","renderActivityTypeButton","activityType","buttonClass","category_key","formInitData","activity_type","planning_period","_this","props","planningPeriod","recurrence","planned_date","dateFns","format","calendarDay","repeatOption","distance_uom_preference","user","react_default","a","createElement","key","className","onClick","onAdd","renderPlannedRaceButton","race_type","onAddRace","activityTypes","this","activityTypeButtons","map","plannedRaceButton","Fragment","length","Component","connect","state","ExerciseTypeButtonSet","renderExerciseTypeButton","exerciseType","id","exercise_name","measured_by","default_reps","default_seconds","_this2","exerciseTypeIdsToExclude","exerciseTypeButtons","exerciseTypes","filter","_ref","includes","filterPlannedActivities","plannedActivities","day","jsonDate","plannedActivity","filterPlannedRaces","plannedRaces","plannedRace","filterPlannedExercises","plannedExercises","plannedExerciseCategory","filterCompletedActivities","completedActivities","completedActivity","activity_date","filterCompletedExercises","completedExercises","completedExerciseCategory","exercise_date","CompletedActivitiesList","renderCompletedActivitySummary","cardClass","cardHeaderClass","activityUrl","href","name","is_race","distance_formatted","moving_time","average_pace_formatted","average_cadence","median_cadence","average_heartrate","total_elevation_gain_formatted","average_climbing_gradient_formatted","description","strava_url","completedActivitySummaries","CompletedExercisesList","renderCompletedExerciseRow","completedExercise","badgeClass","substring","exercise_time","reps","seconds","completedExerciseCategories","completedExerciseRows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","exercises","err","return","PlannedRacesList","renderPlannedRaceSummary","distance","entry_status","race_website_url","notes","role","onEdit","Dropdown","as","Toggle","cole","bsPrefix","Menu","Item","onRemove","plannedRaceSummaries","PlannedActivitiesList","renderPlannedActivityRow","activity_subtype","planned_distance","alignRight","plannedActivityRows","PlannedExercisesList","renderPlannedExerciseRow","plannedExercise","category_name","planned_sets","planned_reps","planned_seconds","plannedExerciseCategories","plannedExerciseRows","PlannedActivityForm","initData","initialize","_this$props","handleSubmit","handleBackClick","onSubmit","htmlFor","Field","component","type","placeholder","reduxForm","form","PlannedRaceForm","required","PlannedExerciseForm","renderCategorySelectOption","categoryOption","categorySelectOptions","isNewExerciseType","categoryOptions","renderField","label","measuredByValue","input","_ref$meta","meta","touched","error","warning","Object","assign","validate","values","errors","Number","selector","formValueSelector","LOAD_PLANNED_ACTIVITIES","LOAD_PLANNED_ACTIVITIES_SUCCESS","DELETE_PLANNED_ACTIVITY","DELETE_PLANNED_ACTIVITY_SUCCESS","UPDATE_PLANNED_ACTIVITY","UPDATE_PLANNED_ACTIVITY_SUCCESS","ADD_PLANNED_ACTIVITY","ADD_PLANNED_ACTIVITY_SUCCESS","LOAD_PLANNED_RACES_SUCCESS","DELETE_PLANNED_RACE","DELETE_PLANNED_RACE_SUCCESS","UPDATE_PLANNED_RACE","UPDATE_PLANNED_RACE_SUCCESS","ADD_PLANNED_RACE","ADD_PLANNED_RACE_SUCCESS","LOAD_PLANNED_EXERCISES_SUCCESS","DELETE_PLANNED_EXERCISE","DELETE_PLANNED_EXERCISE_SUCCESS","UPDATE_PLANNED_EXERCISE","UPDATE_PLANNED_EXERCISE_SUCCESS","ADD_PLANNED_EXERCISE","ADD_PLANNED_EXERCISE_SUCCESS","LOAD_COMPLETED_ACTIVITIES","LOAD_COMPLETED_ACTIVITIES_SUCCESS","LOAD_COMPLETED_EXERCISES_SUCCESS","LOAD_ACTIVITY_TYPES","LOAD_ACTIVITY_TYPES_SUCCESS","LOAD_EXERCISE_TYPES_SUCCESS","LOAD_EXERCISE_CATEGORIES_SUCCESS","LOAD_TRAINING_PLAN_GENERATOR_INPUTS","LOAD_TRAINING_PLAN_GENERATOR_INPUTS_SUCCESS","ADD_PLANNED_ACTIVITIES","ADD_PLANNED_ACTIVITIES_SUCCESS","LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS","COPY_TRAINING_PLAN_TEMPLATE","COPY_TRAINING_PLAN_TEMPLATE_SUCCESS","LOAD_USER_INFO","LOAD_USER_INFO_SUCCESS","UPDATE_USER_INFO","UPDATE_USER_INFO_SUCCESS","SHOW_ALERT","ERROR_ENCOUNTERED","PlannedActivitiesApi","classCallCheck","getPlannedActivities","startDate","endDate","options","method","headers","Authorization","authHeader","endpoint","endpointOrigin","dateFormat","fetch","then","response","ok","json","catch","postPlannedActivities","requestBody","Content-Type","body","mode","accessToken","ls","get","window","location","origin","PlannedActivityApi","patchPlannedActivity","deletePlannedActivity","scope","Error","statusText","PlannedRacesApi","postPlannedRaces","PlannedRaceApi","patchPlannedRace","deletePlannedRace","loadPlannedRacesSuccess","responseData","types","planned_races","addPlannedRace","dispatch","defineProperty","pendingTask","begin","addPlannedRaceSuccess","end","updatePlannedRace","result","updatePlannedRaceSuccess","_ref2","deletePlannedRaceSuccess","_ref3","PlannedExerciseApi","patchPlannedExercise","deletePlannedExercise","PlannedExercisesApi","postPlannedExercises","loadPlannedExercisesSuccess","planned_exercises","addPlannedExercise","addPlannedExerciseSuccess","updatePlannedExercise","updatePlannedExerciseSuccess","deletePlannedExerciseSuccess","loadPlannedActivities","loadPlannedActivitiesSuccess","planned_activities","addPlannedActivity","addPlannedActivitySuccess","updatePlannedActivity","updatePlannedActivitySuccess","deletePlannedActivitySuccess","_ref4","ActivityTypesApi","getActivityTypes","loadActivityTypes","loadActivityTypesSuccess","exercise_types","loadExerciseTypesSuccess","exerciseCategories","exercise_categories","loadExerciseCategoriesSuccess","activity_types","CalendarDayModal","possibleConstructorReturn","getPrototypeOf","call","togglePlannedActivityForm","setState","showCalendarDayMain","showPlannedActivityForm","showPlannedRaceForm","showPlannedExerciseForm","togglePlannedRaceForm","togglePlannedExerciseForm","handleAddPlannedActivity","plannedActivityFormInitData","handleEditPlannedActivity","handleSavePlannedActivity","console","log","JSON","stringify","plannedActivityActions","refresh","handleRemovePlannedActivity","plannedActivityId","handleAddPlannedRace","plannedRaceFormInitData","handleEditPlannedRace","handleSavePlannedRace","plannedRaceActions","handleRemovePlannedRace","plannedRaceId","handleAddPlannedExercise","selectionType","existingPlannedExerciseId","categories","category","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","exercise","exercise_type_id","plannedExerciseActions","exercise_category_id","plannedExerciseFormInitData","handleEditPlannedExercise","handleSavePlannedExercise","activityTypeActions","handleRemovePlannedExercise","plannedExerciseId","isFutureDate","startOfDay","Date","close","components_CompletedActivitiesList","components_PlannedRacesList","components_CompletedExercisesList","components_PlannedActivitiesList","components_PlannedExercisesList","components_ActivityTypeButtonSet","components_ExerciseTypeButtonSet","components_PlannedActivityForm","components_PlannedRaceForm","components_PlannedExerciseForm","bindActionCreators","TrainingPlanGeneratorApi","getTrainingPlanGenerator","targetRaceDistance","targetRaceDate","loadTrainingPlanGeneratorInputs","loadTrainingPlanGeneratorInputsSuccess","training_plan_generator_inputs","addPlannedActivities","addPlannedActivitiesSuccess","alertMessage","actionLinkText","actionFormInitData","showAlert","message","TrainingPlanGeneratorModal","handleRaceSelected","event","targetRaceId","target","targetRace","trainingPlanGeneratorActions","handleGeneratePlanClick","target_race_distance","target_race_date","long_run_planning_period","long_run_day","other_runs_per_week","other_runs_planning_period","other_run_days","other_run_types","selectedDate","renderTargetRaceOption","trainingPlanGeneratorInputs","targetRaceOptions","onChange","weeks_to_target_race","last_4_weeks","runs_per_week","longest_distance_formatted","total_runs_above_target_distance","current_pb","activity_name","pre_pb_long_runs","has_flexible_planning_enabled","longRunPlanningPeriodValue","otherRunsPerWeekValue","otherRunsPlanningPeriodValue","runDay","concat","runType","TrainingPlanTemplatesApi","getTrainingPlanTemplates","loadTrainingPlanTemplates","loadTrainingPlanTemplatesSuccess","training_plan_templates","copyTrainingPlanTemplate","templateId","template_id","copyTrainingPlanTemplateSuccess","TrainingPlanToolsContainer","handleAddToTrainingPlan","trainingPlanTemplateActions","renderTemplateDetails","template","link_url","rel","link_text","templateDetailsList","trainingPlanTemplates","onGenerateTrainingPlan","CompletedActivitiesApi","getCompletedActivities","loadCompletedActivities","loadCompletedActivitiesSuccess","completed_exercises","loadCompletedExercisesSuccess","completed_activities","Calendar","refreshPlannedActivities","currentMonth","startOfWeek","startOfMonth","weekStartsOn","endOfWeek","endOfMonth","refreshCompletedActivities","completedActivityActions","refreshAllActivities","renderHeader","prevMonth","nextMonth","renderDayNames","days","i","addDays","renderPlannedActivityBadge","renderPlannedRaceBadge","renderPlannedExerciseCategoryBadge","renderCompletedActivityBadge","renderCompletedExerciseCategoryBadge","renderCells","_this$state","selectedWeek","today","monthStart","monthEnd","rows","formattedDate","_loop","weekCommencingDay","_loop2","cloneDay","plannedActivityBadges","plannedRaceBadges","plannedExerciseCategoryBadges","completedActivityBadges","backgroundStyle","isRaceDay","backgroundImage","RaceDayBackground","backgroundSize","completedExerciseCategoryBadges","isSameMonth","isSameDay","isBefore","style","onDateClick","parse","isAfter","plannedWeekActivityBadges","plannedWeekExerciseCategoryBadges","onWeekClick","showCalendarDayModal","showCalendarWeekModal","showTrainingPlanGeneratorModal","selectedDatePlannedActivities","document","classList","toggle","weekStartDate","handleTrainingPlanGeneratorOpen","handleCloseModal","newMonth","addMonths","subMonths","src_components_CalendarDayModal","components_TrainingPlanGeneratorModal","components_TrainingPlanToolsContainer","Alert","alert","onActionLinkClick","UserApi","getUserInfo","patchUserInfo","loadUserInfo","loadUserInfoSuccess","user_info","updateUserInfo","updateUserInfoSuccess","updated_user_info","App","userActions","esm","components_Alert","components_Calendar","rootReducer","combineReducers","formReducer","action","userInfo","updatedUserInfo","pendingTasks","pendingTasksReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","components_App","getElementById"],"mappings":"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","file":"static/js/main.2cfafe31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/race-day-bg.6a192603.png\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nclass ActivityTypeButtonSet extends Component {\r\n\r\n    renderActivityTypeButton = (activityType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + activityType.category_key;\r\n        const formInitData = {\r\n            activity_type: activityType.activity_type,\r\n            category_key: activityType.category_key,\r\n            planning_period: this.props.planningPeriod,\r\n            recurrence: \"once\",\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + (this.props.planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <button key={activityType.activity_type} className={buttonClass} onClick={() => this.props.onAdd(formInitData)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {activityType.activity_type}\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    renderPlannedRaceButton = () => {\r\n        const formInitData = {\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            race_type: \"Run\",\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <button key=\"race\" className=\"btn btn-sm ml-1 mr-1 btn-secondary new-exercise-type\" onClick={() => this.props.onAddRace(formInitData)}>\r\n            <i className=\"fa fa-flag-checkered\"></i> Planned Race\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let activityTypes = this.props.activityTypes;\r\n        let activityTypeButtons = activityTypes.map(this.renderActivityTypeButton);\r\n        let plannedRaceButton = this.renderPlannedRaceButton();\r\n        \r\n        return(\r\n            <>\r\n            {activityTypes.length > 0 &&\r\n            <h3>Add Activities</h3>}\r\n            {activityTypeButtons}\r\n            {this.props.planningPeriod === \"day\" && plannedRaceButton}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        activityTypes: state.activityTypes,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nActivityTypeButtonSet = connect(mapStateToProps)(ActivityTypeButtonSet);\r\n\r\nexport default ActivityTypeButtonSet;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ExerciseTypeButtonSet extends Component {\r\n\r\n    renderExerciseTypeButton = (exerciseType) => {\r\n        const buttonClass = \"btn btn-sm ml-1 mr-1 \" + (exerciseType.category_key ? exerciseType.category_key : \"uncategorised\");\r\n\r\n        return (\r\n            <button key={exerciseType.id} className={buttonClass} onClick={() => this.props.onAdd(exerciseType.id)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> {exerciseType.exercise_name}\r\n                <br />\r\n                <small>\r\n                    [{exerciseType.measured_by === \"reps\" && (exerciseType.default_reps + \" reps\")}{exerciseType.measured_by === \"seconds\" && (exerciseType.default_seconds + \" seconds\")}]\r\n                </small>\r\n\t\t\t</button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const exerciseTypeIdsToExclude = this.props.exerciseTypeIdsToExclude ? this.props.exerciseTypeIdsToExclude : [];\r\n        const exerciseTypes = this.props.exerciseTypes.filter(({ id }) => !exerciseTypeIdsToExclude.includes(id));\r\n        const exerciseTypeButtons = exerciseTypes.map(this.renderExerciseTypeButton);\r\n\r\n        return(\r\n            <>\r\n            <button key=\"new\" className=\"btn btn-sm ml-1 mr-1 btn-secondary new-exercise-type\" onClick={() => this.props.onAdd(null)}>\r\n                <i className=\"fa fa-calendar-plus-o\"></i> New Exercise Type\r\n                <br />\r\n                <small>&nbsp;</small>\r\n\t\t\t</button>\r\n            {exerciseTypeButtons}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        exerciseTypes: state.exerciseTypes\r\n    };\r\n}\r\n\r\nExerciseTypeButtonSet = connect(mapStateToProps)(ExerciseTypeButtonSet);\r\n\r\nexport default ExerciseTypeButtonSet;","import dateFns from \"date-fns\";\r\n\r\nexport function filterPlannedActivities(plannedActivities, day, planningPeriod) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.planned_date === jsonDate && plannedActivity.planning_period === planningPeriod);\r\n    return plannedActivitiesFiltered;\r\n}\r\n\r\nexport function filterPlannedActivitiesById(plannedActivities, id) {\r\n    const plannedActivitiesFiltered = plannedActivities.filter(plannedActivity => plannedActivity.id === id);\r\n    return plannedActivitiesFiltered[0];\r\n}\r\n\r\nexport function filterPlannedRacesById(plannedRaces, id) {\r\n    const plannedRacesFiltered = plannedRaces.filter(plannedRace => plannedRace.id === id);\r\n    return plannedRacesFiltered[0];\r\n}\r\n\r\nexport function filterPlannedRaces(plannedRaces, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedRacesFiltered = plannedRaces.filter(plannedRace => plannedRace.planned_date === jsonDate);\r\n    return plannedRacesFiltered;\r\n}\r\n\r\nexport function filterPlannedExercises(plannedExercises, day, planningPeriod) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const plannedExercisesFiltered = plannedExercises.filter(plannedExerciseCategory => plannedExerciseCategory.planned_date === jsonDate && plannedExerciseCategory.planning_period === planningPeriod);\r\n    return plannedExercisesFiltered;\r\n}\r\n\r\nexport function filterCompletedActivities(completedActivities, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const completedActivitiesFiltered = completedActivities.filter(completedActivity => completedActivity.activity_date === jsonDate);\r\n    return completedActivitiesFiltered;\r\n}\r\n\r\nexport function filterCompletedExercises(completedExercises, day) {\r\n    const jsonDate = dateFns.format(day, \"YYYY-MM-DD\");\r\n    const completedExercisesFiltered = completedExercises.filter(completedExerciseCategory => completedExerciseCategory.exercise_date === jsonDate);\r\n    return completedExercisesFiltered;\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { filterCompletedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass CompletedActivitiesList extends Component {\r\n\r\n    renderCompletedActivitySummary = (completedActivity) => {\r\n        const cardClass = \"card \" + completedActivity.category_key + \"_border_only mt-2\";\r\n        const cardHeaderClass = \"card-header \" + completedActivity.category_key;\r\n        const activityUrl = \"/activity_analysis/\" + completedActivity.id;\r\n\r\n        return (\r\n            <div className=\"activity-summary\" key={completedActivity.id}>\r\n                <div className={cardClass}>\r\n                    <div className={cardHeaderClass}>\r\n                        <h6 className=\"m-0 p-0\">\r\n                            <a href={activityUrl}>\r\n                                {completedActivity.name}&nbsp;\r\n                                {completedActivity.is_race && <i className=\"fa fa-flag-checkered\"></i>}\r\n                            </a>\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>When:</small></td>\r\n                                            <td>{completedActivity.activity_date}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Distance:</small></td>\r\n                                            <td>{completedActivity.distance_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Moving Time:</small></td>\r\n                                            <td>{completedActivity.moving_time}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Pace:</small></td>\r\n                                            <td>{completedActivity.average_pace_formatted}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Cadence:</small></td>\r\n                                            <td>{completedActivity.average_cadence}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Median Cadence:</small></td>\r\n                                            <td>{completedActivity.median_cadence}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className=\"col-sm-4\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><small>Avg. Heart Rate:</small></td>\r\n                                            <td>{completedActivity.average_heartrate}</td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Elevation Gain:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.total_elevation_gain_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\t\t\t\r\n                                            <td><small>Avg. Climbing Gradient:</small></td>\r\n                                            <td>\r\n                                                {completedActivity.average_climbing_gradient_formatted}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-3\">\r\n                            <div className=\"col-12\">\r\n                                {completedActivity.description &&\r\n                                <p><small>Description:</small> {completedActivity.description}</p>}\r\n                                <p className=\"mb-1\">\r\n                                    <a href={activityUrl}>Analyse Activity</a> |&nbsp;\r\n                                    <a href={completedActivity.strava_url}>View on Strava</a>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const completedActivities = filterCompletedActivities(this.props.completedActivities, this.props.calendarDay);\r\n        let completedActivitySummaries = completedActivities.map(this.renderCompletedActivitySummary);\r\n\r\n        return (\r\n                <div>\r\n                    {completedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Completed Activities</h3>\r\n                        {completedActivitySummaries}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        completedActivities: state.completedActivities\r\n    };\r\n}\r\n\r\nCompletedActivitiesList = connect(mapStateToProps)(CompletedActivitiesList)\r\n\r\nexport default CompletedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { filterCompletedExercises } from \"../helpers/trainingPlan\";\r\n\r\nclass CompletedExercisesList extends Component {\r\n\r\n    renderCompletedExerciseRow = (completedExercise) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedExercise.category_key;\r\n\r\n        return (\r\n            <tr key={completedExercise.id}>\r\n                <td className=\"name-badge\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <h5><span className={badgeClass}>\r\n                        {completedExercise.exercise_name}\r\n                    </span></h5>\r\n                </div>\r\n                <div className=\"d-inline d-sm-none\">\r\n                    <h5><span className={badgeClass}>\r\n                        {completedExercise.exercise_name.length <= 30 ? completedExercise.exercise_name : completedExercise.exercise_name.substring(0,27) + \"...\" }\r\n                    </span></h5>\r\n                </div>\r\n                </td>\r\n                <td>{completedExercise.exercise_time}</td>\r\n                {completedExercise.measured_by === \"reps\" && (\r\n                    <td>{completedExercise.reps ? completedExercise.reps + \" reps\" : \"\"}</td>\r\n                )}\r\n                {completedExercise.measured_by === \"seconds\" && (\r\n                    <td>{completedExercise.seconds ? completedExercise.seconds + \" secs\" : \"\"}</td>\r\n                )}\r\n            </tr>\r\n        );\r\n    }\r\n   \r\n    render() {\r\n        const completedExerciseCategories = filterCompletedExercises(this.props.completedExercises, this.props.calendarDay);\r\n        let completedExerciseRows = [];\r\n        for (let completedExerciseCategory of completedExerciseCategories) {\r\n            completedExerciseRows.push(completedExerciseCategory.exercises.map(this.renderCompletedExerciseRow));\r\n        }\r\n        return (\r\n                <div>\r\n                    {completedExerciseCategories.length > 0 && (\r\n                        <>\r\n                        <h3>Completed Exercises</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {completedExerciseRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        completedExercises: state.completedExercises\r\n    };\r\n}\r\n\r\nCompletedExercisesList = connect(mapStateToProps)(CompletedExercisesList)\r\n\r\nexport default CompletedExercisesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedRaces } from \"../helpers/trainingPlan\";\r\n\r\nclass PlannedRacesList extends Component {\r\n\r\n    renderPlannedRaceSummary = (plannedRace) => {\r\n        const cardClass = \"card \" + plannedRace.category_key + \"_border_only mt-2\";\r\n        const cardHeaderClass = \"card-header \" + plannedRace.category_key;\r\n\r\n        const formInitData = {\r\n            id: plannedRace.id,\r\n            name: plannedRace.name,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            race_type: plannedRace.race_type,\r\n            distance: plannedRace.distance,\r\n            entry_status: plannedRace.entry_status,\r\n            race_website_url: plannedRace.race_website_url,\r\n            notes: plannedRace.notes,\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        }\r\n\r\n        return (\r\n            <div className=\"activity-summary\" key={plannedRace.id}>\r\n                <div className={cardClass}>\r\n                    <div className={cardHeaderClass}>\r\n                        <h6 className=\"m-0 p-0\">\r\n                            {plannedRace.name}&nbsp;<i className=\"fa fa-flag-checkered\"></i>\r\n                        </h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                                <p>Race Type: {plannedRace.race_type}</p>\r\n                                {plannedRace.distance &&\r\n                                <p>Distance: {plannedRace.distance} {this.props.user.distance_uom_preference}</p>}\r\n                                {plannedRace.entry_status &&\r\n                                <p>Entry Status: {plannedRace.entry_status}</p>}\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                {plannedRace.notes &&\r\n                                <p>Notes:<br />{plannedRace.notes}</p>}                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {plannedRace.race_website_url &&\r\n                                <p>Race Website: {plannedRace.race_website_url}</p>}\r\n                                <ul className=\"nav\">\r\n                                    <li className=\"nav-item mr-3\">\r\n                                        <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i> Edit</a>\r\n                                    </li>\r\n                                    <Dropdown as=\"li\" className=\"nav-item\">\r\n                                        <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i> Remove</Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                            <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedRace.id, \"all\")}>Confirm Remove</Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const plannedRaces = filterPlannedRaces(this.props.plannedRaces, this.props.calendarDay);\r\n        let plannedRaceSummaries = plannedRaces.map(this.renderPlannedRaceSummary);\r\n\r\n        return (\r\n                <div>\r\n                    {plannedRaces.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Races</h3>\r\n                        {plannedRaceSummaries}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedRaces: state.plannedRaces,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nPlannedRacesList = connect(mapStateToProps)(PlannedRacesList)\r\n\r\nexport default PlannedRacesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedActivities } from \"../helpers/trainingPlan\";\r\n\r\nclass PlannedActivitiesList extends Component {\r\n\r\n    renderPlannedActivityRow = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n        const formInitData = {\r\n            id: plannedActivity.id,\r\n            activity_type: plannedActivity.activity_type,\r\n            activity_subtype: plannedActivity.activity_subtype,\r\n            category_key: plannedActivity.category_key,\r\n            description: plannedActivity.description,\r\n            planned_distance: plannedActivity.planned_distance,\r\n            recurrence: plannedActivity.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + (plannedActivity.planning_period === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n            distance_uom_preference: this.props.user.distance_uom_preference\r\n        };\r\n\r\n        return (\r\n            <tr key={plannedActivity.id}>\r\n                <td className=\"name-badge\"><h5><span className={badgeClass}>{plannedActivity.activity_subtype}</span></h5></td>\r\n                <td>{plannedActivity.planned_distance ? plannedActivity.planned_distance + \" \" + this.props.user.distance_uom_preference : \"\"}</td>\r\n                <td>{plannedActivity.description}</td>\r\n                <td>\r\n                    {plannedActivity.recurrence === \"once\" && \"Once only\"}\r\n                    {plannedActivity.recurrence === \"weekly\" && <>Repeats every {this.props.planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"}</>}\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedActivity.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedActivity.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this {this.props.planningPeriod}</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedActivity.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const plannedActivities = filterPlannedActivities(this.props.plannedActivities, this.props.calendarDay, this.props.planningPeriod);\r\n        let plannedActivityRows = plannedActivities.map(this.renderPlannedActivityRow);\r\n\r\n        return (\r\n                <div>\r\n                    {plannedActivities.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Activities</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedActivityRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedActivities: state.plannedActivities,\r\n        user: state.user\r\n    };\r\n}\r\n\r\nPlannedActivitiesList = connect(mapStateToProps)(PlannedActivitiesList)\r\n\r\nexport default PlannedActivitiesList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport { filterPlannedExercises } from \"../helpers/trainingPlan\";\r\n// import * as plannedExerciseActions from \"../actions/plannedActivityActions\";\r\n\r\nclass PlannedExercisesList extends Component {\r\n\r\n    renderPlannedExerciseRow = (plannedExercise) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExercise.category_key;\r\n        const formInitData = {\r\n            id: plannedExercise.id,\r\n            exercise_name: plannedExercise.exercise_name,\r\n            category_name: plannedExercise.category_name,\r\n            category_key: plannedExercise.category_key,\r\n            planned_sets: plannedExercise.planned_sets,\r\n            measured_by: plannedExercise.measured_by,\r\n            planned_reps: plannedExercise.planned_reps,\r\n            planned_seconds: plannedExercise.planned_seconds,\r\n            recurrence: plannedExercise.recurrence,\r\n            planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n            repeatOption: \"Repeat every \" + (plannedExercise.planning_period === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n        }\r\n\r\n        return (\r\n            <tr key={plannedExercise.id}>\r\n                <td className=\"name-badge\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name}\r\n                    </span></h5>\r\n                </div>\r\n                <div className=\"d-inline d-sm-none\">\r\n                    <h5><span className={badgeClass}>\r\n                        {plannedExercise.exercise_name.length <= 20 ? plannedExercise.exercise_name : plannedExercise.exercise_name.substring(0,17) + \"...\" }\r\n                    </span></h5>\r\n                </div>\r\n                </td>\r\n                <td>{plannedExercise.planned_sets ? plannedExercise.planned_sets + \" sets\" : \"\"}</td>\r\n                {plannedExercise.measured_by === \"reps\" && (\r\n                    <td>{plannedExercise.planned_reps ? plannedExercise.planned_reps + \" reps\" : \"\"}</td>\r\n                )}\r\n                {plannedExercise.measured_by === \"seconds\" && (\r\n                    <td>{plannedExercise.planned_seconds ? plannedExercise.planned_seconds + \" secs\" : \"\"}</td>\r\n                )}\r\n                <td>\r\n                    <div className=\"d-none d-sm-inline\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once only\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && <>Repeats every {this.props.planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"}</>}\r\n                    </div>\r\n                    <div className=\"d-inline d-sm-none\">\r\n                        {plannedExercise.recurrence === \"once\" && \"Once\"}\r\n                        {plannedExercise.recurrence === \"weekly\" && \"Weekly\"}\r\n                    </div>\r\n                </td>\r\n                <td className=\"actions\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item mr-3\">\r\n                            <a href=\"#edit\" role=\"button\" onClick={() => this.props.onEdit(formInitData)}><i className=\"fa fa-edit\"></i></a>\r\n                        </li>\r\n                        <Dropdown as=\"li\" className=\"nav-item\">\r\n                            <Dropdown.Toggle as=\"a\" cole=\"button\" href=\"#\" bsPrefix=\"none\"><i className=\"fa fa-trash\"></i></Dropdown.Toggle>\r\n                            <Dropdown.Menu alignRight=\"true\">\r\n                                {plannedExercise.recurrence === \"once\" &&\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove from plan</Dropdown.Item>}\r\n                                {plannedExercise.recurrence === \"weekly\" &&\r\n                                <>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"))}>Remove for this {this.props.planningPeriod}</Dropdown.Item>\r\n                                <Dropdown.Item href=\"#\" role=\"button\" onClick={() => this.props.onRemove(plannedExercise.id, \"all\")}>Remove for all weeks</Dropdown.Item>\r\n                                </>}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n   \r\n    render() {\r\n        const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, this.props.calendarDay, this.props.planningPeriod);\r\n        let plannedExerciseRows = [];\r\n        for (let plannedExerciseCategory of plannedExerciseCategories) {\r\n            plannedExerciseRows.push(plannedExerciseCategory.exercises.map(this.renderPlannedExerciseRow));\r\n        }\r\n        return (\r\n                <div>\r\n                    {plannedExerciseCategories.length > 0 && (\r\n                        <>\r\n                        <h3>Planned Exercises</h3>\r\n                        <table className=\"table table-sm table-hover mt-3\">\r\n                            <tbody>\r\n                            {plannedExerciseRows}\r\n                            </tbody>\r\n                        </table>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises\r\n    };\r\n}\r\n\r\nPlannedExercisesList = connect(mapStateToProps)(PlannedExercisesList)\r\n\r\nexport default PlannedExercisesList;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nclass PlannedActivityForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\"><small>Activity Type:</small> <span className={badgeClass}>{initData.activity_type}</span></h4>\r\n                {initData.activity_type === \"Run\" && (\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"activity_subtype\">Run Type</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"activity_subtype\" name=\"activity_subtype\">\r\n                        <option value=\"\">(optional)</option>\r\n                        <option value=\"Long Run\">Long Run</option>\r\n                        <option value=\"Easy / Social Run\">Easy / Social Run</option>\r\n                        <option value=\"Intervals / Fartlek\">Intervals / Fartlek</option>\r\n                        <option value=\"Tempo Run\">Tempo Run</option>\r\n                        <option value=\"Hilly Run\">Hilly Run</option>\r\n                        <option value=\"Trail Run\">Trail Run</option>\r\n                    </Field>\r\n                </div>)}\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"once\">Once only</option>\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"description\">Description</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"description\" name=\"description\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"planned_distance\">Planned Distance ({initData.distance_uom_preference})</label>\r\n                    <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_distance\" name=\"planned_distance\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Activity</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nPlannedActivityForm = reduxForm({\r\n    form: \"plannedActivity\"\r\n})(PlannedActivityForm);\r\n\r\nexport default PlannedActivityForm;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nclass PlannedRaceForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\">New Planned Race</h4>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"name\">Name of Race</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"race_type\">Race Type</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"race_type\" name=\"race_type\">\r\n                        <option value=\"Run\">Run</option>\r\n                        <option value=\"Ride\">Ride</option>\r\n                        <option value=\"Swim\">Swim</option>\r\n                        <option value=\"Triathlon\">Triathlon</option>\r\n                        <option value=\"Duathlon\">Duathlon</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"distance\">Distance ({initData.distance_uom_preference})</label>\r\n                    <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"distance\" name=\"distance\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"entry_status\">Entry Status</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"entry_status\" name=\"entry_status\">\r\n                        <option value=\"\">(optional)</option>\r\n                        <option value=\"Entered\">Entered</option>\r\n                        <option value=\"Probable\">Probable</option>\r\n                        <option value=\"Possible\">Possible</option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"race_website_url\">Race Website URL</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"race_website_url\" name=\"race_website_url\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\" htmlFor=\"notes\">Notes</label>\r\n                    <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"notes\" name=\"notes\" placeholder=\"(optional)\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Race</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nPlannedRaceForm = reduxForm({\r\n    form: \"plannedRace\"\r\n})(PlannedRaceForm);\r\n\r\nexport default PlannedRaceForm;","import React, { Component } from \"react\";\r\nimport { reduxForm, Field, formValueSelector } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass PlannedExerciseForm extends Component {\r\n\r\n    componentDidMount() {\r\n        const { initData } = this.props;\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    renderCategorySelectOption = (categoryOption) => {\r\n        return (\r\n            <option key={categoryOption.id} value={categoryOption.id}>{categoryOption.category_name}</option>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, handleBackClick, initData } = this.props; \r\n        const badgeClass = \"badge badge-primary \" +  initData.category_key;\r\n        let categorySelectOptions;\r\n\r\n        if (initData.isNewExerciseType) {\r\n            categorySelectOptions = initData.categoryOptions.map(this.renderCategorySelectOption);\r\n        }\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <h4 className=\"mt-3 mb-3\">{initData.exercise_name} <span className={badgeClass}>{initData.category_name}</span></h4>\r\n                {initData.isNewExerciseType && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <Field component={renderField} type=\"text\" id=\"exercise_name\" name=\"exercise_name\" label=\"Exercise Name\" />\r\n                    </div>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"measured_by\">Measured By</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"measured_by\" name=\"measured_by\">\r\n                            <option value=\"reps\">Reps</option>\r\n                            <option value=\"seconds\">Time (seconds)</option>\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"reps\") || this.props.measuredByValue === \"reps\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_reps\">Reps (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_reps\" name=\"planned_reps\" />\r\n                    </div>\r\n                )}\r\n                {((!this.props.measuredByValue && initData.measured_by === \"seconds\") || this.props.measuredByValue === \"seconds\") && (\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"planned_seconds\">Seconds (per Set)</label>\r\n                        <Field component=\"input\" type=\"number\" className=\"form-control\" id=\"planned_seconds\" name=\"planned_seconds\" />\r\n                    </div>\r\n                )}\r\n                <div className=\"form-group \">\r\n                    <Field component={renderField} type=\"number\" id=\"planned_sets\" name=\"planned_sets\" label=\"Planned Sets\" />\r\n                </div>\r\n                <div className=\"form-group \">\r\n                    <label className=\"form-control-label\" htmlFor=\"recurrence\">Recurrence</label>\r\n                    <Field component=\"select\" className=\"form-control\" id=\"recurrence\" name=\"recurrence\">\r\n                        <option value=\"weekly\">{initData.repeatOption}</option>\r\n                        <option value=\"once\">Once only</option>\r\n                    </Field>\r\n                </div>\r\n                {initData.isNewExerciseType && initData.categoryOptions && initData.categoryOptions.length > 0 && (\r\n                    <>\r\n                    <div className=\"form-group \">\r\n                        <label className=\"form-control-label\" htmlFor=\"exercise_category_id\">Category</label>\r\n                        <Field component=\"select\" className=\"form-control\" id=\"exercise_category_id\" name=\"exercise_category_id\">\r\n                            {categorySelectOptions}\r\n                        </Field>\r\n                    </div>\r\n                    </>\r\n                )}\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\">Save Exercise</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={handleBackClick}>Back</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nconst validate = (values) => {\r\n    let errors = {};\r\n    if (Number(values.planned_sets) <= 0) {\r\n        errors.planned_sets = \"Planned Sets must be at least 1.\"\r\n    } \r\n    return errors;\r\n}\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => {\r\n    return (\r\n        <div>\r\n            <label className=\"form-control-label\">{label}</label>\r\n            <div>\r\n            <input className=\"form-control\" {...input} type={type}/>\r\n            {touched && ((error && <div className=\"error mt-1\">{error}</div>) || (warning && <span>{warning}</span>))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nPlannedExerciseForm = reduxForm({\r\n    form: \"plannedExercise\",\r\n    validate\r\n})(PlannedExerciseForm);\r\n\r\n// we want access to other form values\r\nconst selector = formValueSelector(\"plannedExercise\");\r\nPlannedExerciseForm = connect(\r\n    (state) => {\r\n        const measuredByValue = selector(state, 'measured_by')\r\n        return { measuredByValue };\r\n    }\r\n)(PlannedExerciseForm)\r\n\r\nexport default PlannedExerciseForm;","export const LOAD_PLANNED_ACTIVITIES = \"LOAD_PLANNED_ACTIVITIES\";\r\nexport const LOAD_PLANNED_ACTIVITIES_SUCCESS = \"LOAD_PLANNED_ACTIVITIES_SUCCESS\";\r\nexport const DELETE_PLANNED_ACTIVITY = \"DELETE_PLANNED_ACTIVITY\";\r\nexport const DELETE_PLANNED_ACTIVITY_SUCCESS = \"DELETE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const UPDATE_PLANNED_ACTIVITY = \"UPDATE_PLANNED_ACTIVITY\";\r\nexport const UPDATE_PLANNED_ACTIVITY_SUCCESS = \"UPDATE_PLANNED_ACTIVITY_SUCCESS\";\r\nexport const ADD_PLANNED_ACTIVITY = \"ADD_PLANNED_ACTIVITY\";\r\nexport const ADD_PLANNED_ACTIVITY_SUCCESS = \"ADD_PLANNED_ACTIVITY_SUCCESS\";\r\n\r\nexport const LOAD_PLANNED_RACES = \"LOAD_PLANNED_RACES\";\r\nexport const LOAD_PLANNED_RACES_SUCCESS = \"LOAD_PLANNED_RACES_SUCCESS\";\r\nexport const DELETE_PLANNED_RACE = \"DELETE_PLANNED_RACE\";\r\nexport const DELETE_PLANNED_RACE_SUCCESS = \"DELETE_PLANNED_RACE_SUCCESS\";\r\nexport const UPDATE_PLANNED_RACE = \"UPDATE_PLANNED_RACE\";\r\nexport const UPDATE_PLANNED_RACE_SUCCESS = \"UPDATE_PLANNED_RACE_SUCCESS\";\r\nexport const ADD_PLANNED_RACE = \"ADD_PLANNED_RACE\";\r\nexport const ADD_PLANNED_RACE_SUCCESS = \"ADD_PLANNED_RACE_SUCCESS\";\r\n\r\nexport const LOAD_PLANNED_EXERCISES = \"LOAD_PLANNED_EXERCISES\";\r\nexport const LOAD_PLANNED_EXERCISES_SUCCESS = \"LOAD_PLANNED_EXERCISES_SUCCESS\";\r\nexport const DELETE_PLANNED_EXERCISE = \"DELETE_PLANNED_EXERCISE\";\r\nexport const DELETE_PLANNED_EXERCISE_SUCCESS = \"DELETE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const UPDATE_PLANNED_EXERCISE = \"UPDATE_PLANNED_EXERCISE\";\r\nexport const UPDATE_PLANNED_EXERCISE_SUCCESS = \"UPDATE_PLANNED_EXERCISE_SUCCESS\";\r\nexport const ADD_PLANNED_EXERCISE = \"ADD_PLANNED_EXERCISE\";\r\nexport const ADD_PLANNED_EXERCISE_SUCCESS = \"ADD_PLANNED_EXERCISE_SUCCESS\";\r\n\r\nexport const LOAD_COMPLETED_ACTIVITIES = \"LOAD_COMPLETED_ACTIVITIES\";\r\nexport const LOAD_COMPLETED_ACTIVITIES_SUCCESS = \"LOAD_COMPLETED_ACTIVITIES_SUCCESS\";\r\n\r\nexport const LOAD_COMPLETED_EXERCISES = \"LOAD_COMPLETED_EXERCISES\";\r\nexport const LOAD_COMPLETED_EXERCISES_SUCCESS = \"LOAD_COMPLETED_EXERCISES_SUCCESS\";\r\n\r\nexport const LOAD_ACTIVITY_TYPES = \"LOAD_ACTIVITY_TYPES\";\r\nexport const LOAD_ACTIVITY_TYPES_SUCCESS = \"LOAD_ACTIVITY_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_TYPES = \"LOAD_EXERCISE_TYPES\";\r\nexport const LOAD_EXERCISE_TYPES_SUCCESS = \"LOAD_EXERCISE_TYPES_SUCCESS\";\r\n\r\nexport const LOAD_EXERCISE_CATEGORIES = \"LOAD_EXERCISE_CATEGORIES\";\r\nexport const LOAD_EXERCISE_CATEGORIES_SUCCESS = \"LOAD_EXERCISE_CATEGORIES_SUCCESS\";\r\n\r\nexport const LOAD_TRAINING_PLAN_GENERATOR_INPUTS = \"LOAD_TRAINING_PLAN_GENERATOR_INPUTS\";\r\nexport const LOAD_TRAINING_PLAN_GENERATOR_INPUTS_SUCCESS = \"LOAD_TRAINING_PLAN_GENERATOR_INPUTS_SUCCESS\";\r\nexport const ADD_PLANNED_ACTIVITIES = \"ADD_PLANNED_ACTIVITIES\";\r\nexport const ADD_PLANNED_ACTIVITIES_SUCCESS = \"ADD_PLANNED_ACTIVITIES_SUCCESS\";\r\n\r\nexport const LOAD_TRAINING_PLAN_TEMPLATES = \"LOAD_TRAINING_PLAN_TEMPLATES\";\r\nexport const LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS = \"LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS\";\r\nexport const COPY_TRAINING_PLAN_TEMPLATE = \"COPY_TRAINING_PLAN_TEMPLATE\";\r\nexport const COPY_TRAINING_PLAN_TEMPLATE_SUCCESS = \"COPY_TRAINING_PLAN_TEMPLATE_SUCCESS\";\r\n\r\nexport const LOAD_USER_INFO = \"LOAD_USER_INFO\";\r\nexport const LOAD_USER_INFO_SUCCESS = \"LOAD_USER_INFO_SUCCESS\";\r\nexport const UPDATE_USER_INFO = \"UPDATE_USER_INFO\";\r\nexport const UPDATE_USER_INFO_SUCCESS = \"UPDATE_USER_INFO_SUCCESS\";\r\n\r\nexport const SHOW_ALERT = \"SHOW_ALERT\";\r\n\r\nexport const ERROR_ENCOUNTERED = \"ERROR_ENCOUNTERED\";","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass PlannedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getPlannedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n    \r\n    postPlannedActivities = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activities\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivitiesApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedActivityApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedActivity = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedActivity = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_activity/\" + id + \"?scope=\" + scope;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedActivityApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedRacesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    postPlannedRaces = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_races\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedRacesApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedRaceApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedRace = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_race/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedRace = (id) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_race/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedRaceApi;","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport PlannedRacesApi from \"../api/PlannedRacesApi\";\r\nimport PlannedRaceApi from \"../api/PlannedRaceApi\";\r\n\r\nexport function loadPlannedRacesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_RACES_SUCCESS,\r\n        plannedRaces: responseData.planned_races\r\n    };\r\n}\r\n\r\nexport function addPlannedRace(requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedRacesApi();\r\n        return api.postPlannedRaces(requestBody).then(responseData => {\r\n            dispatch(addPlannedRaceSuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedRaceSuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_RACE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedRace(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedRaceApi();\r\n        return api.patchPlannedRace(id, requestBody).then(result => {\r\n            dispatch(updatePlannedRaceSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedRaceSuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_RACE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedRace(id) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.DELETE_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedRaceApi();\r\n        return api.deletePlannedRace(id).then(result => {\r\n            dispatch(deletePlannedRaceSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedRaceSuccess(id) {\r\n    return {\r\n        type: types.DELETE_PLANNED_RACE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        deletedId: id\r\n    };\r\n}","import ls from \"local-storage\";\r\n                \r\nclass PlannedExerciseApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n\r\n    patchPlannedExercise = (id, requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    deletePlannedExercise = (id, scope) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercise/\" + id + \"?scope=\" + scope;\r\n        \r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return true;\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExerciseApi;","import ls from \"local-storage\";\r\n                \r\nclass PlannedExercisesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    postPlannedExercises = (requestBody) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/planned_exercises\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default PlannedExercisesApi","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport PlannedExerciseApi from \"../api/PlannedExerciseApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadPlannedExercisesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_EXERCISES_SUCCESS,\r\n        plannedExercises: responseData.planned_exercises\r\n    };\r\n}\r\n\r\nexport function addPlannedExercise(requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_EXERCISE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(addPlannedExerciseSuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedExerciseSuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_EXERCISE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedExercise(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_PLANNED_EXERCISE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExerciseApi();\r\n        return api.patchPlannedExercise(id, requestBody).then(result => {\r\n            dispatch(updatePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedExerciseSuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_EXERCISE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedExercise(id, scope) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.DELETE_PLANNED_EXERCISE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExerciseApi();\r\n        return api.deletePlannedExercise(id, scope).then(result => {\r\n            dispatch(deletePlannedExerciseSuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedExerciseSuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_EXERCISE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport PlannedActivitiesApi from \"../api/PlannedActivitiesApi\";\r\nimport PlannedActivityApi from \"../api/PlannedActivityApi\";\r\nimport { loadPlannedRacesSuccess } from \"./plannedRaceActions\";\r\nimport { loadPlannedExercisesSuccess } from \"./plannedExerciseActions\";\r\n\r\nexport function loadPlannedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_PLANNED_ACTIVITIES,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivitiesApi();\r\n        return api.getPlannedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadPlannedActivitiesSuccess(responseData));\r\n                dispatch(loadPlannedRacesSuccess(responseData));\r\n                dispatch(loadPlannedExercisesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadPlannedActivitiesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_PLANNED_ACTIVITIES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        plannedActivities: responseData.planned_activities\r\n    };\r\n}\r\n\r\nexport function addPlannedActivity(requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_ACTIVITY,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivitiesApi();\r\n        return api.postPlannedActivities(requestBody).then(responseData => {\r\n            dispatch(addPlannedActivitySuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedActivitySuccess(responseData) {\r\n    return {\r\n        type: types.ADD_PLANNED_ACTIVITY_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        addedId: responseData.id\r\n    };\r\n}\r\n\r\nexport function updatePlannedActivity(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_PLANNED_ACTIVITY,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivityApi();\r\n        return api.patchPlannedActivity(id, requestBody).then(result => {\r\n            dispatch(updatePlannedActivitySuccess(id));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updatePlannedActivitySuccess(id) {\r\n    return {\r\n        type: types.UPDATE_PLANNED_ACTIVITY_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id\r\n    };\r\n}\r\n\r\nexport function deletePlannedActivity(id, scope) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.DELETE_PLANNED_ACTIVITY,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivityApi();\r\n        return api.deletePlannedActivity(id, scope).then(result => {\r\n            dispatch(deletePlannedActivitySuccess(id, scope));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function deletePlannedActivitySuccess(id, scope) {\r\n    return {\r\n        type: types.DELETE_PLANNED_ACTIVITY_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        deletedId: id,\r\n        scope: scope\r\n    };\r\n}","import ls from \"local-storage\";\r\n                \r\nclass ActivityTypesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getActivityTypes = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/activity_types\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default ActivityTypesApi;","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport ActivityTypesApi from \"../api/ActivityTypesApi\";\r\nimport { loadExerciseTypesSuccess } from \"./exerciseTypeActions\"\r\nimport { loadExerciseCategoriesSuccess } from \"./exerciseCategoryActions\"\r\n\r\nexport function loadActivityTypes() {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_ACTIVITY_TYPES,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new ActivityTypesApi();\r\n        return api.getActivityTypes().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadActivityTypesSuccess(responseData));\r\n                dispatch(loadExerciseTypesSuccess(responseData));\r\n                dispatch(loadExerciseCategoriesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadActivityTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_ACTIVITY_TYPES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        activityTypes: responseData.activity_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseTypesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_TYPES_SUCCESS,\r\n        exerciseTypes: responseData.exercise_types\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadExerciseCategoriesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_EXERCISE_CATEGORIES_SUCCESS,\r\n        exerciseCategories: responseData.exercise_categories\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport dateFns from \"date-fns\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport \"./CalendarDayModal.css\";\r\nimport ActivityTypeButtonSet from \"./ActivityTypeButtonSet\";\r\nimport ExerciseTypeButtonSet from \"./ExerciseTypeButtonSet\";\r\nimport CompletedActivitiesList from \"./CompletedActivitiesList\";\r\nimport CompletedExercisesList from \"./CompletedExercisesList\";\r\nimport PlannedRacesList from \"./PlannedRacesList\";\r\nimport PlannedActivitiesList from \"./PlannedActivitiesList\";\r\nimport PlannedExercisesList from \"./PlannedExercisesList\";\r\nimport PlannedActivityForm from \"./PlannedActivityForm\";\r\nimport PlannedRaceForm from \"./PlannedRaceForm\";\r\nimport PlannedExerciseForm from \"./PlannedExerciseForm\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as plannedRaceActions from \"../actions/plannedRaceActions\";\r\nimport * as plannedExerciseActions from \"../actions/plannedExerciseActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass CalendarDayModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showCalendarDayMain: true,\r\n            showPlannedActivityForm: false,\r\n            showPlannedRaceForm: false,\r\n            showPlannedExerciseForm: false,\r\n            isFutureDate: (props.calendarDay >= dateFns.startOfDay(new Date())),\r\n            plannedActivities: props.plannedActivities\r\n        }\r\n    }\r\n\r\n    togglePlannedActivityForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedActivityForm: !this.state.showPlannedActivityForm,\r\n            showPlannedRaceForm: false,\r\n            showPlannedExerciseForm: false\r\n        })\r\n    }\r\n\r\n    togglePlannedRaceForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedRaceForm: !this.state.showPlannedRaceForm,\r\n            showPlannedActivityForm: false,\r\n            showPlannedExerciseForm: false\r\n        })\r\n    }\r\n\r\n    togglePlannedExerciseForm = () => {\r\n        this.setState({\r\n            showCalendarDayMain: !this.state.showCalendarDayMain,\r\n            showPlannedExerciseForm: !this.state.showPlannedExerciseForm,\r\n            showPlannedActivityForm: false,\r\n            showPlannedRaceForm: false\r\n        })\r\n    }\r\n\r\n    // Planned Activity CRUD operations\r\n    handleAddPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleEditPlannedActivity = (formInitData) => {\r\n        this.setState({\r\n            plannedActivityFormInitData: formInitData\r\n        });\r\n        this.togglePlannedActivityForm();\r\n    }\r\n\r\n    handleSavePlannedActivity = (values) => {\r\n        console.log(values);\r\n        const requestBody = JSON.stringify({ \r\n            activity_type: values.activity_type,\r\n            activity_subtype: values.activity_subtype,\r\n            planned_date: values.planned_date,\r\n            planning_period: values.planning_period,\r\n            recurrence: values.recurrence,\r\n            description: values.description,\r\n            planned_distance: values.planned_distance\r\n        })\r\n        if (values.id) {\r\n            this.props.plannedActivityActions.updatePlannedActivity(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            this.props.plannedActivityActions.addPlannedActivity(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        }\r\n        this.togglePlannedActivityForm();\r\n    }\r\n    \r\n    handleRemovePlannedActivity = (plannedActivityId, scope) => {\r\n        this.props.plannedActivityActions.deletePlannedActivity(plannedActivityId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    // Planned Race CRUD operations\r\n    handleAddPlannedRace = (formInitData) => {\r\n        this.setState({\r\n            plannedRaceFormInitData: formInitData\r\n        });\r\n        this.togglePlannedRaceForm();\r\n    }\r\n\r\n    handleEditPlannedRace = (formInitData) => {\r\n        this.setState({\r\n            plannedRaceFormInitData: formInitData\r\n        });\r\n        this.togglePlannedRaceForm();\r\n    }\r\n\r\n    handleSavePlannedRace = (values) => {\r\n        const requestBody = JSON.stringify({ \r\n            name: values.name,\r\n            planned_date: values.planned_date,\r\n            race_type: values.race_type,\r\n            distance: values.distance,\r\n            entry_status: values.entry_status,\r\n            race_website_url: values.race_website_url,\r\n            notes: values.notes\r\n        });\r\n        console.log(requestBody);\r\n        if (values.id) {\r\n            this.props.plannedRaceActions.updatePlannedRace(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            this.props.plannedRaceActions.addPlannedRace(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        }\r\n        this.togglePlannedRaceForm();\r\n    }\r\n    \r\n    handleRemovePlannedRace = (plannedRaceId) => {\r\n        this.props.plannedRaceActions.deletePlannedRace(plannedRaceId).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    // CRUD operations for planned exercises\r\n    handleAddPlannedExercise = (id) => {\r\n        const calendarDay = dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\");\r\n        const planningPeriod = this.props.selectionType;\r\n\r\n        if (!id) {\r\n            const formInitData = {\r\n                isNewExerciseType: true,\r\n                measured_by: \"reps\",\r\n                planned_sets: 1,\r\n                planning_period: planningPeriod,\r\n                recurrence: \"weekly\",\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\"),\r\n                repeatOption: \"Repeat every \" + (planningPeriod === \"day\" ? dateFns.format(this.props.calendarDay, \"dddd\") : \"week\"),\r\n                categoryOptions: this.props.exerciseCategories,\r\n                exercise_category_id: (this.props.exerciseCategories.length > 0) ? this.props.exerciseCategories[0].id : null\r\n            }\r\n            this.setState({\r\n                plannedExerciseFormInitData: formInitData\r\n            });\r\n            this.togglePlannedExerciseForm();\r\n        } else {\r\n            const categories = this.props.plannedExercises.filter(function(plannedExercise) {\r\n                return plannedExercise.planned_date === calendarDay && plannedExercise.planning_period === planningPeriod;\r\n            });\r\n\r\n            let requestBody;\r\n            let existingPlannedExerciseId;\r\n            for (let category of categories) {\r\n                for (let exercise of category.exercises) {\r\n                    if (exercise.exercise_type_id === id) {\r\n                        existingPlannedExerciseId = exercise.id;\r\n                        requestBody = JSON.stringify({ \r\n                            planning_period: planningPeriod,\r\n                            recurrence: exercise.recurrence,\r\n                            planned_date: calendarDay,\r\n                            planned_sets: (exercise.planned_sets + 1),\r\n                            planned_reps: exercise.planned_reps,\r\n                            planned_seconds: exercise.planned_seconds\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (existingPlannedExerciseId) {\r\n                this.props.plannedExerciseActions.updatePlannedExercise(existingPlannedExerciseId, requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });\r\n            } else {\r\n                const exerciseType = this.props.exerciseTypes.filter(function(exerciseType) {\r\n                    return exerciseType.id === id;\r\n                })[0];\r\n                requestBody = JSON.stringify({\r\n                    exercise_type_id: id,\r\n                    planning_period: planningPeriod,\r\n                    recurrence: \"weekly\",\r\n                    planned_date: calendarDay,\r\n                    planned_reps: exerciseType.default_reps,\r\n                    planned_seconds: exerciseType.default_seconds\r\n                });\r\n                console.log(requestBody);\r\n                this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                    this.props.refresh(this.props.calendarDay);\r\n                });                \r\n            }\r\n        }\r\n    }\r\n\r\n    handleEditPlannedExercise = (formInitData) => {\r\n        this.setState({\r\n            plannedExerciseFormInitData: formInitData\r\n        });\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleSavePlannedExercise = (values) => {\r\n        if (values.id) {\r\n            const requestBody = JSON.stringify({ \r\n                planned_date: values.planned_date,\r\n                planning_period: values.planning_period,\r\n                recurrence: values.recurrence,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds\r\n            });\r\n            this.props.plannedExerciseActions.updatePlannedExercise(values.id, requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n            });\r\n        } else {\r\n            const requestBody = JSON.stringify({\r\n                exercise_name: values.exercise_name,\r\n                measured_by: values.measured_by,\r\n                exercise_category_id: values.exercise_category_id,\r\n                planned_sets: values.planned_sets,\r\n                planned_reps: values.planned_reps,\r\n                planned_seconds: values.planned_seconds,\r\n                planning_period: values.planning_period,\r\n                recurrence: values.recurrence,\r\n                planned_date: dateFns.format(this.props.calendarDay, \"YYYY-MM-DD\")\r\n            });\r\n            this.props.plannedExerciseActions.addPlannedExercise(requestBody).then(result => {\r\n                this.props.refresh(this.props.calendarDay);\r\n                // we need to refresh buttons too\r\n                this.props.activityTypeActions.loadActivityTypes();\r\n            });\r\n        }\r\n        this.togglePlannedExerciseForm();\r\n    }\r\n\r\n    handleRemovePlannedExercise = (plannedExerciseId, scope) => {\r\n        this.props.plannedExerciseActions.deletePlannedExercise(plannedExerciseId, scope).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const dateFormatFull = \"dddd DD MMMM YYYY\";\r\n        const dateFormatAbbrev = \"ddd DD MMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"modal-back-drop\">\r\n                <div className=\"modal-wrapper\">\r\n                    <div className=\"calendar-modal-header\">\r\n                        <div className=\"d-none d-sm-inline\">\r\n                            <h4>\r\n                                {this.props.selectionType === \"week\" && \"Week of \"}\r\n                                {dateFns.format(this.props.calendarDay, dateFormatFull)}\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"d-inline d-sm-none\">\r\n                            <h4>\r\n                                {this.props.selectionType === \"week\" && \"w/c \"}\r\n                                {dateFns.format(this.props.calendarDay, dateFormatAbbrev)}\r\n                            </h4>\r\n                        </div>\r\n                        <span className=\"close-modal-btn\" onClick={this.props.close}><i className=\"fa fa-window-close\"></i></span>\r\n                    </div>\r\n                    <div className=\"calendar-modal-body\">\r\n                        <div>\r\n                            {this.props.selectionType === \"week\" &&\r\n                            <div className=\"alert alert-info text-left\">These are activities and exercises that you can do on any day during the week. To add for a specific day click on that day in the calendar instead.</div>}\r\n                            {this.state.showCalendarDayMain &&\r\n                            <>\r\n                                {this.props.selectionType === \"day\" &&\r\n                                <>\r\n                                <CompletedActivitiesList calendarDay={this.props.calendarDay} />\r\n                                <PlannedRacesList calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedRace} onRemove={this.handleRemovePlannedRace} />\r\n                                <CompletedExercisesList calendarDay={this.props.calendarDay} />\r\n                                </>}\r\n                                <PlannedActivitiesList planningPeriod={this.props.selectionType} calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedActivity} onRemove={this.handleRemovePlannedActivity} />\r\n                                <PlannedExercisesList planningPeriod={this.props.selectionType} calendarDay={this.props.calendarDay} onEdit={this.handleEditPlannedExercise} onRemove={this.handleRemovePlannedExercise} />\r\n                                {(this.state.isFutureDate || this.props.selectionType === \"week\") &&\r\n                                <>\r\n                                    <ActivityTypeButtonSet planningPeriod={this.props.selectionType} calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedActivity} onAddRace={this.handleAddPlannedRace} />\r\n                                    <h3>Add Exercises</h3>\r\n                                    <ExerciseTypeButtonSet calendarDay={this.props.calendarDay} onAdd={this.handleAddPlannedExercise} />\r\n                                </>}\r\n                            </>}\r\n                            {this.state.showPlannedActivityForm &&\r\n                            <PlannedActivityForm initData={this.state.plannedActivityFormInitData} onSubmit={this.handleSavePlannedActivity} handleBackClick={this.togglePlannedActivityForm} />}\r\n                            {this.state.showPlannedRaceForm &&\r\n                            <PlannedRaceForm initData={this.state.plannedRaceFormInitData} onSubmit={this.handleSavePlannedRace} handleBackClick={this.togglePlannedRaceForm} />}\r\n                            {this.state.showPlannedExerciseForm &&\r\n                            <PlannedExerciseForm initData={this.state.plannedExerciseFormInitData} onSubmit={this.handleSavePlannedExercise} handleBackClick={this.togglePlannedExerciseForm} />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        plannedExercises: state.plannedExercises,\r\n        exerciseTypes: state.exerciseTypes,\r\n        exerciseCategories: state.exerciseCategories\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        plannedRaceActions: bindActionCreators(plannedRaceActions, dispatch),\r\n        plannedExerciseActions: bindActionCreators(plannedExerciseActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarDayModal);","import ls from \"local-storage\";\r\n                \r\nclass TrainingPlanGeneratorApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getTrainingPlanGenerator = (targetRaceDistance, targetRaceDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/training_plan_generator\" +\r\n                                                            \"?targetRaceDistance=\" + targetRaceDistance +\r\n                                                            \"&targetRaceDate=\" + targetRaceDate;\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrainingPlanGeneratorApi;","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport { showAlert } from \"./alertActions\";\r\nimport TrainingPlanGeneratorApi from \"../api/TrainingPlanGeneratorApi\";\r\nimport PlannedActivitiesApi from \"../api/PlannedActivitiesApi\";\r\n\r\nexport function loadTrainingPlanGeneratorInputs(targetRaceDistance, targetRaceDate) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_TRAINING_PLAN_GENERATOR_INPUTS,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new TrainingPlanGeneratorApi();\r\n        return api.getTrainingPlanGenerator(targetRaceDistance, targetRaceDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadTrainingPlanGeneratorInputsSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadTrainingPlanGeneratorInputsSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_TRAINING_PLAN_GENERATOR_INPUTS_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        trainingPlanGeneratorInputs: responseData.training_plan_generator_inputs\r\n    };\r\n}\r\n\r\nexport function addPlannedActivities(requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_ACTIVITIES,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedActivitiesApi();\r\n        return api.postPlannedActivities(requestBody).then(responseData => {\r\n            dispatch(addPlannedActivitiesSuccess(responseData, dispatch));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function addPlannedActivitiesSuccess(responseData, dispatch) {\r\n    const alertMessage = responseData.message;\r\n    dispatch(showAlert(alertMessage));\r\n    \r\n    return {\r\n        type: types.ADD_PLANNED_ACTIVITIES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        message: responseData.message\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function showAlert(alertMessage, actionLinkText, actionFormInitData) {\r\n    return {\r\n        type: types.SHOW_ALERT,\r\n        alertMessage: alertMessage,\r\n        actionLinkText: actionLinkText,\r\n        actionFormInitData: actionFormInitData\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { reduxForm, Field, formValueSelector } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport * as trainingPlanGeneratorActions from \"../actions/trainingPlanGeneratorActions\";\r\nimport { filterPlannedRacesById } from \"../helpers/trainingPlan\";\r\n\r\nclass TrainingPlanGeneratorModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            targetRace: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const initData = {\r\n            long_run_planning_period: \"day\",\r\n            long_run_day: \"Sun\",\r\n            other_runs_per_week: \"0\",\r\n            other_runs_planning_period: \"day\"\r\n        }\r\n        this.props.initialize(initData);\r\n    }\r\n\r\n    handleRaceSelected = (event) => { \r\n        const targetRaceId = Number(event.target.value);\r\n        const targetRace = filterPlannedRacesById(this.props.plannedRaces, targetRaceId);\r\n        this.setState({\r\n            targetRace: targetRace\r\n        })\r\n        if (targetRace) {\r\n            this.props.trainingPlanGeneratorActions.loadTrainingPlanGeneratorInputs(targetRace.distance, targetRace.planned_date);\r\n        }\r\n    }\r\n\r\n    handleGeneratePlanClick = (values) => {\r\n        const requestBody = JSON.stringify({\r\n            target_race_distance: this.state.targetRace.distance,\r\n            target_race_date: this.state.targetRace.planned_date,\r\n            long_run_planning_period: values.long_run_planning_period,\r\n            long_run_day: values.long_run_day,\r\n            other_runs_per_week: values.other_runs_per_week,\r\n            other_runs_planning_period: values.other_runs_planning_period,\r\n            other_run_days: values.other_run_days,\r\n            other_run_types: values.other_run_types\r\n        })\r\n        this.props.trainingPlanGeneratorActions.addPlannedActivities(requestBody).then(result => {\r\n            this.props.refresh(this.props.selectedDate);\r\n        });\r\n        this.props.close();\r\n    }\r\n\r\n    renderTargetRaceOption = (plannedRace) => {\r\n        return (\r\n            <option key={plannedRace.id} value={plannedRace.id}>{plannedRace.name} ({plannedRace.planned_date})</option>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { user, trainingPlanGeneratorInputs } = this.props;\r\n        const plannedRaces = this.props.plannedRaces;\r\n        const targetRaceOptions = plannedRaces.map(this.renderTargetRaceOption);\r\n        const runDayOptions = [\r\n            {name: \"Monday\", value: \"day1\"},\r\n            {name: \"Tuesday\", value: \"day2\"},\r\n            {name: \"Wednesday\", value: \"day3\"},\r\n            {name: \"Thursday\", value: \"day4\"},\r\n            {name: \"Friday\", value: \"day5\"},\r\n            {name: \"Saturday\", value: \"day6\"},\r\n            {name: \"Sunday\", value: \"day7\"}\r\n        ];\r\n        const runTypeOptions = [\r\n            {name: \"Intervals / Fartlek\", value: \"intervals\"},\r\n            {name: \"Tempo\", value: \"tempo\"},\r\n            {name: \"Hills\", value: \"hills\"}\r\n        ];\r\n\r\n        return (\r\n            <div className=\"modal-back-drop\">\r\n                <div className=\"modal-wrapper\">\r\n                    <div className=\"generic-modal-header\">\r\n                        <div className=\"d-inline\">\r\n                            <h4>Generate Training Plan</h4>\r\n                        </div>\r\n                        <span className=\"close-modal-btn\" onClick={this.props.close}><i className=\"fa fa-window-close\"></i></span>\r\n                    </div>\r\n                    <div className=\"generic-modal-body\">\r\n                        <form onSubmit={this.props.handleSubmit(this.handleGeneratePlanClick)} className=\"form\">\r\n                            {/* Dropdown for user to select a race */}\r\n                            <div className=\"form-group \">\r\n                                <label className=\"form-control-label\" htmlFor=\"target_race_id\">Choose your target race</label>\r\n                                <Field component=\"select\" className=\"form-control\" id=\"target_race_id\" name=\"target_race_id\" onChange={this.handleRaceSelected}>\r\n                                    <option value=\"0\">(Please select a race)</option>\r\n                                    {targetRaceOptions}\r\n                                </Field>\r\n                            </div>\r\n                            {targetRaceOptions.length === 0 &&\r\n                            (<p>To use the Training Plan Generator you will first need to add a race to your calendar. Close this dialog and then click into the calendar on the date\r\n                                of your target race to add the event. Make sure you specify the distance, and you'll then be able to select it as an option above.</p>)}\r\n                            {this.state.targetRace && trainingPlanGeneratorInputs && (\r\n                            <>\r\n                            <h5>How we'll generate your plan</h5>\r\n                            <p>\r\n                                Your selected race is <span className=\"font-weight-bold\">{this.state.targetRace.distance_formatted}</span> long.\r\n                                Let's come up with a training plan for the remaining <span className=\"font-weight-bold\">{trainingPlanGeneratorInputs.weeks_to_target_race}</span> weeks until the race,\r\n                                given your activity from the last 4 weeks where you've averaged {trainingPlanGeneratorInputs.last_4_weeks.runs_per_week} runs per week with a longest run of {trainingPlanGeneratorInputs.last_4_weeks.longest_distance_formatted}.\r\n                            </p>\r\n                            {trainingPlanGeneratorInputs && trainingPlanGeneratorInputs.total_runs_above_target_distance > 1 && (\r\n                            <>\r\n                            <p>\r\n                                You've done the distance for this race {trainingPlanGeneratorInputs.total_runs_above_target_distance} times before.\r\n                                We'll look at the training you did before the {trainingPlanGeneratorInputs.current_pb.activity_name} on {trainingPlanGeneratorInputs.current_pb.activity_date} where you averaged {trainingPlanGeneratorInputs.current_pb.average_pace_formatted} and factor that into your suggested training plan.\r\n                                The longest run you did leading up to that event was {trainingPlanGeneratorInputs.pre_pb_long_runs.longest_distance_formatted}.\r\n                            </p>\r\n                            </>)}\r\n                            </>)}\r\n                            {this.state.targetRace && (\r\n                            <h5>Plan your long runs</h5>\r\n                            )}\r\n                            {this.state.targetRace && user && user.has_flexible_planning_enabled && (\r\n                            <div className=\"form-group \">\r\n                                <label className=\"form-control-label\" htmlFor=\"long_run_planning_period\">Would you like to choose a day for your long runs?</label>\r\n                                <Field component=\"select\" className=\"form-control\" id=\"long_run_planning_period\" name=\"long_run_planning_period\">\r\n                                    <option value=\"day\">Yes, let me choose a specific day for my long runs</option>\r\n                                    <option value=\"week\">No, I'll be flexible about what day during the week to do my long runs</option>\r\n                                </Field>\r\n                            </div>)}\r\n                            {this.state.targetRace && (!(user && user.has_flexible_planning_enabled) || this.props.longRunPlanningPeriodValue === \"day\") && (\r\n                            <div className=\"form-group \">\r\n                                <label className=\"form-control-label\" htmlFor=\"long_run_day\">Choose a day for your long run</label>\r\n                                <Field component=\"select\" className=\"form-control\" id=\"long_run_day\" name=\"long_run_day\">\r\n                                    <option value=\"Mon\">Monday</option>\r\n                                    <option value=\"Tue\">Tuesday</option>\r\n                                    <option value=\"Wed\">Wednesday</option>\r\n                                    <option value=\"Thu\">Thursday</option>\r\n                                    <option value=\"Fri\">Friday</option>\r\n                                    <option value=\"Sat\">Saturday</option>\r\n                                    <option value=\"Sun\">Sunday</option>\r\n                                </Field>\r\n                            </div>)}\r\n                            {this.state.targetRace && (\r\n                            <h5>Plan your other runs</h5>\r\n                            )}\r\n                            {this.state.targetRace && (\r\n                            <div className=\"form-group \">\r\n                                <label className=\"form-control-label\" htmlFor=\"other_runs_per_week\">How many other runs would you like to include each week (excluding your long run)?</label>\r\n                                <Field component=\"select\" className=\"form-control\" id=\"other_runs_per_week\" name=\"other_runs_per_week\">\r\n                                    <option value=\"0\">None, I'll stick to just the long run</option>\r\n                                    <option value=\"1\">1 more run per week</option>\r\n                                    <option value=\"2\">2 more runs per week</option>\r\n                                    <option value=\"3\">3 more runs per week</option>\r\n                                    <option value=\"4\">4 more runs per week</option>\r\n                                    <option value=\"5\">5 more runs per week</option>\r\n                                </Field>\r\n                            </div>)}\r\n                            {this.state.targetRace && this.props.otherRunsPerWeekValue !== \"0\" && user && user.has_flexible_planning_enabled && (\r\n                            <div className=\"form-group \">\r\n                                <label className=\"form-control-label\" htmlFor=\"other_runs_planning_period\">Would you like your remaining runs to be planned for specific days?</label>\r\n                                <Field component=\"select\" className=\"form-control\" id=\"other_runs_planning_period\" name=\"other_runs_planning_period\">\r\n                                    <option value=\"day\">Yes, generate runs for specific days of the week</option>\r\n                                    <option value=\"week\">No, I'll be flexible about what days during the week to do my remaining runs</option>\r\n                                </Field>\r\n                            </div>)}\r\n                            {this.state.targetRace && this.props.otherRunsPerWeekValue !== \"0\" && (!(user && user.has_flexible_planning_enabled) || this.props.otherRunsPlanningPeriodValue === \"day\") && (\r\n                            <>\r\n                            <p>What other days of the week are you able to run on?</p>\r\n                            <div className=\"form-group row\">\r\n                                {runDayOptions.map(runDay => {\r\n                                    return (\r\n                                        <div key={runDay.value} className=\"col-4\">\r\n                                        <Field component=\"input\" type=\"checkbox\" name={`other_run_days.${runDay.value}`} />\r\n                                        &nbsp;<label className=\"form-control-label\" htmlFor={`other_run_days.${runDay.value}`}>{runDay.name}</label>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                            </>\r\n                            )}\r\n                            {this.state.targetRace && this.props.otherRunsPerWeekValue > \"1\" && (\r\n                            <>\r\n                            <p>What types of run would you like to do aside from your long run and easy runs?</p>\r\n                            <div className=\"form-group row\">\r\n                                {runTypeOptions.map(runType => {\r\n                                    return (\r\n                                        <div key={runType.value} className=\"col-4\">\r\n                                        <Field component=\"input\" type=\"checkbox\" name={`other_run_types.${runType.value}`} />\r\n                                        &nbsp;<label className=\"form-control-label\" htmlFor={`other_run_types.${runType.value}`}>{runType.name}</label>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                            </>\r\n                            )}\r\n                            <button type=\"submit\" className=\"btn btn-primary mr-1\">Generate Plan</button>\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={this.props.close}>Cancel</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nTrainingPlanGeneratorModal = reduxForm({\r\n    form: \"trainingPlanGenerator\"\r\n})(TrainingPlanGeneratorModal);\r\n\r\n// we want access to other form values\r\nconst selector = formValueSelector(\"trainingPlanGenerator\");\r\nTrainingPlanGeneratorModal = connect(\r\n    (state) => {\r\n        const longRunPlanningPeriodValue = selector(state, \"long_run_planning_period\");\r\n        const otherRunsPerWeekValue = selector(state, \"other_runs_per_week\");\r\n        const otherRunsPlanningPeriodValue = selector(state, \"other_runs_planning_period\");\r\n        return { longRunPlanningPeriodValue, otherRunsPerWeekValue, otherRunsPlanningPeriodValue };\r\n    }\r\n)(TrainingPlanGeneratorModal)\r\n \r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.user,\r\n        plannedRaces: state.plannedRaces,\r\n        trainingPlanGeneratorInputs: state.trainingPlanGeneratorInputs\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        trainingPlanGeneratorActions: bindActionCreators(trainingPlanGeneratorActions, dispatch)\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrainingPlanGeneratorModal);","class TrainingPlanTemplatesApi {\r\n    constructor() {\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getTrainingPlanTemplates = () => {\r\n        const options = {\r\n            method: \"GET\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/training_plan_templates\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrainingPlanTemplatesApi;","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport TrainingPlanTemplatesApi from \"../api/TrainingPlanTemplatesApi\";\r\nimport PlannedExercisesApi from \"../api/PlannedExercisesApi\";\r\n\r\nexport function loadTrainingPlanTemplates() {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.ADD_PLANNED_RACE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new TrainingPlanTemplatesApi();\r\n        return api.getTrainingPlanTemplates().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadTrainingPlanTemplatesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadTrainingPlanTemplatesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        trainingPlanTemplates: responseData.training_plan_templates\r\n    };\r\n}\r\n\r\nexport function copyTrainingPlanTemplate(templateId) {\r\n    const requestBody = JSON.stringify({\r\n        template_id: templateId\r\n    });\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.COPY_TRAINING_PLAN_TEMPLATE,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new PlannedExercisesApi();\r\n        return api.postPlannedExercises(requestBody).then(responseData => {\r\n            dispatch(copyTrainingPlanTemplateSuccess(responseData));\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function copyTrainingPlanTemplateSuccess(responseData) {\r\n    return {\r\n        type: types.COPY_TRAINING_PLAN_TEMPLATE_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        message: responseData.message\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport * as trainingPlanTemplateActions from \"../actions/trainingPlanTemplateActions\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\n\r\nclass TrainingPlanToolsContainer extends Component {  \r\n\r\n    componentDidMount() {\r\n        this.props.trainingPlanTemplateActions.loadTrainingPlanTemplates();\r\n    }\r\n\r\n    handleAddToTrainingPlan = (templateId) => {\r\n        this.props.trainingPlanTemplateActions.copyTrainingPlanTemplate(templateId).then(result => {\r\n            this.props.refresh(this.props.calendarDay);\r\n            this.props.activityTypeActions.loadActivityTypes();\r\n        });\r\n    }\r\n\r\n    renderTemplateDetails = (template) => {\r\n        return (\r\n            <div key={template.id}>\r\n                <hr />\r\n                <div className=\"alert alert-info\">\r\n                    <h6>{template.name} [<a href=\"#add\" onClick={() => this.handleAddToTrainingPlan(template.id)}>Add to Training Plan</a>]</h6>\r\n                    <p>{template.description} <a href={template.link_url} target=\"_blank\" rel=\"noopener noreferrer\">{template.link_text}</a></p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let templates = this.props.trainingPlanTemplates;\r\n        let templateDetailsList = templates.map(this.renderTemplateDetails);\r\n\r\n        return (\r\n            <>\r\n            <div className=\"card mt-4\">\r\n                <div className=\"card-header\">\r\n                    <h4>Try out the new Training Plan Generator for runners</h4>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <p>You can now generate a customised training plan for your running races. This is a very early release of\r\n                        a tool we'll be refining to suit more athletes and types of events, and it will work best for people training\r\n                        for events of around half marathon distance. Let us know how you get on with it and if there's anything in particular you'd like to see improved\r\n                        via <a href=\"mailto:feedback@trainingticks.com\">feedback@trainingticks.com</a>.</p>\r\n                    <p>Start by adding your planned race to the calendar above if you haven't already, ensuring that you specify the distance of the event. Then you'll be able\r\n                        to <a href=\"#tpg\" onClick={this.props.onGenerateTrainingPlan} className=\"font-weight-bold\">Generate a Training Plan</a> taking\r\n                        you up to the week of the race.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"card mt-4\">\r\n                <div className=\"card-header\">\r\n                    <h4>Get started using a template</h4>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <p>If you're looking for somewhere to start with creating your personalised training plan,\r\n                        try one of these templates to populate some initial exercises, and then adapt as required.\r\n                        Let us know via <a href=\"mailto:feedback@trainingticks.com\">feedback@trainingticks.com</a> if there's\r\n                        a training plan you've come across that you'd like to be available as a template.</p>\r\n                    <p><i>Please note that Training Ticks has no association with any of the websites or authors referenced below.\r\n                    We are sharing them as useful resources that will hopefully help your training.</i></p>\r\n                    {templateDetailsList}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        trainingPlanTemplates: state.trainingPlanTemplates\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        trainingPlanTemplateActions: bindActionCreators(trainingPlanTemplateActions, dispatch),\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch)\r\n    };\r\n}\r\n\r\nTrainingPlanToolsContainer = connect(mapStateToProps, mapDispatchToProps)(TrainingPlanToolsContainer);\r\n\r\nexport default TrainingPlanToolsContainer;","import dateFns from \"date-fns\";\r\nimport ls from \"local-storage\";\r\n                \r\nclass CompletedActivitiesApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n        this.dateFormat = \"YYYY-MM-DD\";\r\n    }\r\n    \r\n    getCompletedActivities = (startDate, endDate) => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/completed_activities?\"\r\n                                             + \"startDate=\" + dateFns.format(startDate, this.dateFormat)\r\n                                             + \"&endDate=\" + dateFns.format(endDate, this.dateFormat);\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default CompletedActivitiesApi;","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport CompletedActivitiesApi from \"../api/CompletedActivitiesApi\";\r\nimport { loadCompletedExercisesSuccess } from \"./completedExerciseActions\";\r\n\r\nexport function loadCompletedActivities(startDate, endDate) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_COMPLETED_ACTIVITIES,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new CompletedActivitiesApi();\r\n        return api.getCompletedActivities(startDate, endDate).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadCompletedActivitiesSuccess(responseData));\r\n                dispatch(loadCompletedExercisesSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadCompletedActivitiesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_COMPLETED_ACTIVITIES_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        completedActivities: responseData.completed_activities\r\n    };\r\n}","import * as types from \"./actionTypes\";\r\n\r\nexport function loadCompletedExercisesSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_COMPLETED_EXERCISES_SUCCESS,\r\n        completedExercises: responseData.completed_exercises\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport dateFns from \"date-fns\";\r\n\r\nimport CalendarDayModal from \"./CalendarDayModal\";\r\n// import TrainingPlanIntroContainer from \"./TrainingPlanIntroContainer\";\r\nimport TrainingPlanGeneratorModal from \"./TrainingPlanGeneratorModal\";\r\nimport TrainingPlanToolsContainer from \"./TrainingPlanToolsContainer\";\r\nimport * as plannedActivityActions from \"../actions/plannedActivityActions\";\r\nimport * as completedActivityActions from \"../actions/completedActivityActions\";\r\nimport { filterPlannedActivities, filterPlannedRaces, filterPlannedExercises, filterCompletedActivities, filterCompletedExercises } from \"../helpers/trainingPlan\";\r\nimport RaceDayBackground from '../static/img/race-day-bg.png';\r\n\r\nclass Calendar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentMonth: new Date(),\r\n            today: new Date(),\r\n            selectedDate: new Date(),\r\n            selectedWeek: null,\r\n            showCalendarDayModal: false,\r\n            showCalendarWeekModal: false,\r\n            showTrainingPlanGeneratorModal: false\r\n        };\r\n    }\r\n\r\n    refreshPlannedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.plannedActivityActions.loadPlannedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshCompletedActivities = (currentMonth) => {\r\n        const startDate = dateFns.startOfWeek(dateFns.startOfMonth(currentMonth), {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(dateFns.endOfMonth(currentMonth), {weekStartsOn: 1});\r\n        this.props.completedActivityActions.loadCompletedActivities(startDate, endDate);\r\n    }\r\n\r\n    refreshAllActivities = (currentMonth) => {\r\n        this.refreshPlannedActivities(currentMonth);\r\n        this.refreshCompletedActivities(currentMonth);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshAllActivities(this.state.currentMonth);\r\n    }\r\n\r\n    renderHeader = () => {\r\n        const dateFormat = \"MMMM YYYY\";\r\n\r\n        return (\r\n            <div className=\"header row flex-middle\">\r\n                <div className=\"col col-start\">\r\n                    <div className=\"icon\" onClick={this.prevMonth}>\r\n                        chevron_left\r\n                    </div>\r\n                </div>\r\n                <div className=\"col col-center\">\r\n                    <span>\r\n                        {dateFns.format(this.state.currentMonth, dateFormat)}\r\n                    </span>\r\n                </div>\r\n                <div className=\"col col-end\" onClick={this.nextMonth}>\r\n                    <div className=\"icon\">chevron_right</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDayNames = () => {\r\n        const dateFormatFull = \"dddd\";\r\n        const dateFormatAbbrev = \"ddd\";\r\n        const days = [];\r\n\r\n        let startDate = dateFns.startOfWeek(this.state.currentMonth, {weekStartsOn: 1});\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <div className=\"col col-center\" key={i}>\r\n                    <div className=\"d-none d-md-block\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatFull)}\r\n                    </div>\r\n                    <div className=\"d-block d-md-none\">\r\n                        {dateFns.format(dateFns.addDays(startDate, i), dateFormatAbbrev)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"days row\">\r\n                {days}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedActivityBadge = (plannedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedActivity.category_key;\r\n\r\n        return (\r\n            <div key={plannedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedActivity.activity_subtype}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none \">\r\n                    <span className={badgeClass}>{plannedActivity.activity_subtype[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedRaceBadge = (plannedRace) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedRace.category_key;\r\n\r\n        return (\r\n            <div key={plannedRace.id} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}>{plannedRace.name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlannedExerciseCategoryBadge = (plannedExerciseCategory) => {\r\n        const badgeClass = \"badge badge-primary \" +  plannedExerciseCategory.category_key;\r\n\r\n        return (\r\n            <div key={plannedExerciseCategory.category_key + plannedExerciseCategory.planned_date} className=\"d-inline\">\r\n                <div className=\"d-none d-md-inline\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name}</span>\r\n                </div>\r\n                <div className=\"d-inline d-md-none\">\r\n                    <span className={badgeClass}>{plannedExerciseCategory.category_name[0]}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedActivityBadge = (completedActivity) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedActivity.category_key;\r\n\r\n        return (\r\n            <div key={completedActivity.id} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}><div className=\"d-none d-md-inline\"><i className=\"fa fa-check\"></i></div> {completedActivity.name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedExerciseCategoryBadge = (completedExerciseCategory) => {\r\n        const badgeClass = \"badge badge-primary \" +  completedExerciseCategory.category_key;\r\n\r\n        return (\r\n            <div key={completedExerciseCategory.category_key + completedExerciseCategory.exercise_date} className=\"d-inline\">\r\n                <div className=\"d-inline\">\r\n                    <span className={badgeClass}><div className=\"d-none d-md-inline\"><i className=\"fa fa-check\"></i></div> {completedExerciseCategory.category_name}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCells = () => {\r\n        const { currentMonth, selectedDate, selectedWeek, today } = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart, {weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek(monthEnd, {weekStartsOn: 1});\r\n        const dateFormat = \"D\";\r\n        \r\n        let rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n\r\n        while (day <= endDate) {\r\n            const weekCommencingDay = day;\r\n\r\n            for (let i = 0; i < 7; i++) {\r\n\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cloneDay = day;\r\n\r\n                const plannedActivities = filterPlannedActivities(this.props.plannedActivities, day, \"day\");\r\n                const plannedActivityBadges = plannedActivities.map(this.renderPlannedActivityBadge);\r\n\r\n                const plannedRaces = filterPlannedRaces(this.props.plannedRaces, day);\r\n                const plannedRaceBadges = plannedRaces.map(this.renderPlannedRaceBadge);\r\n\r\n                const plannedExerciseCategories = filterPlannedExercises(this.props.plannedExercises, day, \"day\");\r\n                const plannedExerciseCategoryBadges = plannedExerciseCategories.map(this.renderPlannedExerciseCategoryBadge);\r\n\r\n                const completedActivities = filterCompletedActivities(this.props.completedActivities, day);\r\n                const completedActivityBadges = completedActivities.map(this.renderCompletedActivityBadge);\r\n\r\n                let backgroundStyle = {}\r\n                let isRaceDay = false;\r\n                if (plannedRaces.length > 0) {\r\n                    isRaceDay = true;\r\n                } else {\r\n                    for (let activity of completedActivities) {\r\n                        if (activity.is_race === true) {\r\n                            isRaceDay = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isRaceDay) {\r\n                    backgroundStyle = {\r\n                        backgroundImage: `url(${RaceDayBackground})`,\r\n                        backgroundSize: \"cover\"\r\n                    };\r\n                }\r\n\r\n                const completedExercises = filterCompletedExercises(this.props.completedExercises, day);\r\n                const completedExerciseCategoryBadges = completedExercises.map(this.renderCompletedExerciseCategoryBadge);\r\n                \r\n                days.push(\r\n                    <div className={`col cell\r\n                            ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}\r\n                            ${dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"}\r\n                            ${dateFns.isBefore(day, today) ? \"past\" : \"\"}\r\n                        `} style={backgroundStyle} key={day} onClick={() => this.onDateClick(dateFns.parse(cloneDay), plannedActivities)}>\r\n                        <span className=\"number\">{formattedDate}</span>\r\n                        <span className=\"bg\">{formattedDate}</span>\r\n                        <div className=\"cell-content\">\r\n                            <div>{completedActivityBadges}</div>\r\n                            <div>{completedExerciseCategoryBadges}</div>\r\n                            <div>{plannedActivityBadges}</div>\r\n                            <div>{plannedRaceBadges}</div>\r\n                            <div>{plannedExerciseCategoryBadges}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n\r\n            // Add rows for flexible planning of future weeks if the user has it enabled\r\n            if (this.props.user && this.props.user.has_flexible_planning_enabled && dateFns.isAfter(day, today)) {\r\n                const plannedWeekActivities = filterPlannedActivities(this.props.plannedActivities, weekCommencingDay, \"week\");\r\n                const plannedWeekActivityBadges = plannedWeekActivities.map(this.renderPlannedActivityBadge);\r\n\r\n                const plannedWeekExerciseCategories = filterPlannedExercises(this.props.plannedExercises, weekCommencingDay, \"week\");\r\n                const plannedWeekExerciseCategoryBadges = plannedWeekExerciseCategories.map(this.renderPlannedExerciseCategoryBadge);\r\n\r\n                rows.push(\r\n                    <div key={\"wc-\" + weekCommencingDay} className=\"row\">\r\n                        <div className=\"week-todos\">\r\n                            <div className={`col cell\r\n                            ${dateFns.isSameDay(weekCommencingDay, selectedWeek) ? \"selected\" : \"\"}`} onClick={() => this.onWeekClick(dateFns.parse(weekCommencingDay))}>\r\n                                <div className=\"cell-content\">\r\n                                    {\"Week of \" + dateFns.format(weekCommencingDay, \"D MMMM\")} (to do any day):&nbsp;\r\n                                    {plannedWeekActivityBadges}\r\n                                    {plannedWeekExerciseCategoryBadges}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            rows.push(\r\n                <div className=\"row\" key={day}>\r\n                    {days}\r\n                </div>\r\n            );\r\n            days = [];\r\n        }\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onDateClick = (day, plannedActivities) => {\r\n        this.setState({\r\n            selectedDate: day,\r\n            selectedWeek: null,\r\n            showCalendarDayModal: true,\r\n            showCalendarWeekModal: false,\r\n            showTrainingPlanGeneratorModal: false,\r\n            selectedDatePlannedActivities: plannedActivities // todo: does this still get used?\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n    };\r\n\r\n    onWeekClick = (weekStartDate) => {\r\n        this.setState({\r\n            selectedDate: null,\r\n            selectedWeek: weekStartDate,\r\n            showCalendarDayModal: false,\r\n            showCalendarWeekModal: true,\r\n            showTrainingPlanGeneratorModal: false\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n    };\r\n\r\n    handleTrainingPlanGeneratorOpen = (weekStartDate) => {\r\n        this.setState({\r\n            showCalendarDayModal: false,\r\n            showCalendarWeekModal: false,\r\n            showTrainingPlanGeneratorModal: true\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n    };\r\n\r\n    handleCloseModal = () => {\r\n        this.setState({\r\n            showCalendarDayModal: false,\r\n            showCalendarWeekModal: false,\r\n            showTrainingPlanGeneratorModal: false\r\n        });\r\n        document.body.classList.toggle(\"noscroll\");\r\n        this.refreshPlannedActivities(this.state.currentMonth);\r\n    }\r\n\r\n    nextMonth = () => {\r\n        const newMonth = dateFns.addMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    prevMonth = () => {\r\n        const newMonth = dateFns.subMonths(this.state.currentMonth, 1);\r\n        this.setState({\r\n            currentMonth: newMonth\r\n        });\r\n        this.refreshAllActivities(newMonth);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            {/* <TrainingPlanIntroContainer onGenerateTrainingPlan={this.handleTrainingPlanGeneratorOpen} /> */}\r\n            <div className=\"calendar\">\r\n                {this.renderHeader()}\r\n                {this.renderDayNames()}\r\n                {this.renderCells()}\r\n            </div>\r\n            {this.state.showCalendarDayModal && (\r\n            <CalendarDayModal className=\"modal\" selectionType=\"day\" calendarDay={this.state.selectedDate} refresh={this.refreshPlannedActivities} close={this.handleCloseModal} />)}\r\n            {this.state.showCalendarWeekModal && (\r\n            <CalendarDayModal className=\"modal\" selectionType=\"week\" calendarDay={this.state.selectedWeek} refresh={this.refreshPlannedActivities} close={this.handleCloseModal} />)}\r\n            {this.state.showTrainingPlanGeneratorModal && (\r\n            <TrainingPlanGeneratorModal className=\"modal\" refresh={this.refreshPlannedActivities} selectedDate={this.state.selectedDate} close={this.handleCloseModal}  />)}\r\n            <TrainingPlanToolsContainer calendarDay={this.state.selectedDate} onGenerateTrainingPlan={this.handleTrainingPlanGeneratorOpen} refresh={this.refreshPlannedActivities} />\r\n            </>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.user,\r\n        plannedActivities: state.plannedActivities,\r\n        plannedRaces: state.plannedRaces,\r\n        plannedExercises: state.plannedExercises,\r\n        completedActivities: state.completedActivities,\r\n        completedExercises: state.completedExercises\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        plannedActivityActions: bindActionCreators(plannedActivityActions, dispatch),\r\n        completedActivityActions: bindActionCreators(completedActivityActions, dispatch)\r\n    };\r\n}\r\n\r\nCalendar = connect(mapStateToProps, mapDispatchToProps)(Calendar)\r\n\r\nexport default Calendar;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Alert extends Component {\r\n    render() {\r\n        const alert = this.props.alert;\r\n        return (\r\n            <>\r\n            {alert && alert.showAlert && (\r\n            <div className=\"alert alert-info\">\r\n                {alert.message}&nbsp;\r\n                {alert.actionLinkText && (\r\n                <>\r\n                (<a href=\"#action\" onClick={() => this.props.onActionLinkClick(alert.actionFormInitData)}>{alert.actionLinkText}</a>)\r\n                </>)}                \r\n            </div>)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        alert: state.alert\r\n    };\r\n}\r\n\r\nAlert = connect(mapStateToProps)(Alert);\r\n\r\nexport default Alert;","import ls from \"local-storage\";\r\n                \r\nclass UserApi {\r\n    constructor() {\r\n        const accessToken = ls.get(\"accessToken\");\r\n\r\n        this.authHeader = \"Bearer \" + accessToken;\r\n        this.endpointOrigin = window.location.origin === \"http://localhost:3000\" ? \"http://localhost:5000\" : (window.location.origin);\r\n    }\r\n    \r\n    getUserInfo = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader\r\n            }\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/user_info\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            return error;\r\n        });\r\n    }\r\n\r\n    patchUserInfo = (requestBody) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Authorization\": this.authHeader,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: requestBody,\r\n            mode: \"cors\"\r\n        };\r\n        const endpoint = this.endpointOrigin + \"/api/user_info\";\r\n\r\n        return fetch(endpoint, options).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).catch(error => {\r\n            throw error;\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserApi;","import { pendingTask, begin, end } from \"react-redux-spinner\";\r\n\r\nimport * as types from \"./actionTypes\";\r\nimport UserApi from \"../api/UserApi\";\r\n\r\nexport function loadUserInfo() {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.LOAD_USER_INFO,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new UserApi();\r\n        return api.getUserInfo().then(responseData => {\r\n            if (responseData) {\r\n                dispatch(loadUserInfoSuccess(responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function loadUserInfoSuccess(responseData) {\r\n    return {\r\n        type: types.LOAD_USER_INFO_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        userInfo: responseData.user_info\r\n    };\r\n}\r\n\r\nexport function updateUserInfo(id, requestBody) {\r\n    return function(dispatch) {\r\n        dispatch({\r\n            type: types.UPDATE_USER_INFO,\r\n            [ pendingTask ]: begin\r\n        });\r\n        const api = new UserApi();\r\n        return api.patchUserInfo(id, requestBody).then(responseData => {\r\n            if (responseData) {\r\n                dispatch(updateUserInfoSuccess(id, responseData));\r\n            }\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: types.ERROR_ENCOUNTERED,\r\n                [ pendingTask ]: end\r\n            });\r\n            throw(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport function updateUserInfoSuccess(id, responseData) {\r\n    return {\r\n        type: types.UPDATE_USER_INFO_SUCCESS,\r\n        [ pendingTask ]: end,\r\n        updatedId: id,\r\n        updatedUserInfo: responseData.updated_user_info\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Spinner } from \"react-redux-spinner\";\r\n\r\nimport Calendar from \"./Calendar\";\r\nimport Alert from \"./Alert\";\r\nimport * as activityTypeActions from \"../actions/activityTypeActions\";\r\nimport * as userActions from \"../actions/userActions\";\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.userActions.loadUserInfo();\r\n        this.props.activityTypeActions.loadActivityTypes();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // This is where we can add routing in due course\r\n            <>\r\n            <Spinner />\r\n            <Alert />\r\n            <h2>Training Plan</h2>\r\n            <Calendar />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {};\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        activityTypeActions: bindActionCreators(activityTypeActions, dispatch),\r\n        userActions: bindActionCreators(userActions, dispatch)\r\n    };\r\n}\r\n\r\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { pendingTasksReducer } from \"react-redux-spinner\";\r\n\r\nimport App from \"./components/App\";\r\nimport plannedActivitiesReducer from \"./reducers/plannedActivitiesReducer\";\r\nimport plannedRacesReducer from \"./reducers/plannedRacesReducer\";\r\nimport plannedExercisesReducer from \"./reducers/plannedExercisesReducer\";\r\nimport completedActivitiesReducer from \"./reducers/completedActivitiesReducer\";\r\nimport completedExercisesReducer from \"./reducers/completedExercisesReducer\";\r\nimport activityTypesReducer from \"./reducers/activityTypesReducer\";\r\nimport exerciseTypesReducer from \"./reducers/exerciseTypesReducer\";\r\nimport exerciseCategoriesReducer from \"./reducers/exerciseCategoriesReducer\";\r\nimport trainingPlanGeneratorInputsReducer from \"./reducers/trainingPlanGeneratorInputsReducer\";\r\nimport trainingPlanTemplatesReducer from \"./reducers/trainingPlanTemplatesReducer\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport alertReducer from \"./reducers/alertReducer\";\r\nimport \"./base.css\";\r\n\r\n// Might want to refactor this redux stuff into separate files for reducers and configuring store as per tutorial\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    plannedActivities: plannedActivitiesReducer,\r\n    plannedRaces: plannedRacesReducer,\r\n    plannedExercises: plannedExercisesReducer,\r\n    completedActivities: completedActivitiesReducer,\r\n    completedExercises: completedExercisesReducer,\r\n    activityTypes: activityTypesReducer,\r\n    exerciseTypes: exerciseTypesReducer,\r\n    exerciseCategories: exerciseCategoriesReducer,\r\n    trainingPlanGeneratorInputs: trainingPlanGeneratorInputsReducer,\r\n    trainingPlanTemplates: trainingPlanTemplatesReducer,\r\n    user: userReducer,\r\n    pendingTasks: pendingTasksReducer,\r\n    alert: alertReducer\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\n// Use a Main class that we can flesh out to include routing as we start to do more of the site's functionality from React\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"container\")\r\n);","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_ACTIVITIES_SUCCESS:\r\n            return action.plannedActivities;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_ACTIVITY_SUCCESS:\r\n        //     const remainingActivities = state.filter(function(plannedActivity) {\r\n        //         return plannedActivity.id !== action.deletedId;\r\n        //     });\r\n        //     return remainingActivities;\r\n        // TODO: proper reducer for adds and updates so that we can avoid the refresh to update state.  Probably more easy to think about once our data model allows for one-offs?\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedRacesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_RACES_SUCCESS:\r\n            return action.plannedRaces;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_ACTIVITY_SUCCESS:\r\n        //     const remainingActivities = state.filter(function(plannedActivity) {\r\n        //         return plannedActivity.id !== action.deletedId;\r\n        //     });\r\n        //     return remainingActivities;\r\n        // TODO: proper reducer for adds and updates so that we can avoid the refresh to update state.  Probably more easy to think about once our data model allows for one-offs?\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function plannedExercisesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_PLANNED_EXERCISES_SUCCESS:\r\n            return action.plannedExercises;\r\n        // todo: doesn't handle single-date scope at present\r\n        // case types.DELETE_PLANNED_EXERCISE_SUCCESS:\r\n        //     let remainingPlannedExerciseCategories = []\r\n        //     let remainingExercises;\r\n        //     for (let plannedExerciseCategory of state) {\r\n        //         remainingExercises = plannedExerciseCategory.exercises.filter(function(plannedExercise) {\r\n        //             return plannedExercise.id !== action.deletedId;\r\n        //         });\r\n        //         if (remainingExercises.length > 0) {\r\n        //             plannedExerciseCategory.exercises = remainingExercises;\r\n        //             remainingPlannedExerciseCategories.push(plannedExerciseCategory);\r\n        //         }\r\n        //     }\r\n        //     return remainingPlannedExerciseCategories;\r\n        // todo: proper reducers for update and create that avoid the need to refresh\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function completedActivitiesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_COMPLETED_ACTIVITIES_SUCCESS:\r\n            return action.completedActivities;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function completedExercisesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_COMPLETED_EXERCISES_SUCCESS:\r\n            return action.completedExercises;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function activityTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_ACTIVITY_TYPES_SUCCESS:\r\n            return action.activityTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseTypesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_TYPES_SUCCESS:\r\n            return action.exerciseTypes;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function exerciseCategoriesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_EXERCISE_CATEGORIES_SUCCESS:\r\n            return action.exerciseCategories;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function trainingPlanGeneratorInputsReducer(state, action) {\r\n    if (state === undefined) {\r\n        return null;\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_TRAINING_PLAN_GENERATOR_INPUTS_SUCCESS:\r\n            return action.trainingPlanGeneratorInputs;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function trainingPlanTemplatesReducer(state, action) {\r\n    if (state === undefined) {\r\n        return [];\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_TRAINING_PLAN_TEMPLATES_SUCCESS:\r\n            return action.trainingPlanTemplates;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function userReducer(state, action) {\r\n    if (state === undefined) {\r\n        return null;\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.LOAD_USER_INFO_SUCCESS:\r\n            return action.userInfo;\r\n        case types.UPDATE_USER_INFO_SUCCESS:\r\n            return action.updatedUserInfo;\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from \"../actions/actionTypes\";\r\n\r\nexport default function alertReducer(state, action) {\r\n    if (state === undefined) {\r\n        return {\r\n            showAlert: false,\r\n            message: null\r\n        };\r\n    }\r\n\r\n    switch(action.type) {\r\n        case types.SHOW_ALERT:\r\n            return {\r\n                showAlert: true,\r\n                message: action.alertMessage,\r\n                actionLinkText: action.actionLinkText,\r\n                actionFormInitData: action.actionFormInitData\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}